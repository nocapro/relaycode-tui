uuid: c2570c67-68b5-4b13-90d1-6c4ca4d115e8
projectId: relaycode-tui
createdAt: '2025-09-25T05:26:58.339Z'
gitCommitMsg: >-
  feat(dashboard): implement event stream drill-down

  Adds the ability for users to expand individual transactions directly within
  the Dashboard's event stream to view file and stat summaries without
  navigating away.

  - Updates `dashboard.store` to manage `expandedTransactionId`. - Implements UI
  for expanded view in `DashboardScreen`, including stats and file lists. - Adds
  keyboard controls (`→`/`←`/`Enter`) in `useDashboardScreen` for
  expand/collapse/navigate actions. - Refactors `getFileChangeTypeIcon` into a
  shared utility. - Removes the leading hyphen from the `formatTimeAgo` utility.
promptSummary: I want to add drill-down functionality to the dashboard screen event stream.
reasoning:
  - >-
    Executing Parts 1, 2, and 3 of the master plan. This will introduce the
    drill-down capability to the Dashboard screen, update its state management,
    and refactor related utilities.
  - '### Part 1: State and Utility Modifications'
  - >-
    First, I'll update the `dashboard` and `transaction` stores. The dashboard
    store will be enhanced to manage the expanded/collapsed state of event
    stream items. I'll also add a collapse-on-navigate feature to simplify the
    UI logic. The transaction store will get a new action to clear transactions,
    which is necessary for testing the dashboard's empty state.
  - >-
    To support the UI changes, I'll move the `getFileChangeTypeIcon` helper into
    `src/utils.ts` to make it reusable.
  - >-
    I'll update `TransactionDetailScreen.tsx` to import this helper from its new
    location.
  - '### Part 2: UI Implementation'
  - >-
    Now, I'll implement the UI changes in `DashboardScreen.tsx`. This includes
    updating the time format, adding a sub-component to show expanded
    transaction details, modifying the event stream items to indicate their
    expanded state, and updating the footer with the new keyboard shortcuts.
  - '### Part 3: Interaction Logic'
  - >-
    Finally, I'll update the `useDashboardScreen` hook to handle the new
    keyboard inputs (`→`, `←`, and `Enter`) for expanding, collapsing, and
    navigating into transactions.
operations:
  - type: write
    path: src/stores/dashboard.store.ts
    content: >
      --- src/stores/dashboard.store.ts

      +++ src/stores/dashboard.store.ts

      @@ ... @@
       interface DashboardState {
           status: DashboardStatus;
           previousStatus: DashboardStatus;
           selectedTransactionIndex: number;
      +    expandedTransactionId: string | null;
           actions: {
               togglePause: () => void;
               moveSelectionUp: () => void;
               moveSelectionDown: () => void;
      +        toggleExpand: () => void;
               startApproveAll: () => void;
               confirmAction: () => Promise<void>;
               cancelAction: () => void;
               setStatus: (status: DashboardStatus) => void;
      +        setExpandedTransactionId: (id: string | null) => void;
           };
       }
       
      @@ ... @@
           status: 'LISTENING',
           previousStatus: 'LISTENING',
           selectedTransactionIndex: 0,
      +    expandedTransactionId: null,
           actions: {
               togglePause: () => set(state => ({
                   status: state.status === 'LISTENING' ? 'PAUSED' : 'LISTENING',
               })),
               moveSelectionUp: () => set(state => {
                   const { transactions } = useTransactionStore.getState();
      -            return { selectedTransactionIndex:
      moveIndex(state.selectedTransactionIndex, 'up', transactions.length) };

      +            return {

      +                selectedTransactionIndex:
      moveIndex(state.selectedTransactionIndex, 'up', transactions.length),

      +                expandedTransactionId: null, // Collapse on navigation

      +            };
               }),
               moveSelectionDown: () => set(state => {
                   const { transactions } = useTransactionStore.getState();
      -            return { selectedTransactionIndex:
      moveIndex(state.selectedTransactionIndex, 'down', transactions.length) };

      +            return {

      +                selectedTransactionIndex:
      moveIndex(state.selectedTransactionIndex, 'down', transactions.length),

      +                expandedTransactionId: null, // Collapse on navigation

      +            };

      +        }),

      +        toggleExpand: () => set(state => {

      +            const { transactions } = useTransactionStore.getState();

      +            const selectedTx =
      transactions[state.selectedTransactionIndex];

      +            return { expandedTransactionId: state.expandedTransactionId
      === selectedTx?.id ? null : selectedTx?.id || null };
               }),
               startApproveAll: () => set(state => ({
                   status: 'CONFIRM_APPROVE',
      @@ ... @@
               })),
               cancelAction: () => set(state => ({ status: state.previousStatus })),
               setStatus: (status) => set({ status }),
      +        setExpandedTransactionId: (id) => set({ expandedTransactionId: id
      }),
               confirmAction: async () => { // The `if` is redundant as this is only called from that state.
                   const previousStatus = get().previousStatus;
                   set({ status: 'APPROVING' });
                   await DashboardService.approveAll();
      -            set({ status: previousStatus });

      +            set({ status: previousStatus, expandedTransactionId: null });
               },
           },
       }));
    patchStrategy: standard-diff
  - type: write
    path: src/stores/transaction.store.ts
    content: |
      --- src/stores/transaction.store.ts
      +++ src/stores/transaction.store.ts
      @@ ... @@
           actions: {
               loadTransactions: () => void;
               updateTransactionStatus: (id: string, status: TransactionStatus) => void;
      +        clearTransactions: () => void;
           };
       }
       
      @@ ... @@
                       transactions: state.transactions.map(tx =>
                           tx.id === id ? { ...tx, status, timestamp: Date.now() } : tx,
                       ),
                   }));
               },
      +        clearTransactions: () => set({ transactions: [] }),
           },
       }));
       
    patchStrategy: standard-diff
  - type: write
    path: src/utils.ts
    content: |
      --- src/utils.ts
      +++ src/utils.ts
      @@ ... @@
       import { useState, useEffect } from 'react';
      +import type { FileChangeType } from './types/domain.types';
       
       // Utility for simulation
       export const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
      @@ ... @@
           }, []);
       
           return [dimensions.columns, dimensions.rows];
       };
      +
      +export const getFileChangeTypeIcon = (type: FileChangeType) => {
      +    switch (type) {
      +        case 'MOD': return '[MOD]';
      +        case 'ADD': return '[ADD]';
      +        case 'DEL': return '[DEL]';
      +        case 'REN': return '[REN]';
      +    }
      +};
    patchStrategy: standard-diff
  - type: write
    path: src/components/TransactionDetailScreen.tsx
    content: |
      --- src/components/TransactionDetailScreen.tsx
      +++ src/components/TransactionDetailScreen.tsx
      @@ ... @@
       import DiffScreen from './DiffScreen';
       import ReasonScreen from './ReasonScreen';
       import { useTransactionDetailScreen } from '../hooks/useTransactionDetailScreen';
       import type { FileChangeType } from '../types/domain.types';
      +import { getFileChangeTypeIcon } from '../utils';
       
      -const getFileChangeTypeIcon = (type: FileChangeType) => {
      -    switch (type) {
      -        case 'MOD': return '[MOD]';
      -        case 'ADD': return '[ADD]';
      -        case 'DEL': return '[DEL]';
      -        case 'REN': return '[REN]';
      -    }
      -};
      -
       const RevertModal = ({ transactionHash }: { transactionHash: string }) => {
           return (
               <Box 
    patchStrategy: standard-diff
  - type: write
    path: src/components/DashboardScreen.tsx
    content: "--- src/components/DashboardScreen.tsx\n+++ src/components/DashboardScreen.tsx\n@@ ... @@\n import Separator from './Separator';\n import type { Transaction, TransactionStatus } from '../types/domain.types';\n import { useDashboardScreen } from '../hooks/useDashboardScreen';\n+import { getFileChangeTypeIcon } from '../utils';\n import { UI_CONFIG } from '../config/ui.config';\n \n // --- Sub-components & Helpers ---\n@@ ... @@\n \n const formatTimeAgo = (timestamp: number) => {\n     const seconds = Math.floor((Date.now() - timestamp) / 1000);\n-    if (seconds < 60) return `-${seconds}s`;\n+    if (seconds < 60) return `${seconds}s`;\n     const minutes = Math.floor(seconds / 60);\n-    return `-${minutes}m`;\n+    return `${minutes}m`;\n };\n \n-const EventStreamItem = ({ transaction, isSelected }: { transaction: Transaction, isSelected: boolean }) => {\n+const EventStreamItem = ({\n+    transaction,\n+    isSelected,\n+    isExpanded,\n+}: {\n+    transaction: Transaction;\n+    isSelected: boolean;\n+    isExpanded: boolean;\n+}) => {\n     const icon = getStatusIcon(transaction.status);\n     const time = formatTimeAgo(transaction.timestamp).padEnd(5, ' ');\n     const statusText = transaction.status.padEnd(11, ' ');\n+    const expandIcon = isExpanded ? '▾' : '▸';\n     \n     const messageNode = transaction.status === 'IN-PROGRESS'\n         ? <Text color=\"cyan\">{transaction.message}</Text>\n         : transaction.message;\n     \n     const content = (\n         <Text>\n-            {time} {icon} {statusText} <Text color=\"gray\">{transaction.hash}</Text> · {messageNode}\n+            {time} {expandIcon} {icon} {statusText}{' '}\n+            <Text color=\"gray\">{transaction.hash}</Text> · {messageNode}\n         </Text>\n     );\n \n@@ ... @@\n     transactionsToConfirm: Transaction[];\n }) => {\n     const actionText = 'APPROVE';\n@@ ... @@\n             </Box>\n         </Box>\n     );\n };\n \n+const ExpandedEventInfo = ({ transaction }: { transaction: Transaction }) => {\n+    const stats = transaction.stats;\n+    return (\n+        <Box flexDirection=\"column\" paddingLeft={4} marginBottom={1}>\n+            {stats && (\n+                <Text color=\"gray\">\n+                    Stats: {stats.files} files, +{stats.linesAdded}/-{stats.linesRemoved}\n+                </Text>\n+            )}\n+            <Text color=\"gray\">Files:</Text>\n+            <Box flexDirection=\"column\" paddingLeft={2}>\n+                {transaction.files?.map(file => (\n+                    <Text key={file.id} color=\"gray\"> {getFileChangeTypeIcon(file.type)} {file.path}</Text>\n+                ))}\n+            </Box>\n+        </Box>\n+    );\n+};\n // --- Main Component ---\n \n const DashboardScreen = () => {\n@@ ... @@\n         status,\n         transactions,\n         selectedTransactionIndex,\n+        expandedTransactionId,\n         pendingApprovals,\n         pendingCommits,\n         isModal,\n@@ ... @@\n         if (isProcessing) return <Text>Processing... This may take a moment.</Text>;\n \n         const pauseAction = status === 'PAUSED'\n-\t\t\t? <Text>(<Text color=\"cyan\" bold>P</Text>)resume</Text>\n-\t\t\t: <Text>(<Text color=\"cyan\" bold>P</Text>)ause</Text>;\n-\t\treturn (\n+\t\t\t? <Text>(<Text color=\"cyan\" bold>P</Text>)resume</Text>\n+\t\t\t: <Text>(<Text color=\"cyan\" bold>P</Text>)ause</Text>;\n+\t\treturn (\n             <Text color=\"gray\">\n-                (<Text color=\"cyan\" bold>↑↓</Text>) Nav · (<Text color=\"cyan\" bold>Enter</Text>) Review · (<Text color=\"cyan\" bold>L</Text>)og · (<Text color=\"cyan\" bold>A</Text>)pprove All · (<Text color=\"cyan\" bold>C</Text>)ommit All · {pauseAction} · (<Text color=\"cyan\" bold>Q</Text>)uit\n+                (<Text color=\"cyan\" bold>↑↓</Text>) Nav · (<Text color=\"cyan\" bold>→/Enter</Text>) View · (<Text color=\"cyan\" bold>←</Text>) Collapse · (<Text color=\"cyan\" bold>L</Text>)og · (<Text color=\"cyan\" bold>A</Text>)pprove All · (<Text color=\"cyan\" bold>C</Text>)ommit All · {pauseAction} · (<Text color=\"cyan\" bold>Q</Text>)uit\n             </Text>\n         );\n     };\n@@ ... @@\n             <Text bold underline> EVENT STREAM (Last 15 minutes)</Text>\n             <Box flexDirection=\"column\" marginTop={1}>\n                 {transactions.slice(viewOffset, viewOffset + viewportHeight).map((tx, index) => {\n                     const actualIndex = viewOffset + index;\n+                    const isExpanded = tx.id === expandedTransactionId && !isModal;\n                     return (\n-                        <EventStreamItem\n-                            key={tx.id}\n-                            transaction={tx}\n-                            isSelected={!isModal && actualIndex === selectedTransactionIndex}\n-                        />\n+                        <Box flexDirection=\"column\" key={tx.id}>\n+                            <EventStreamItem\n+                                transaction={tx}\n+                                isSelected={!isModal && actualIndex === selectedTransactionIndex}\n+                                isExpanded={isExpanded}\n+                            />\n+                            {isExpanded && <ExpandedEventInfo transaction={tx} />}\n+                        </Box>\n                     );\n                 })}\n             </Box>\n"
    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useDashboardScreen.tsx
    content: >
      --- src/hooks/useDashboardScreen.tsx

      +++ src/hooks/useDashboardScreen.tsx

      @@ ... @@
           const {
               status,
               selectedTransactionIndex,
      +        expandedTransactionId,
           } = useDashboardStore();
           const transactions = useTransactionStore(s => s.transactions);
           const pendingTransactions = useTransactionStore(selectTransactionsByStatus('PENDING'));
      @@ ... @@
           const {
               togglePause,
               moveSelectionUp,
               moveSelectionDown,
      +        toggleExpand,
               startApproveAll,
               confirmAction,
               cancelAction,
      @@ ... @@
               if (key.upArrow) moveSelectionUp();
               if (key.downArrow) moveSelectionDown();
               
      -        if (key.return) {

      -            const selectedTx = transactions[selectedTransactionIndex];

      -            if (selectedTx?.status === 'PENDING') {

      -                // For PENDING transactions, we still go to the review
      screen.

      -                useReviewStore.getState().actions.load(selectedTx.id);

      -                appActions.showReviewScreen();

      -            } else if (selectedTx) {

      -                useDetailStore.getState().actions.load(selectedTx.id);

      -                appActions.showTransactionDetailScreen();

      +        const selectedTx = transactions[selectedTransactionIndex];

      +

      +        if (key.rightArrow || key.return) {

      +            if (selectedTx) {

      +                if (expandedTransactionId === selectedTx.id) {

      +                    // Already expanded, navigate

      +                    if (selectedTx.status === 'PENDING') {

      +                       
      useReviewStore.getState().actions.load(selectedTx.id);

      +                        appActions.showReviewScreen();

      +                    } else {

      +                       
      useDetailStore.getState().actions.load(selectedTx.id);

      +                        appActions.showTransactionDetailScreen();

      +                    }

      +                } else {

      +                    toggleExpand();

      +                }
                   }
      +        }

      +        if (key.leftArrow && expandedTransactionId) {

      +            toggleExpand();
               }
               
               if (input.toLowerCase() === 'p') togglePause();
      @@ ... @@
           const transactionsToConfirm = status === 'CONFIRM_APPROVE' ? pendingTransactions : [];
       
           return {
               status,
               transactions,
               selectedTransactionIndex,
      +        expandedTransactionId,
               pendingApprovals,
               pendingCommits,
               isModal,
    patchStrategy: standard-diff
snapshot:
  src/stores/dashboard.store.ts: >-
    import { create } from 'zustand';

    import { useTransactionStore } from './transaction.store';

    import { DashboardService } from '../services/dashboard.service';

    import { moveIndex } from './navigation.utils';


    export type DashboardStatus = 'LISTENING' | 'PAUSED' | 'CONFIRM_APPROVE' |
    'APPROVING';
     
    interface DashboardState {
        status: DashboardStatus;
        previousStatus: DashboardStatus;
        selectedTransactionIndex: number;
        actions: {
            togglePause: () => void;
            moveSelectionUp: () => void;
            moveSelectionDown: () => void;
            startApproveAll: () => void;
            confirmAction: () => Promise<void>;
            cancelAction: () => void;
            setStatus: (status: DashboardStatus) => void;
        };
    }


    export const useDashboardStore = create<DashboardState>((set, get) => ({
        status: 'LISTENING',
        previousStatus: 'LISTENING',
        selectedTransactionIndex: 0,
        actions: {
            togglePause: () => set(state => ({
                status: state.status === 'LISTENING' ? 'PAUSED' : 'LISTENING',
            })),
            moveSelectionUp: () => set(state => {
                const { transactions } = useTransactionStore.getState();
                return { selectedTransactionIndex: moveIndex(state.selectedTransactionIndex, 'up', transactions.length) };
            }),
            moveSelectionDown: () => set(state => {
                const { transactions } = useTransactionStore.getState();
                return { selectedTransactionIndex: moveIndex(state.selectedTransactionIndex, 'down', transactions.length) };
            }),
            startApproveAll: () => set(state => ({
                status: 'CONFIRM_APPROVE',
                previousStatus: state.status,
            })),
            cancelAction: () => set(state => ({ status: state.previousStatus })),
            setStatus: (status) => set({ status }),
            confirmAction: async () => { // The `if` is redundant as this is only called from that state.
                const previousStatus = get().previousStatus;
                set({ status: 'APPROVING' });
                await DashboardService.approveAll();
                set({ status: previousStatus });
            },
        },
    }));
  src/stores/transaction.store.ts: >
    import { create } from 'zustand';

    import { TransactionService } from '../services/transaction.service';

    import { useViewStore } from './view.store';

    import type { Transaction, TransactionStatus } from '../types/domain.types';


    export type { Transaction };


    interface TransactionState {
        transactions: Transaction[];
        actions: {
            loadTransactions: () => void;
            updateTransactionStatus: (id: string, status: TransactionStatus) => void;
        };
    }


    export const useTransactionStore = create<TransactionState>((set) => ({
        transactions: [],
        actions: {
            loadTransactions: () => {
                const transactions = TransactionService.getAllTransactions();
                set({ transactions });
            },
            updateTransactionStatus: (id, status) => {
                set(state => ({
                    transactions: state.transactions.map(tx =>
                        tx.id === id ? { ...tx, status, timestamp: Date.now() } : tx,
                    ),
                }));
            },
        },
    }));


    // --- Selectors ---


    /** Selects transactions by their status. */

    export const selectTransactionsByStatus = (status: TransactionStatus) =>
    (state: TransactionState) =>
        state.transactions.filter(tx => tx.status === status);

    /** Selects the transaction currently targeted by the view store. */

    export const selectSelectedTransaction = (state: TransactionState):
    Transaction | undefined => {
        const { selectedTransactionId } = useViewStore.getState();
        return state.transactions.find(t => t.id === selectedTransactionId);
    };
  src/utils.ts: >-
    import { useState, useEffect } from 'react';


    // Utility for simulation

    export const sleep = (ms: number) => new Promise(resolve =>
    setTimeout(resolve, ms));


    export const useStdoutDimensions = (): [number, number] => {
        const [dimensions, setDimensions] = useState({ columns: 80, rows: 24 });

        useEffect(() => {
            const updateDimensions = () => {
                setDimensions({
                    columns: process.stdout.columns || 80,
                    rows: process.stdout.rows || 24,
                });
            };

            updateDimensions();
            process.stdout.on('resize', updateDimensions);

            return () => {
                process.stdout.off('resize', updateDimensions);
            };
        }, []);

        return [dimensions.columns, dimensions.rows];
    };
  src/components/TransactionDetailScreen.tsx: >-
    import { Box, Text } from 'ink';

    import Separator from './Separator';

    import DiffScreen from './DiffScreen';

    import ReasonScreen from './ReasonScreen';

    import { useTransactionDetailScreen } from
    '../hooks/useTransactionDetailScreen';

    import type { FileChangeType } from '../types/domain.types';


    const getFileChangeTypeIcon = (type: FileChangeType) => {
        switch (type) {
            case 'MOD': return '[MOD]';
            case 'ADD': return '[ADD]';
            case 'DEL': return '[DEL]';
            case 'REN': return '[REN]';
        }
    };


    const RevertModal = ({ transactionHash }: { transactionHash: string }) => {
        return (
            <Box 
                borderStyle="round"
                borderColor="yellow"
                flexDirection="column"
                paddingX={2}
                width="80%"
                alignSelf='center'
            >
                <Text bold color="yellow" wrap="wrap" >REVERT THIS TRANSACTION?</Text>
                <Box height={1} />
                <Text wrap="wrap">This will create a NEW transaction that reverses all changes made by {transactionHash}. The original transaction record will be preserved.</Text>
                <Box height={1} />
                <Text wrap="wrap">Are you sure?</Text>
            </Box>
        );
    };


    const TransactionDetailScreen = () => {
        const {
            transaction, files,
            focusedItemPath, expandedItemPaths, bodyView,
        } = useTransactionDetailScreen();

        if (!transaction) {
            return <Text>Loading transaction...</Text>;
        }

        const renderNavigator = () => {
            const isPromptFocused = focusedItemPath === 'PROMPT';
            const isReasoningFocused = focusedItemPath === 'REASONING';
            const isFilesFocused = focusedItemPath.startsWith('FILES');
            
            const isPromptExpanded = expandedItemPaths.has('PROMPT');
            const isReasoningExpanded = expandedItemPaths.has('REASONING');
            const isFilesExpanded = expandedItemPaths.has('FILES');
            
            return (
                <Box flexDirection="column">
                    <Text color={isPromptFocused ? 'cyan' : undefined}>
                        {isPromptFocused ? '> ' : '  '}
                        {isPromptExpanded ? '▾' : '▸'} (P)rompt
                    </Text>
                    <Text color={isReasoningFocused ? 'cyan' : undefined}>
                        {isReasoningFocused ? '> ' : '  '}
                        {isReasoningExpanded ? '▾' : '▸'} (R)easoning ({transaction.reasoning?.split('\n\n').length || 0} steps)
                    </Text>
                    <Text color={isFilesFocused ? 'cyan' : undefined}>
                        {isFilesFocused && !focusedItemPath.includes('/') ? '> ' : '  '}
                        {isFilesExpanded ? '▾' : '▸'} (F)iles ({files.length})
                    </Text>
                    {isFilesExpanded && (
                        <Box flexDirection="column" paddingLeft={2}>
                            {files.map((file) => {
                                 const fileId = `FILES/${file.id}`;
                                 const isFileSelected = focusedItemPath === fileId;
                                 const stats = file.type === 'DEL' ? '' : ` (+${file.linesAdded}/-${file.linesRemoved})`;
                                 return (
                                    <Text key={file.id} color={isFileSelected ? 'cyan' : undefined}>
                                        {isFileSelected ? '> ' : '  '}
                                        {`${getFileChangeTypeIcon(file.type)} ${file.path}${stats}`}
                                    </Text>
                                );
                            })}
                        </Box>
                    )}
                </Box>
            );
        };

        const renderBody = () => {
            if (bodyView === 'NONE') {
                return <Text color="gray">(Press → to expand a section and view its contents)</Text>;
            }
            if (bodyView === 'PROMPT') {
                return (
                    <Box flexDirection="column">
                        <Text>PROMPT</Text>
                        <Box marginTop={1}><Text>{transaction.prompt}</Text></Box>
                    </Box>
                );
            }
            if (bodyView === 'REASONING') {
                if (!transaction.reasoning) return <Text color="gray">No reasoning provided.</Text>;
                return <ReasonScreen reasoning={transaction.reasoning} />;
            }
            if (bodyView === 'FILES_LIST') {
                 return <Text color="gray">(Select a file and press → to view the diff)</Text>;
            }
            if (bodyView === 'DIFF_VIEW') {
                const fileId = focusedItemPath.split('/')[1];
                const file = files.find(f => f.id === fileId);
                if (!file) return null;
                return <DiffScreen filePath={file.path} diffContent={file.diff} isExpanded={true} />;
            }
            return null;
        };

        const renderFooter = () => {
            if (bodyView === 'REVERT_CONFIRM') {
                return <Text>(Enter) Confirm Revert      (Esc) Cancel</Text>;
            }
            
            const baseActions = ['(↑↓) Nav', '(C)opy', '(U)ndo', '(Q)uit/Back'];

            if (focusedItemPath.includes('/')) { // Is a file
                if (bodyView === 'DIFF_VIEW') {
                    return <Text>(↑↓) Nav Files · (←) Back to List · {baseActions.slice(1).join(' · ')}</Text>;
                }
                return <Text>(↑↓) Nav Files · (→) View Diff · (←) Back to Sections · {baseActions.slice(1).join(' · ')}</Text>;
            }
            
            if (expandedItemPaths.has(focusedItemPath)) {
                return <Text>(↑↓) Nav/Scroll · (→) Drill In · (←) Collapse · {baseActions.slice(1).join(' · ')}</Text>;
            }
            
            return <Text>(↑↓) Nav · (→) Expand · {baseActions.slice(1).join(' · ')}</Text>;
        };

        const { message, timestamp, status } = transaction;
        const date = new Date(timestamp).toISOString().replace('T', ' ').substring(0, 19);
        const fileStats = `${files.length} Files · +${files.reduce((a, f) => a + f.linesAdded, 0)} lines, -${files.reduce((a, f) => a + f.linesRemoved, 0)} lines`;

        return (
            <Box flexDirection="column">
                {/* Header */}
                <Text>▲ relaycode transaction details</Text>
                <Separator />
                
                {/* Modal takeover for Revert */}
                {bodyView === 'REVERT_CONFIRM' && <RevertModal transactionHash={transaction.hash} />}
                
                {/* Main view */}
                <Box flexDirection="column" display={bodyView === 'REVERT_CONFIRM' ? 'none' : 'flex'}>
                    {/* Navigator Part A */}
                    <Box flexDirection="column" marginY={1}>
                        <Text>UUID: {transaction.id}</Text>
                        <Text>Git: {message}</Text>
                        <Text>Date: {date} · Status: {status}</Text>
                        <Text>Stats: {fileStats}</Text>
                    </Box>
                    
                    {/* Navigator Part B */}
                    {renderNavigator()}
                    
                    <Separator />
                    
                    {/* Body */}
                    <Box marginY={1}>
                        {renderBody()}
                    </Box>
                    
                    <Separator />
                </Box>
                
                {/* Footer */}
                <Box>
                    {renderFooter()}
                </Box>
            </Box>
        );
    };


    export default TransactionDetailScreen;
  src/components/DashboardScreen.tsx: "import React from 'react';\nimport { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport Separator from './Separator';\nimport type { Transaction, TransactionStatus } from '../types/domain.types';\nimport { useDashboardScreen } from '../hooks/useDashboardScreen';\nimport { UI_CONFIG } from '../config/ui.config';\n\n// --- Sub-components & Helpers ---\n\nconst getStatusIcon = (status: TransactionStatus) => {\n    switch (status) {\n        case 'PENDING': return <Text color=\"yellow\">?</Text>;\n        case 'APPLIED': return <Text color=\"green\">✓</Text>;\n        case 'COMMITTED': return <Text color=\"blue\">→</Text>;\n        case 'HANDOFF': return <Text color=\"magenta\">→</Text>;\n        case 'FAILED': return <Text color=\"red\">✗</Text>;\n        case 'REVERTED': return <Text color=\"gray\">↩</Text>;\n        case 'IN-PROGRESS': return <Spinner type=\"dots\" />;\n        default: return <Text> </Text>;\n    }\n};\n\nconst formatTimeAgo = (timestamp: number) => {\n    const seconds = Math.floor((Date.now() - timestamp) / 1000);\n    if (seconds < 60) return `-${seconds}s`;\n    const minutes = Math.floor(seconds / 60);\n    return `-${minutes}m`;\n};\n\nconst EventStreamItem = ({ transaction, isSelected }: { transaction: Transaction, isSelected: boolean }) => {\n    const icon = getStatusIcon(transaction.status);\n    const time = formatTimeAgo(transaction.timestamp).padEnd(5, ' ');\n    const statusText = transaction.status.padEnd(11, ' ');\n    \n    const messageNode = transaction.status === 'IN-PROGRESS'\n        ? <Text color=\"cyan\">{transaction.message}</Text>\n        : transaction.message;\n    \n    const content = (\n        <Text>\n            {time} {icon} {statusText} <Text color=\"gray\">{transaction.hash}</Text> · {messageNode}\n        </Text>\n    );\n\n    return isSelected ? <Text bold color=\"cyan\">{'> '}{content}</Text> : <Text>{'  '}{content}</Text>;\n};\n\nconst ConfirmationContent = ({\n    transactionsToConfirm,\n}: {\n    transactionsToConfirm: Transaction[];\n}) => {\n    const actionText = 'APPROVE';\n    \n    return (\n        <Box flexDirection=\"column\" marginY={1} paddingLeft={2}>\n            <Text bold color=\"yellow\">{actionText} ALL PENDING TRANSACTIONS?</Text>\n            <Text>\n                The following {transactionsToConfirm.length} transaction(s) will be approved:\n            </Text>\n            <Box flexDirection=\"column\" paddingLeft={1} marginTop={1}>\n                {transactionsToConfirm.map(tx => (\n                    <Text key={tx.id}>- {tx.hash}: {tx.message}</Text>\n                ))}\n            </Box>\n        </Box>\n    );\n};\n\n// --- Main Component ---\n\nconst DashboardScreen = () => {\n    const {\n        status,\n        transactions,\n        selectedTransactionIndex,\n        pendingApprovals,\n        pendingCommits,\n        isModal,\n        isProcessing,\n        viewOffset,\n        viewportHeight,\n        transactionsToConfirm,\n    } = useDashboardScreen({ reservedRows: UI_CONFIG.dashboard.reservedRows });\n\n    const renderStatusBar = () => {\n        let statusText: string;\n        let statusIcon: React.ReactNode;\n        switch (status) {\n            case 'LISTENING': statusText = 'LISTENING'; statusIcon = <Text color=\"green\">●</Text>; break;\n            case 'PAUSED': statusText = 'PAUSED'; statusIcon = <Text color=\"yellow\">||</Text>; break;\n            case 'APPROVING': statusText = 'APPROVING...'; statusIcon = <Text color=\"cyan\"><Spinner type=\"dots\"/></Text>; break;\n            default: statusText = 'LISTENING'; statusIcon = <Text color=\"green\">●</Text>;\n        }\n\n        let approvalStr: React.ReactNode = String(pendingApprovals).padStart(2, '0');\n        const commitStr: React.ReactNode = String(pendingCommits).padStart(2, '0');\n\n        if (status === 'APPROVING') approvalStr = <Text color=\"cyan\">(<Spinner type=\"dots\"/>)</Text>;\n        if (status === 'CONFIRM_APPROVE') {\n            approvalStr = <Text bold color=\"yellow\">┌ {approvalStr} ┐</Text>;\n        }\n        \n        return (\n            <Text>\n                STATUS: {statusIcon} {statusText} · APPROVALS: {approvalStr} · COMMITS: {commitStr}\n            </Text>\n        );\n    };\n\n    const renderFooter = () => {\n        if (isModal) return (\n            <Text>\n                (<Text color=\"cyan\" bold>Enter</Text>) Confirm      (<Text color=\"cyan\" bold>Esc</Text>) Cancel\n            </Text>\n        );\n        if (isProcessing) return <Text>Processing... This may take a moment.</Text>;\n\n        const pauseAction = status === 'PAUSED'\n\t\t\t? <Text>(<Text color=\"cyan\" bold>P</Text>)resume</Text>\n\t\t\t: <Text>(<Text color=\"cyan\" bold>P</Text>)ause</Text>;\n\t\treturn (\n            <Text color=\"gray\">\n                (<Text color=\"cyan\" bold>↑↓</Text>) Nav · (<Text color=\"cyan\" bold>Enter</Text>) Review · (<Text color=\"cyan\" bold>L</Text>)og · (<Text color=\"cyan\" bold>A</Text>)pprove All · (<Text color=\"cyan\" bold>C</Text>)ommit All · {pauseAction} · (<Text color=\"cyan\" bold>Q</Text>)uit\n            </Text>\n        );\n    };\n    \n    return (\n        <Box flexDirection=\"column\" height=\"100%\">\n            <Text color=\"cyan\">▲ relaycode dashboard</Text>\n            <Separator />\n            <Box marginY={1}>\n                {renderStatusBar()}\n            </Box>\n            \n            {isModal && (\n                <>\n                    <ConfirmationContent transactionsToConfirm={transactionsToConfirm} />\n                    <Separator />\n                </>\n            )}\n            \n            <Text bold underline> EVENT STREAM (Last 15 minutes)</Text>\n            <Box flexDirection=\"column\" marginTop={1}>\n                {transactions.slice(viewOffset, viewOffset + viewportHeight).map((tx, index) => {\n                    const actualIndex = viewOffset + index;\n                    return (\n                        <EventStreamItem\n                            key={tx.id}\n                            transaction={tx}\n                            isSelected={!isModal && actualIndex === selectedTransactionIndex}\n                        />\n                    );\n                })}\n            </Box>\n\n            <Box marginTop={1}><Separator /></Box>\n            {renderFooter()}\n        </Box>\n    );\n};\n\nexport default DashboardScreen;"
  src/hooks/useDashboardScreen.tsx: >-
    import { useInput } from 'ink';

    import { useDashboardStore } from '../stores/dashboard.store';

    import { useAppStore } from '../stores/app.store';

    import { useCommitStore } from '../stores/commit.store';

    import { useTransactionStore, selectTransactionsByStatus } from
    '../stores/transaction.store';

    import { useReviewStore } from '../stores/review.store';

    import { useDetailStore } from '../stores/detail.store';

    import { useHistoryStore } from '../stores/history.store';

    import { useViewport } from './useViewport';


    export const useDashboardScreen = ({ reservedRows }: { reservedRows: number
    }) => {
        const {
            status,
            selectedTransactionIndex,
        } = useDashboardStore();
        const transactions = useTransactionStore(s => s.transactions);
        const pendingTransactions = useTransactionStore(selectTransactionsByStatus('PENDING'));
        const appliedTransactions = useTransactionStore(selectTransactionsByStatus('APPLIED'));

        const { viewOffset, viewportHeight } = useViewport({
            selectedIndex: selectedTransactionIndex,
            reservedRows,
        });

        const {
            togglePause,
            moveSelectionUp,
            moveSelectionDown,
            startApproveAll,
            confirmAction,
            cancelAction,
        } = useDashboardStore(s => s.actions);
        const appActions = useAppStore(s => s.actions);
        const commitActions = useCommitStore(s => s.actions);

        const pendingApprovals = pendingTransactions.length;
        const pendingCommits = appliedTransactions.length;

        const isModal = status === 'CONFIRM_APPROVE';
        const isProcessing = status === 'APPROVING';

        useInput((input, key) => {
            if (isModal) {
                if (key.return) confirmAction();
                if (key.escape) cancelAction();
                return;
            }

            if (isProcessing) return; // No input while processing

            if (key.upArrow) moveSelectionUp();
            if (key.downArrow) moveSelectionDown();
            
            if (key.return) {
                const selectedTx = transactions[selectedTransactionIndex];
                if (selectedTx?.status === 'PENDING') {
                    // For PENDING transactions, we still go to the review screen.
                    useReviewStore.getState().actions.load(selectedTx.id);
                    appActions.showReviewScreen();
                } else if (selectedTx) {
                    useDetailStore.getState().actions.load(selectedTx.id);
                    appActions.showTransactionDetailScreen();
                }
            }
            
            if (input.toLowerCase() === 'p') togglePause();
            if (input.toLowerCase() === 'a' && pendingApprovals > 0) startApproveAll();
            if (input.toLowerCase() === 'c' && pendingCommits > 0) {
                commitActions.prepareCommitScreen();
                appActions.showGitCommitScreen();
            }
            if (input.toLowerCase() === 'l') {
                useHistoryStore.getState().actions.load();
                appActions.showTransactionHistoryScreen();
            }
        });
        const transactionsToConfirm = status === 'CONFIRM_APPROVE' ? pendingTransactions : [];

        return {
            status,
            transactions,
            selectedTransactionIndex,
            pendingApprovals,
            pendingCommits,
            isModal,
            isProcessing,
            viewOffset,
            viewportHeight,
            transactionsToConfirm,
        };
    };
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 125
