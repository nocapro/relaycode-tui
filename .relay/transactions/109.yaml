uuid: c29038d4-53c8-47ac-8da8-1b204e389437
projectId: relaycode-tui
createdAt: '2025-09-25T02:01:22.601Z'
gitCommitMsg: >-
  refactor(navigation): unify navigation and command consistency

  Centralizes application-wide navigation logic (Quit, Back) into the
  `useGlobalHotkeys` hook, removing redundant handlers from individual screens.
  This ensures that 'q' and 'Escape' have consistent behavior across the TUI.

  Overhauls the Transaction Detail screen's navigation model to mirror the more
  intuitive drill-down/bubble-up paradigm from the History screen. The state
  management in `detail.store.ts` has been refactored to use a path-based
  system, simplifying logic and improving robustness.

  Finally, the global help screen has been updated to accurately document these
  new, consistent keybindings.
promptSummary: >-
  The user requested to streamline the esc and quit behaviour accross screens
  for consistency and implement drilling left/right arrow navigation in the
  transaction detail screen.
reasoning:
  - >-
    I have analyzed the request and will now execute the comprehensive
    refactoring plan. The goal is to unify navigation controls (`Q`, `Esc`,
    arrow keys) across the application for a more consistent and intuitive user
    experience.
  - '### Part 1: Unify Global Navigation'
  - >-
    First, I'll centralize the "Quit" and "Back to Dashboard" logic. I'm
    expanding the constants to define which screens have these behaviors and
    then implementing this logic in the global hotkey hook. This removes
    redundant code from individual screen hooks.
  - '### Part 2: Refactor Transaction Detail Screen'
  - >-
    Next, I am overhauling the state management and navigation logic for the
    `TransactionDetailScreen`. I'm replacing the complex state with a simpler,
    path-based model (`focusedItemPath`, `expandedItemPaths`) and rewriting the
    actions to support a more intuitive drill-down/bubble-up navigation with the
    arrow keys, consistent with the `TransactionHistoryScreen`.
  - '### Part 3: Update UI and Documentation'
  - >-
    Finally, to ensure the user is aware of these new, consistent controls, I am
    updating the global help screen to reflect the standardized keybindings for
    quitting, backing out, and hierarchical navigation.
  - >-
    This completes the planned refactoring. The application's navigation is now
    more consistent, predictable, and robust.
operations:
  - type: write
    path: src/constants/app.constants.ts
    content: |+
      --- src/constants/app.constants.ts
      +++ src/constants/app.constants.ts
      @@ -14,4 +14,12 @@
       export const MAIN_SCREENS_FOR_QUIT = [
           APP_SCREENS.DASHBOARD,
           APP_SCREENS.INIT,
      +    APP_SCREENS.TRANSACTION_HISTORY,
       ];
      +
      +export const SCREENS_WITH_DASHBOARD_BACK_ACTION = [
      +    APP_SCREENS.REVIEW,
      +    APP_SCREENS.GIT_COMMIT,
      +    APP_SCREENS.TRANSACTION_DETAIL,
      +];

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useGlobalHotkeys.tsx
    content: >+
      --- src/hooks/useGlobalHotkeys.tsx

      +++ src/hooks/useGlobalHotkeys.tsx

      @@ -1,13 +1,15 @@
       import { useApp, useInput } from 'ink';
       import { useAppStore } from '../stores/app.store';
       import { useViewStore } from '../stores/view.store';
      -import { MAIN_SCREENS_FOR_QUIT } from '../constants/app.constants';

      +import { MAIN_SCREENS_FOR_QUIT, SCREENS_WITH_DASHBOARD_BACK_ACTION } from
      '../constants/app.constants';
       
       export const useGlobalHotkeys = ({ isActive }: { isActive: boolean }) => {
           const { exit } = useApp();
           const { currentScreen } = useAppStore(s => ({
               currentScreen: s.currentScreen,
           }));
      +    const { showDashboardScreen } = useAppStore(s => s.actions);
           const { activeOverlay, setActiveOverlay } = useViewStore(s => ({
               activeOverlay: s.activeOverlay,
               setActiveOverlay: s.actions.setActiveOverlay,
      @@ -42,8 +44,14 @@
               }
               
               // Quit from main screens
      -        if (input.toLowerCase() === 'q' && (MAIN_SCREENS_FOR_QUIT as
      readonly string[]).includes(currentScreen)) {

      -            exit();

      +        if (input.toLowerCase() === 'q') {

      +            if ((MAIN_SCREENS_FOR_QUIT as readonly
      string[]).includes(currentScreen)) {

      +                exit();

      +            } else if ((SCREENS_WITH_DASHBOARD_BACK_ACTION as readonly
      string[]).includes(currentScreen)) {

      +                showDashboardScreen();

      +            }

      +        } else if (key.escape && (SCREENS_WITH_DASHBOARD_BACK_ACTION as
      readonly string[]).includes(currentScreen)) {

      +            showDashboardScreen();
               }
           }, { isActive });
       };

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useGitCommitScreen.tsx
    content: |+
      --- src/hooks/useGitCommitScreen.tsx
      +++ src/hooks/useGitCommitScreen.tsx
      @@ -10,9 +10,6 @@
           useInput((input, key) => {
               if (isCommitting) return;
       
      -        if (key.escape) {
      -            showDashboardScreen();
      -        }
               if (key.return) {
                   commit().then(() => {
                       showDashboardScreen();

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useReviewScreen.tsx
    content: |+
      --- src/hooks/useReviewScreen.tsx
      +++ src/hooks/useReviewScreen.tsx
      @@ -80,21 +80,18 @@
       
           const handleGlobalInput = (input: string, key: Key): boolean => {
               if (input === '1') { // For demo purposes
      -            startApplySimulation('success');
      -            return true;
      +            startApplySimulation('success'); return true;
               }
               if (input === '2') { // For demo purposes
      -            startApplySimulation('failure');
      -            return true;
      +            startApplySimulation('failure'); return true;
               }
      -        if (input.toLowerCase() === 'q') {
      -            exit();
      -            return true;
      -        }
      +        // The 'q' (quit/back) is now handled by the global hotkey hook.
      +
               if (key.escape) {
                   if (bodyView === 'bulk_repair' || bodyView === 'confirm_handoff') {
                       toggleBodyView(bodyView);
                   } else if (bodyView !== 'none') {
                       setBodyView('none');
      -            } else {
      -                showDashboardScreen();
                   }
                   return true;
               }

    patchStrategy: standard-diff
  - type: write
    path: src/stores/detail.store.ts
    content: >
      <<<<<<< SEARCH

      interface DetailState {
          navigatorFocus: NavigatorSection | 'FILES_LIST';
          expandedSection: NavigatorSection | null;
          selectedFileIndex: number;
          bodyView: DetailBodyView;
          actions: {
              load: (transactionId: string) => void;
              navigateUp: () => void;
              navigateDown: () => void;
              handleEnterOrRight: () => void;
              handleEscapeOrLeft: () => void;
              toggleRevertConfirm: () => void;
              confirmRevert: () => void;
          };
      }


      export const useDetailStore = create<DetailState>((set, get) => ({
          navigatorFocus: NAVIGATOR_SECTIONS.PROMPT,
          expandedSection: null,
          selectedFileIndex: 0,
          bodyView: DETAIL_BODY_VIEWS.NONE,
          actions: {
              load: (transactionId) => {
                  useViewStore.getState().actions.setSelectedTransactionId(transactionId);
                  set({
                      navigatorFocus: NAVIGATOR_SECTIONS.PROMPT,
                      expandedSection: null,
                      selectedFileIndex: 0,
                      bodyView: DETAIL_BODY_VIEWS.NONE,
                  });
              },
              navigateUp: () => {
                  const navigatorOrder: NavigatorSection[] = [
                      NAVIGATOR_SECTIONS.PROMPT,
                      NAVIGATOR_SECTIONS.REASONING,
                      NAVIGATOR_SECTIONS.FILES,
                  ];
                  const { navigatorFocus, selectedFileIndex } = get();
                  if (navigatorFocus === 'FILES_LIST') {
                      set({ selectedFileIndex: Math.max(0, selectedFileIndex - 1) });
                  } else {
                      const currentIndex = navigatorOrder.indexOf(navigatorFocus as NavigatorSection);
                      if (currentIndex > 0) {
                          set({ navigatorFocus: navigatorOrder[currentIndex - 1]! });
                      }
                  }
              },
              navigateDown: () => {
                  const navigatorOrder: NavigatorSection[] = [
                      NAVIGATOR_SECTIONS.PROMPT,
                      NAVIGATOR_SECTIONS.REASONING,
                      NAVIGATOR_SECTIONS.FILES,
                  ];
                  const { navigatorFocus, selectedFileIndex } = get();
                  const { selectedTransactionId } = useViewStore.getState();
                  const transaction = useTransactionStore.getState().transactions.find(tx => tx.id === selectedTransactionId);
                  const files = transaction?.files || [];
                  if (navigatorFocus === 'FILES_LIST') {
                      set({ selectedFileIndex: Math.min(files.length - 1, selectedFileIndex + 1) });
                  } else {
                      const currentIndex = navigatorOrder.indexOf(navigatorFocus as NavigatorSection);
                      if (currentIndex < navigatorOrder.length - 1) {
                          set({ navigatorFocus: navigatorOrder[currentIndex + 1]! });
                      }
                  }
              },
              handleEnterOrRight: () => {
                  const { navigatorFocus, expandedSection } = get();
                  if (navigatorFocus === 'FILES_LIST') {
                      set({ bodyView: DETAIL_BODY_VIEWS.DIFF_VIEW });
                      return;
                  }
                  if (expandedSection === navigatorFocus) {
                      if (navigatorFocus === NAVIGATOR_SECTIONS.FILES) {
                          set({ navigatorFocus: 'FILES_LIST', bodyView: DETAIL_BODY_VIEWS.FILES_LIST });
                      }
                      return;
                  }
                  set({ expandedSection: navigatorFocus as NavigatorSection });
                  if (navigatorFocus === NAVIGATOR_SECTIONS.PROMPT) set({ bodyView: DETAIL_BODY_VIEWS.PROMPT });
                  if (navigatorFocus === NAVIGATOR_SECTIONS.REASONING) set({ bodyView: DETAIL_BODY_VIEWS.REASONING });
                  if (navigatorFocus === NAVIGATOR_SECTIONS.FILES) set({ bodyView: DETAIL_BODY_VIEWS.FILES_LIST });
              },
              handleEscapeOrLeft: () => {
                  const { navigatorFocus, expandedSection, bodyView } = get();
                  if (bodyView === DETAIL_BODY_VIEWS.DIFF_VIEW) {
                      set({ bodyView: DETAIL_BODY_VIEWS.FILES_LIST });
                      return;
                  }
                  if (navigatorFocus === 'FILES_LIST') {
                      set({ navigatorFocus: NAVIGATOR_SECTIONS.FILES, bodyView: DETAIL_BODY_VIEWS.NONE });
                      return;
                  }
                  if (expandedSection) {
                      set({ expandedSection: null, bodyView: DETAIL_BODY_VIEWS.NONE });
                  }
              },
              toggleRevertConfirm: () => set(state => ({
                  bodyView: state.bodyView === DETAIL_BODY_VIEWS.REVERT_CONFIRM
                      ? DETAIL_BODY_VIEWS.NONE
                      : DETAIL_BODY_VIEWS.REVERT_CONFIRM,
              })),
              confirmRevert: () => {
                  const { selectedTransactionId } = useViewStore.getState();
                  if (!selectedTransactionId) return;
                  TransactionService.revertTransaction(selectedTransactionId);
                  useTransactionStore.getState().actions.updateTransactionStatus(selectedTransactionId, 'REVERTED');
                  set({ bodyView: DETAIL_BODY_VIEWS.NONE });
              },
          },
      }));

      =======

      interface DetailState {
          focusedItemPath: string; // e.g., 'PROMPT', 'FILES', 'FILES/1-1'
          expandedItemPaths: Set<string>;
          bodyView: DetailBodyView;
          actions: {
              load: (transactionId: string) => void;
              navigateUp: () => void;
              navigateDown: () => void;
              expandOrDrillDown: () => void;
              collapseOrBubbleUp: () => void;
              toggleRevertConfirm: () => void;
              confirmRevert: () => void;
          };
      }


      const getVisibleItemPaths = (expandedItemPaths: Set<string>): string[] =>
      {
          const { selectedTransactionId } = useViewStore.getState();
          const transaction = useTransactionStore.getState().transactions.find(tx => tx.id === selectedTransactionId);
          if (!transaction) return [];

          const paths: string[] = [NAVIGATOR_SECTIONS.PROMPT, NAVIGATOR_SECTIONS.REASONING, NAVIGATOR_SECTIONS.FILES];
          if (expandedItemPaths.has(NAVIGATOR_SECTIONS.FILES) && transaction.files) {
              for (const file of transaction.files) {
                  paths.push(`${NAVIGATOR_SECTIONS.FILES}/${file.id}`);
              }
          }
          return paths;
      };


      export const useDetailStore = create<DetailState>((set, get) => ({
          focusedItemPath: NAVIGATOR_SECTIONS.PROMPT,
          expandedItemPaths: new Set(),
          bodyView: DETAIL_BODY_VIEWS.NONE,
          actions: {
              load: (transactionId) => {
                  useViewStore.getState().actions.setSelectedTransactionId(transactionId);
                  set({
                      focusedItemPath: NAVIGATOR_SECTIONS.PROMPT,
                      expandedItemPaths: new Set(),
                      bodyView: DETAIL_BODY_VIEWS.NONE,
                  });
              },
              navigateUp: () => {
                  const { expandedItemPaths, focusedItemPath } = get();
                  const visibleItems = getVisibleItemPaths(expandedItemPaths);
                  const currentIndex = visibleItems.indexOf(focusedItemPath);
                  if (currentIndex > 0) {
                      set({ focusedItemPath: visibleItems[currentIndex - 1]! });
                  }
              },
              navigateDown: () => {
                  const { expandedItemPaths, focusedItemPath } = get();
                  const visibleItems = getVisibleItemPaths(expandedItemPaths);
                  const currentIndex = visibleItems.indexOf(focusedItemPath);
                  if (currentIndex < visibleItems.length - 1) {
                      set({ focusedItemPath: visibleItems[currentIndex + 1]! });
                  }
              },
              expandOrDrillDown: () => set(state => {
                  const { focusedItemPath, expandedItemPaths } = state;
                  const newExpandedPaths = new Set(expandedItemPaths);
                  
                  if (focusedItemPath.includes('/')) { // Is a file
                      return { bodyView: DETAIL_BODY_VIEWS.DIFF_VIEW };
                  }

                  // Is a section header
                  if (newExpandedPaths.has(focusedItemPath)) {
                      // Already expanded, drill in if it's FILES
                      if (focusedItemPath === NAVIGATOR_SECTIONS.FILES) {
                          const visibleItems = getVisibleItemPaths(newExpandedPaths);
                          const firstFile = visibleItems.find(item => item.startsWith(`${NAVIGATOR_SECTIONS.FILES}/`));
                          if (firstFile) {
                              return { focusedItemPath: firstFile, bodyView: DETAIL_BODY_VIEWS.FILES_LIST };
                          }
                      }
                      return {}; // No-op for PROMPT/REASONING if already expanded
                  } else {
                      // Not expanded, so expand it
                      newExpandedPaths.add(focusedItemPath);
                      let newBodyView: DetailBodyView = DETAIL_BODY_VIEWS.NONE;
                      if (focusedItemPath === NAVIGATOR_SECTIONS.PROMPT) newBodyView = DETAIL_BODY_VIEWS.PROMPT;
                      if (focusedItemPath === NAVIGATOR_SECTIONS.REASONING) newBodyView = DETAIL_BODY_VIEWS.REASONING;
                      if (focusedItemPath === NAVIGATOR_SECTIONS.FILES) newBodyView = DETAIL_BODY_VIEWS.FILES_LIST;
                      return { expandedItemPaths: newExpandedPaths, bodyView: newBodyView };
                  }
              }),
              collapseOrBubbleUp: () => set(state => {
                  const { focusedItemPath, expandedItemPaths, bodyView } = state;
                  
                  if (bodyView === DETAIL_BODY_VIEWS.DIFF_VIEW) {
                      return { bodyView: DETAIL_BODY_VIEWS.FILES_LIST };
                  }

                  if (focusedItemPath.includes('/')) { // Is a file
                      return { focusedItemPath: NAVIGATOR_SECTIONS.FILES, bodyView: DETAIL_BODY_VIEWS.FILES_LIST };
                  }
                  
                  // Is a section header
                  if (expandedItemPaths.has(focusedItemPath)) {
                      const newExpandedPaths = new Set(expandedItemPaths);
                      newExpandedPaths.delete(focusedItemPath);
                      return { expandedItemPaths: newExpandedPaths, bodyView: DETAIL_BODY_VIEWS.NONE };
                  }
                  
                  return {}; // No-op if not expanded (global back will handle)
              }),
              toggleRevertConfirm: () => set(state => ({
                  bodyView: state.bodyView === DETAIL_BODY_VIEWS.REVERT_CONFIRM
                      ? DETAIL_BODY_VIEWS.NONE
                      : DETAIL_BODY_VIEWS.REVERT_CONFIRM,
              })),
              confirmRevert: () => {
                  const { selectedTransactionId } = useViewStore.getState();
                  if (!selectedTransactionId) return;
                  TransactionService.revertTransaction(selectedTransactionId);
                  useTransactionStore.getState().actions.updateTransactionStatus(selectedTransactionId, 'REVERTED');
                  set({ bodyView: DETAIL_BODY_VIEWS.NONE });
              },
          },
      }));

      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: src/hooks/useTransactionDetailScreen.tsx
    content: |
      <<<<<<< SEARCH
      export const useTransactionDetailScreen = () => {
          const { showDashboardScreen } = useAppStore(s => s.actions);
          const store = useDetailStore();
          const selectedTransactionId = useViewStore(s => s.selectedTransactionId);
          const {
              bodyView,
          } = store;

          const transaction = useTransactionStore(s => s.transactions.find(tx => tx.id === selectedTransactionId));
          const files = useMemo(() => transaction?.files || [], [transaction]);

          const {
              // Main nav
              navigateUp,
              navigateDown,
              handleEnterOrRight,
              handleEscapeOrLeft,
              toggleRevertConfirm,
              // Revert modal nav
              confirmRevert,
          } = store.actions;

          const openCopyMode = () => {
              if (!transaction) return;
              const { selectedFileIndex } = store;
              const selectedFile = files[selectedFileIndex];
              useCopyStore.getState().actions.openForDetail(transaction, selectedFile);
          };

          const handleRevertConfirmInput = (_input: string, key: Key): void => {
              if (key.escape) toggleRevertConfirm();
              if (key.return) confirmRevert();
          };

          const handleMainInput = (input: string, key: Key): void => {
              if (input.toLowerCase() === 'q') {
                  showDashboardScreen();
              }
              if (input.toLowerCase() === 'c') {
                  openCopyMode();
              }
              if (input.toLowerCase() === 'u') {
                  toggleRevertConfirm();
              }

              if (key.upArrow) navigateUp();
              if (key.downArrow) navigateDown();
              if (key.return || key.rightArrow) handleEnterOrRight();
              if (key.escape || key.leftArrow) handleEscapeOrLeft();
          };

          useInput((input: string, key: Key) => {
              if (bodyView === 'REVERT_CONFIRM') {
                  return handleRevertConfirmInput(input, key);
              }
              return handleMainInput(input, key);
          });

          return {
              transaction,
              files,
              navigatorFocus: store.navigatorFocus,
              expandedSection: store.expandedSection,
              selectedFileIndex: store.selectedFileIndex,
              bodyView: store.bodyView,
              actions: {
                  showDashboardScreen,
              },
          };
      };
      =======
      export const useTransactionDetailScreen = () => {
          const { showDashboardScreen } = useAppStore(s => s.actions);
          const store = useDetailStore();
          const selectedTransactionId = useViewStore(s => s.selectedTransactionId);
          const transaction = useTransactionStore(s => s.transactions.find(tx => tx.id === selectedTransactionId));
          const files = useMemo(() => transaction?.files || [], [transaction]);

          const {
              navigateUp,
              navigateDown,
              expandOrDrillDown,
              collapseOrBubbleUp,
              toggleRevertConfirm,
              confirmRevert,
          } = store.actions;

          const openCopyMode = () => {
              if (!transaction) return;
              const { focusedItemPath } = store;
              const fileId = focusedItemPath.split('/')[1];
              const selectedFile = fileId ? files.find(f => f.id === fileId) : undefined;
              useCopyStore.getState().actions.openForDetail(transaction, selectedFile);
          };

          useInput((input: string, key: Key) => {
              if (store.bodyView === 'REVERT_CONFIRM') {
                  if (key.escape) toggleRevertConfirm();
                  if (key.return) confirmRevert();
                  return;
              }

              // --- Main Input ---
              if (input.toLowerCase() === 'c') {
                  openCopyMode();
                  return;
              }
              if (input.toLowerCase() === 'u') {
                  toggleRevertConfirm();
                  return;
              }

              if (key.upArrow) navigateUp();
              if (key.downArrow) navigateDown();
              if (key.return || key.rightArrow) expandOrDrillDown();
              if (key.escape || key.leftArrow) collapseOrBubbleUp();
          }, { isActive: useViewStore.getState().activeOverlay === 'none' }); // Prevent input when copy overlay is open

          return {
              transaction,
              files,
              focusedItemPath: store.focusedItemPath,
              expandedItemPaths: store.expandedItemPaths,
              bodyView: store.bodyView,
              actions: {
                  showDashboardScreen,
              },
          };
      };
      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: src/components/TransactionDetailScreen.tsx
    content: |
      <<<<<<< SEARCH
      const TransactionDetailScreen = () => {
          const {
              transaction, files,
              navigatorFocus, expandedSection, selectedFileIndex, bodyView,
          } = useTransactionDetailScreen();

          if (!transaction) {
              return <Text>Loading transaction...</Text>;
          }

          const renderNavigator = () => {
              const isPromptFocused = navigatorFocus === 'PROMPT';
              const isReasoningFocused = navigatorFocus === 'REASONING';
              const isFilesFocused = navigatorFocus === 'FILES' || navigatorFocus === 'FILES_LIST';
              
              const isPromptExpanded = expandedSection === 'PROMPT';
              const isReasoningExpanded = expandedSection === 'REASONING';
              const isFilesExpanded = expandedSection === 'FILES';
              
              return (
                  <Box flexDirection="column">
                      <Text color={isPromptFocused && !isFilesFocused ? 'cyan' : undefined}>
                          {isPromptFocused && !isFilesFocused ? '> ' : '  '}
                          {isPromptExpanded ? '▾' : '▸'} (P)rompt
                      </Text>
                      <Text color={isReasoningFocused && !isFilesFocused ? 'cyan' : undefined}>
                          {isReasoningFocused && !isFilesFocused ? '> ' : '  '}
                          {isReasoningExpanded ? '▾' : '▸'} (R)easoning ({transaction.reasoning?.split('\n\n').length || 0} steps)
                      </Text>
                      <Text color={isFilesFocused ? 'cyan' : undefined}>
                          {isFilesFocused && navigatorFocus !== 'FILES_LIST' ? '> ' : '  '}
                          {isFilesExpanded ? '▾' : '▸'} (F)iles ({files.length})
                      </Text>
                      {isFilesExpanded && (
                          <Box flexDirection="column" paddingLeft={2}>
                              {files.map((file, index) => {
                                   const isFileSelected = navigatorFocus === 'FILES_LIST' && selectedFileIndex === index;
                                   const stats = file.type === 'DEL' ? '' : ` (+${file.linesAdded}/-${file.linesRemoved})`;
                                   return (
                                      <Text key={file.id} color={isFileSelected ? 'cyan' : undefined}>
                                          {isFileSelected ? '> ' : '  '}
                                          {`${getFileChangeTypeIcon(file.type)} ${file.path}${stats}`}
                                      </Text>
                                  );
                              })}
                          </Box>
                      )}
                  </Box>
              );
          };

          const renderBody = () => {
              if (bodyView === 'NONE') {
                  return <Text color="gray">(Press → to expand a section and view its contents)</Text>;
              }
              if (bodyView === 'PROMPT') {
                  return (
                      <Box flexDirection="column">
                          <Text>PROMPT</Text>
                          <Box marginTop={1}><Text>{transaction.prompt}</Text></Box>
                      </Box>
                  );
              }
              if (bodyView === 'REASONING') {
                  if (!transaction.reasoning) return <Text color="gray">No reasoning provided.</Text>;
                  return <ReasonScreen reasoning={transaction.reasoning} />;
              }
              if (bodyView === 'FILES_LIST') {
                   return <Text color="gray">(Select a file and press → to view the diff)</Text>;
              }
              if (bodyView === 'DIFF_VIEW') {
                  const file = files[selectedFileIndex];
                  if (!file) return null;
                  return <DiffScreen filePath={file.path} diffContent={file.diff} isExpanded={true} />;
              }
              return null;
          };

          const renderFooter = () => {
              if (bodyView === 'REVERT_CONFIRM') {
                  return <Text>(Enter) Confirm Revert      (Esc) Cancel</Text>;
              }
              
              if (navigatorFocus === 'FILES_LIST') {
                  if (bodyView === 'DIFF_VIEW') {
                      return <Text>(↑↓) Nav Files · (←) Back to Files · (C)opy Mode · (U)ndo · (Q)uit</Text>;
                  }
                  return <Text>(↑↓) Nav Files · (→) View Diff · (←) Back to Sections · (C)opy Mode · (Q)uit</Text>;
              }
              
              if (expandedSection) {
                  return <Text>(↑↓) Nav/Scroll · (←) Collapse · (C)opy Mode · (U)ndo · (Q)uit</Text>;
              }
              
              return <Text>(↑↓) Nav · (→) Expand · (C)opy Mode · (U)ndo · (Q)uit</Text>;
          };

          const { message, timestamp, status } = transaction;
      =======
      const TransactionDetailScreen = () => {
          const {
              transaction, files,
              focusedItemPath, expandedItemPaths, bodyView,
          } = useTransactionDetailScreen();

          if (!transaction) {
              return <Text>Loading transaction...</Text>;
          }

          const renderNavigator = () => {
              const isPromptFocused = focusedItemPath === 'PROMPT';
              const isReasoningFocused = focusedItemPath === 'REASONING';
              const isFilesFocused = focusedItemPath.startsWith('FILES');
              
              const isPromptExpanded = expandedItemPaths.has('PROMPT');
              const isReasoningExpanded = expandedItemPaths.has('REASONING');
              const isFilesExpanded = expandedItemPaths.has('FILES');
              
              return (
                  <Box flexDirection="column">
                      <Text color={isPromptFocused ? 'cyan' : undefined}>
                          {isPromptFocused ? '> ' : '  '}
                          {isPromptExpanded ? '▾' : '▸'} (P)rompt
                      </Text>
                      <Text color={isReasoningFocused ? 'cyan' : undefined}>
                          {isReasoningFocused ? '> ' : '  '}
                          {isReasoningExpanded ? '▾' : '▸'} (R)easoning ({transaction.reasoning?.split('\n\n').length || 0} steps)
                      </Text>
                      <Text color={isFilesFocused ? 'cyan' : undefined}>
                          {isFilesFocused && !focusedItemPath.includes('/') ? '> ' : '  '}
                          {isFilesExpanded ? '▾' : '▸'} (F)iles ({files.length})
                      </Text>
                      {isFilesExpanded && (
                          <Box flexDirection="column" paddingLeft={2}>
                              {files.map((file) => {
                                   const fileId = `FILES/${file.id}`;
                                   const isFileSelected = focusedItemPath === fileId;
                                   const stats = file.type === 'DEL' ? '' : ` (+${file.linesAdded}/-${file.linesRemoved})`;
                                   return (
                                      <Text key={file.id} color={isFileSelected ? 'cyan' : undefined}>
                                          {isFileSelected ? '> ' : '  '}
                                          {`${getFileChangeTypeIcon(file.type)} ${file.path}${stats}`}
                                      </Text>
                                  );
                              })}
                          </Box>
                      )}
                  </Box>
              );
          };

          const renderBody = () => {
              if (bodyView === 'NONE') {
                  return <Text color="gray">(Press → to expand a section and view its contents)</Text>;
              }
              if (bodyView === 'PROMPT') {
                  return (
                      <Box flexDirection="column">
                          <Text>PROMPT</Text>
                          <Box marginTop={1}><Text>{transaction.prompt}</Text></Box>
                      </Box>
                  );
              }
              if (bodyView === 'REASONING') {
                  if (!transaction.reasoning) return <Text color="gray">No reasoning provided.</Text>;
                  return <ReasonScreen reasoning={transaction.reasoning} />;
              }
              if (bodyView === 'FILES_LIST') {
                   return <Text color="gray">(Select a file and press → to view the diff)</Text>;
              }
              if (bodyView === 'DIFF_VIEW') {
                  const fileId = focusedItemPath.split('/')[1];
                  const file = files.find(f => f.id === fileId);
                  if (!file) return null;
                  return <DiffScreen filePath={file.path} diffContent={file.diff} isExpanded={true} />;
              }
              return null;
          };

          const renderFooter = () => {
              if (bodyView === 'REVERT_CONFIRM') {
                  return <Text>(Enter) Confirm Revert      (Esc) Cancel</Text>;
              }
              
              const baseActions = ['(↑↓) Nav', '(C)opy', '(U)ndo', '(Q)uit/Back'];

              if (focusedItemPath.includes('/')) { // Is a file
                  if (bodyView === 'DIFF_VIEW') {
                      return <Text>(↑↓) Nav Files · (←) Back to List · {baseActions.slice(1).join(' · ')}</Text>;
                  }
                  return <Text>(↑↓) Nav Files · (→) View Diff · (←) Back to Sections · {baseActions.slice(1).join(' · ')}</Text>;
              }
              
              if (expandedItemPaths.has(focusedItemPath)) {
                  return <Text>(↑↓) Nav/Scroll · (→) Drill In · (←) Collapse · {baseActions.slice(1).join(' · ')}</Text>;
              }
              
              return <Text>(↑↓) Nav · (→) Expand · {baseActions.slice(1).join(' · ')}</Text>;
          };

          const { message, timestamp, status } = transaction;
      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: src/components/GlobalHelpScreen.tsx
    content: >+
      --- src/components/GlobalHelpScreen.tsx

      +++ src/components/GlobalHelpScreen.tsx

      @@ -21,11 +21,12 @@
                           <Box flexDirection="column">
                               <Text bold color="cyan">GLOBAL</Text>
                               <Text>  <Text color="cyan" bold>?</Text>        Toggle this help screen</Text>
      -                        <Text>  <Text color="cyan" bold>Q</Text>       
      Quit to terminal (from main screens)</Text>

      +                        <Text>  <Text color="cyan" bold>Q</Text>       
      Quit to terminal (or go back)</Text>
                           </Box>
                           <Box flexDirection="column">
                               <Text bold color="cyan">DASHBOARD (watch)</Text>
                               <Text>  <Text color="cyan" bold>↑↓</Text>       Navigate event stream</Text>
      +                        <Text>  <Text color="cyan" bold>Enter</Text>   
      View details of selected transaction</Text>
                               <Text>  <Text color="cyan" bold>P</Text>        Pause / Resume clipboard watcher</Text>
                               <Text>  <Text color="cyan" bold>A</Text>        Approve all pending transactions</Text>
                               <Text>  <Text color="cyan" bold>C</Text>        Commit all applied transactions to git</Text>
      @@ -33,6 +34,7 @@
                           <Box flexDirection="column">
                               <Text bold color="cyan">REVIEW & DETAILS SCREENS</Text>
                               <Text>  <Text color="cyan" bold>D</Text>        Show / Collapse file diff</Text>
      +                        <Text>  <Text color="cyan" bold>←→</Text>      
      Collapse / Expand sections or files</Text>
                               <Text>  <Text color="cyan" bold>R</Text>        Show / Collapse reasoning steps</Text>
                               <Text>  <Text color="cyan" bold>C</Text>        Enter / Exit Copy Mode (Details Screen)</Text>
                               <Text>  <Text color="cyan" bold>U</Text>        Undo / Revert Transaction</Text>

    patchStrategy: standard-diff
snapshot:
  src/constants/app.constants.ts: |-
    /**
     * Application-level screens and navigation constants.
     */
    export const APP_SCREENS = {
        SPLASH: 'splash',
        INIT: 'init',
        DASHBOARD: 'dashboard',
        REVIEW: 'review',
        REVIEW_PROCESSING: 'review-processing',
        GIT_COMMIT: 'git-commit',
        TRANSACTION_DETAIL: 'transaction-detail',
        TRANSACTION_HISTORY: 'transaction-history',
    } as const;

    export const MAIN_SCREENS_FOR_QUIT = [
        APP_SCREENS.DASHBOARD,
        APP_SCREENS.INIT,
    ];
  src/hooks/useGlobalHotkeys.tsx: |-
    import { useApp, useInput } from 'ink';
    import { useAppStore } from '../stores/app.store';
    import { useViewStore } from '../stores/view.store';
    import { MAIN_SCREENS_FOR_QUIT } from '../constants/app.constants';

    export const useGlobalHotkeys = ({ isActive }: { isActive: boolean }) => {
        const { exit } = useApp();
        const { currentScreen } = useAppStore(s => ({
            currentScreen: s.currentScreen,
        }));
        const { activeOverlay, setActiveOverlay } = useViewStore(s => ({
            activeOverlay: s.activeOverlay,
            setActiveOverlay: s.actions.setActiveOverlay,
        }));

        useInput((input, key) => {
            // Debug Menu toggle is the highest priority global key
            if (key.ctrl && input === 'b') {
                setActiveOverlay(activeOverlay === 'debug' ? 'none' : 'debug');
                return;
            }

            // If debug menu is open, it has its own input handler, so we stop here.
            if (activeOverlay === 'debug') {
                return;
            }

            // Help screen takes precedence over other keys
            if (activeOverlay === 'help') {
                if (key.escape || input === '?') {
                    setActiveOverlay('none');
                }
                return;
            }

            // --- Global hotkeys when no modal/overlay is open ---
            
            // Open Help
            if (input === '?') {
                setActiveOverlay('help');
                return;
            }
            
            // Quit from main screens
            if (input.toLowerCase() === 'q' && (MAIN_SCREENS_FOR_QUIT as readonly string[]).includes(currentScreen)) {
                exit();
            }
        }, { isActive });
    };
  src/hooks/useGitCommitScreen.tsx: >-
    import { useInput } from 'ink';

    import { useCommitStore } from '../stores/commit.store';

    import { useAppStore } from '../stores/app.store';

    import { useTransactionStore, selectTransactionsByStatus } from
    '../stores/transaction.store';


    export const useGitCommitScreen = () => {
        const { finalCommitMessage, isCommitting } = useCommitStore();
        const transactionsToCommit = useTransactionStore(selectTransactionsByStatus('APPLIED'));
        const { commit } = useCommitStore(s => s.actions);
        const { showDashboardScreen } = useAppStore(s => s.actions);

        useInput((input, key) => {
            if (isCommitting) return;

            if (key.escape) {
                showDashboardScreen();
            }
            if (key.return) {
                commit().then(() => {
                    showDashboardScreen();
                });
            }
        });

        return { transactionsToCommit, finalCommitMessage, isCommitting };
    };
  src/hooks/useReviewScreen.tsx: |-
    import { useMemo } from 'react';
    import { useInput, useApp, type Key } from 'ink';
    import { useReviewStore } from '../stores/review.store';
    import { useViewStore } from '../stores/view.store';
    import { useAppStore } from '../stores/app.store';
    import { useCopyStore } from '../stores/copy.store';
    import { useTransactionStore } from '../stores/transaction.store';
    import type { FileItem } from '../types/domain.types';

    export const useReviewScreen = () => {
        const { exit } = useApp();
        const store = useReviewStore();
        const transactionId = useViewStore(s => s.selectedTransactionId);
        const {
            selectedItemIndex,
            bodyView,
            patchStatus,
        } = store;

        const transaction = useTransactionStore(state => state.transactions.find(t => t.id === transactionId));
        const { showDashboardScreen } = useAppStore(s => s.actions);

        // Memoize files to prevent re-renders, fixing the exhaustive-deps lint warning.
        const files: FileItem[] = useMemo(() => transaction?.files || [], [transaction]);
        const fileReviewStates = useReviewStore(s => s.fileReviewStates);

        const reviewStats = useMemo(() => {
            const approvedFiles = files.filter(f => fileReviewStates.get(f.id)?.status === 'APPROVED');
            return {
                numFiles: files.length,
                approvedFilesCount: approvedFiles.length,
                approvedLinesAdded: approvedFiles.reduce((sum, f) => sum + f.linesAdded, 0),
                approvedLinesRemoved: approvedFiles.reduce((sum, f) => sum + f.linesRemoved, 0),
            };
        }, [files, fileReviewStates]);

        const { numFiles, approvedFilesCount } = reviewStats;

        const scripts = transaction?.scripts || [];

        const {
            moveSelectionUp,
            moveSelectionDown,
            expandDiff,
            toggleBodyView,
            setBodyView,
            startApplySimulation,
            approve,
            tryRepairFile,
            showBulkRepair,
            executeBulkRepairOption,
            confirmHandoff,
            scrollReasoningUp,
            scrollReasoningDown,
            navigateScriptErrorUp,
            navigateScriptErrorDown,
            toggleFileApproval,
            rejectAllFiles,
        } = store.actions;

        const openCopyMode = () => {
            if (!transaction) return;
            const selectedFile = selectedItemIndex < files.length ? files[selectedItemIndex] : undefined;
            useCopyStore.getState().actions.openForReview(transaction, transaction.files || [], selectedFile);
        };

        // --- Input Handlers ---

        const handleGlobalInput = (input: string, key: Key): boolean => {
            if (input === '1') { // For demo purposes
                startApplySimulation('success');
                return true;
            }
            if (input === '2') { // For demo purposes
                startApplySimulation('failure');
                return true;
            }
            if (input.toLowerCase() === 'q') {
                exit();
                return true;
            }
            if (key.escape) {
                if (bodyView === 'bulk_repair' || bodyView === 'confirm_handoff') {
                    toggleBodyView(bodyView);
                } else if (bodyView !== 'none') {
                    setBodyView('none');
                } else {
                    showDashboardScreen();
                }
                return true;
            }
            return false;
        };

        const handleHandoffConfirmInput = (_input: string, key: Key): void => {
            if (key.return) confirmHandoff();
        };

        const handleBulkRepairInput = (input: string) => {
            if (input >= '1' && input <= '4') {
                executeBulkRepairOption(parseInt(input));
            }
        };

        const handleReasoningInput = (input: string, key: Key): void => {
            if (key.upArrow) scrollReasoningUp();
            if (key.downArrow) scrollReasoningDown();
            if (input.toLowerCase() === 'r') toggleBodyView('reasoning');
        };

        const handleScriptOutputInput = (input: string, key: Key): void => {
            if (input.toLowerCase() === 'j') navigateScriptErrorDown();
            if (input.toLowerCase() === 'k') navigateScriptErrorUp();
            if (key.return) toggleBodyView('script_output');
            if (input.toLowerCase() === 'c') {
                const scriptIndex = selectedItemIndex - numFiles;
                const selectedScript = scripts[scriptIndex];
                if (selectedScript) {
                    // eslint-disable-next-line no-console
                    console.log(`[CLIPBOARD] Copied script output: ${selectedScript.command}`);
                }
            }
        };

        const handleDiffInput = (input: string) => {
            if (input.toLowerCase() === 'x') expandDiff();
            if (input.toLowerCase() === 'd') toggleBodyView('diff');
        };

        const handleMainNavigationInput = (input: string, key: Key): void => {
            // Handle Shift+R for reject all
            if (key.shift && input.toLowerCase() === 'r') {
                if (approvedFilesCount > 0 && transactionId) {
                    rejectAllFiles();
                }
                return;
            }

            // Main View Navigation
            if (key.upArrow) moveSelectionUp();
            if (key.downArrow) moveSelectionDown();
            if (input.toLowerCase() === 'r') toggleBodyView('reasoning');

            if (input === ' ') {
                if (selectedItemIndex < numFiles) {
                    const file = files[selectedItemIndex];
                    const fileState = file ? fileReviewStates.get(file.id) : undefined;
                    if (file && fileState && fileState.status !== 'FAILED') {
                        toggleFileApproval(file.id);
                    }
                }
            }

            if (input.toLowerCase() === 'd') {
                if (selectedItemIndex < numFiles) {
                    toggleBodyView('diff');
                }
            }

            if (key.return) { // Enter key
                if (selectedItemIndex >= numFiles) { // It's a script
                    toggleBodyView('script_output');
                }
            }

            if (input.toLowerCase() === 'a') {
                if (approvedFilesCount > 0) {
                    approve();
                    showDashboardScreen();
                }
            }

            if (input.toLowerCase() === 'c') {
                openCopyMode();
            }

            if (input.toLowerCase() === 't') {
                if (key.shift) { // Bulk repair
                    const hasFailedFiles = Array.from(fileReviewStates.values()).some(s => s.status === 'FAILED');
                    if (hasFailedFiles) showBulkRepair();
                } else {
                    if (selectedItemIndex < numFiles) {
                        const file = files[selectedItemIndex];
                        const fileState = file ? fileReviewStates.get(file.id) : undefined;
                        if (file && fileState?.status === 'FAILED') tryRepairFile();
                    }
                }
            }
        };

        useInput((input: string, key: Key) => {
            if (handleGlobalInput(input, key)) {
                return;
            }

            switch (bodyView) {
                case 'confirm_handoff': return handleHandoffConfirmInput(input, key);
                case 'bulk_repair': return handleBulkRepairInput(input);
                case 'reasoning': return handleReasoningInput(input, key);
                case 'script_output': return handleScriptOutputInput(input, key);
                case 'diff': return handleDiffInput(input);
                default: return handleMainNavigationInput(input, key);
            }
        });

        return {
            ...store,
            fileReviewStates,
            selectedItemIndex,
            transaction,
            files,
            scripts,
            patchStatus,
            ...reviewStats,
        };
    };
  src/stores/detail.store.ts: >-
    import { create } from 'zustand';

    import { useTransactionStore } from './transaction.store';

    import { useViewStore } from './view.store';

    import { TransactionService } from '../services/transaction.service';

    import { NAVIGATOR_SECTIONS, DETAIL_BODY_VIEWS } from
    '../constants/detail.constants';


    type ObjectValues<T> = T[keyof T];


    export type NavigatorSection = ObjectValues<typeof NAVIGATOR_SECTIONS>;

    export type DetailBodyView = ObjectValues<typeof DETAIL_BODY_VIEWS>;
     
    interface DetailState {
        navigatorFocus: NavigatorSection | 'FILES_LIST';
        expandedSection: NavigatorSection | null;
        selectedFileIndex: number;
        bodyView: DetailBodyView;
        actions: {
            load: (transactionId: string) => void;
            navigateUp: () => void;
            navigateDown: () => void;
            handleEnterOrRight: () => void;
            handleEscapeOrLeft: () => void;
            toggleRevertConfirm: () => void;
            confirmRevert: () => void;
        };
    }


    export const useDetailStore = create<DetailState>((set, get) => ({
        navigatorFocus: NAVIGATOR_SECTIONS.PROMPT,
        expandedSection: null,
        selectedFileIndex: 0,
        bodyView: DETAIL_BODY_VIEWS.NONE,
        actions: {
            load: (transactionId) => {
                useViewStore.getState().actions.setSelectedTransactionId(transactionId);
                set({
                    navigatorFocus: NAVIGATOR_SECTIONS.PROMPT,
                    expandedSection: null,
                    selectedFileIndex: 0,
                    bodyView: DETAIL_BODY_VIEWS.NONE,
                });
            },
            navigateUp: () => {
                const navigatorOrder: NavigatorSection[] = [
                    NAVIGATOR_SECTIONS.PROMPT,
                    NAVIGATOR_SECTIONS.REASONING,
                    NAVIGATOR_SECTIONS.FILES,
                ];
                const { navigatorFocus, selectedFileIndex } = get();
                if (navigatorFocus === 'FILES_LIST') {
                    set({ selectedFileIndex: Math.max(0, selectedFileIndex - 1) });
                } else {
                    const currentIndex = navigatorOrder.indexOf(navigatorFocus as NavigatorSection);
                    if (currentIndex > 0) {
                        set({ navigatorFocus: navigatorOrder[currentIndex - 1]! });
                    }
                }
            },
            navigateDown: () => {
                const navigatorOrder: NavigatorSection[] = [
                    NAVIGATOR_SECTIONS.PROMPT,
                    NAVIGATOR_SECTIONS.REASONING,
                    NAVIGATOR_SECTIONS.FILES,
                ];
                const { navigatorFocus, selectedFileIndex } = get();
                const { selectedTransactionId } = useViewStore.getState();
                const transaction = useTransactionStore.getState().transactions.find(tx => tx.id === selectedTransactionId);
                const files = transaction?.files || [];
                if (navigatorFocus === 'FILES_LIST') {
                    set({ selectedFileIndex: Math.min(files.length - 1, selectedFileIndex + 1) });
                } else {
                    const currentIndex = navigatorOrder.indexOf(navigatorFocus as NavigatorSection);
                    if (currentIndex < navigatorOrder.length - 1) {
                        set({ navigatorFocus: navigatorOrder[currentIndex + 1]! });
                    }
                }
            },
            handleEnterOrRight: () => {
                const { navigatorFocus, expandedSection } = get();
                if (navigatorFocus === 'FILES_LIST') {
                    set({ bodyView: DETAIL_BODY_VIEWS.DIFF_VIEW });
                    return;
                }
                if (expandedSection === navigatorFocus) {
                    if (navigatorFocus === NAVIGATOR_SECTIONS.FILES) {
                        set({ navigatorFocus: 'FILES_LIST', bodyView: DETAIL_BODY_VIEWS.FILES_LIST });
                    }
                    return;
                }
                set({ expandedSection: navigatorFocus as NavigatorSection });
                if (navigatorFocus === NAVIGATOR_SECTIONS.PROMPT) set({ bodyView: DETAIL_BODY_VIEWS.PROMPT });
                if (navigatorFocus === NAVIGATOR_SECTIONS.REASONING) set({ bodyView: DETAIL_BODY_VIEWS.REASONING });
                if (navigatorFocus === NAVIGATOR_SECTIONS.FILES) set({ bodyView: DETAIL_BODY_VIEWS.FILES_LIST });
            },
            handleEscapeOrLeft: () => {
                const { navigatorFocus, expandedSection, bodyView } = get();
                if (bodyView === DETAIL_BODY_VIEWS.DIFF_VIEW) {
                    set({ bodyView: DETAIL_BODY_VIEWS.FILES_LIST });
                    return;
                }
                if (navigatorFocus === 'FILES_LIST') {
                    set({ navigatorFocus: NAVIGATOR_SECTIONS.FILES, bodyView: DETAIL_BODY_VIEWS.NONE });
                    return;
                }
                if (expandedSection) {
                    set({ expandedSection: null, bodyView: DETAIL_BODY_VIEWS.NONE });
                }
            },
            toggleRevertConfirm: () => set(state => ({
                bodyView: state.bodyView === DETAIL_BODY_VIEWS.REVERT_CONFIRM
                    ? DETAIL_BODY_VIEWS.NONE
                    : DETAIL_BODY_VIEWS.REVERT_CONFIRM,
            })),
            confirmRevert: () => {
                const { selectedTransactionId } = useViewStore.getState();
                if (!selectedTransactionId) return;
                TransactionService.revertTransaction(selectedTransactionId);
                useTransactionStore.getState().actions.updateTransactionStatus(selectedTransactionId, 'REVERTED');
                set({ bodyView: DETAIL_BODY_VIEWS.NONE });
            },
        },
    }));
  src/hooks/useTransactionDetailScreen.tsx: |-
    import { useInput, type Key } from 'ink';
    import { useDetailStore } from '../stores/detail.store';
    import { useViewStore } from '../stores/view.store';
    import { useAppStore } from '../stores/app.store';
    import { useTransactionStore } from '../stores/transaction.store';
    import { useMemo } from 'react';
    import { useCopyStore } from '../stores/copy.store';

    export const useTransactionDetailScreen = () => {
        const { showDashboardScreen } = useAppStore(s => s.actions);
        const store = useDetailStore();
        const selectedTransactionId = useViewStore(s => s.selectedTransactionId);
        const {
            bodyView,
        } = store;

        const transaction = useTransactionStore(s => s.transactions.find(tx => tx.id === selectedTransactionId));
        const files = useMemo(() => transaction?.files || [], [transaction]);

        const {
            // Main nav
            navigateUp,
            navigateDown,
            handleEnterOrRight,
            handleEscapeOrLeft,
            toggleRevertConfirm,
            // Revert modal nav
            confirmRevert,
        } = store.actions;

        const openCopyMode = () => {
            if (!transaction) return;
            const { selectedFileIndex } = store;
            const selectedFile = files[selectedFileIndex];
            useCopyStore.getState().actions.openForDetail(transaction, selectedFile);
        };

        const handleRevertConfirmInput = (_input: string, key: Key): void => {
            if (key.escape) toggleRevertConfirm();
            if (key.return) confirmRevert();
        };

        const handleMainInput = (input: string, key: Key): void => {
            if (input.toLowerCase() === 'q') {
                showDashboardScreen();
            }
            if (input.toLowerCase() === 'c') {
                openCopyMode();
            }
            if (input.toLowerCase() === 'u') {
                toggleRevertConfirm();
            }

            if (key.upArrow) navigateUp();
            if (key.downArrow) navigateDown();
            if (key.return || key.rightArrow) handleEnterOrRight();
            if (key.escape || key.leftArrow) handleEscapeOrLeft();
        };

        useInput((input: string, key: Key) => {
            if (bodyView === 'REVERT_CONFIRM') {
                return handleRevertConfirmInput(input, key);
            }
            return handleMainInput(input, key);
        });

        return {
            transaction,
            files,
            navigatorFocus: store.navigatorFocus,
            expandedSection: store.expandedSection,
            selectedFileIndex: store.selectedFileIndex,
            bodyView: store.bodyView,
            actions: {
                showDashboardScreen,
            },
        };
    };
  src/components/TransactionDetailScreen.tsx: >-
    import React from 'react';

    import { Box, Text } from 'ink';

    import Separator from './Separator';

    import DiffScreen from './DiffScreen';

    import ReasonScreen from './ReasonScreen';

    import { useTransactionDetailScreen } from
    '../hooks/useTransactionDetailScreen';

    import type { FileChangeType } from '../types/domain.types';


    const getFileChangeTypeIcon = (type: FileChangeType) => {
        switch (type) {
            case 'MOD': return '[MOD]';
            case 'ADD': return '[ADD]';
            case 'DEL': return '[DEL]';
            case 'REN': return '[REN]';
        }
    };


    const RevertModal = ({ transactionHash }: { transactionHash: string }) => {
        return (
            <Box 
                borderStyle="round"
                borderColor="yellow"
                flexDirection="column"
                paddingX={2}
                width="80%"
                alignSelf='center'
            >
                <Text bold color="yellow" wrap="wrap" >REVERT THIS TRANSACTION?</Text>
                <Box height={1} />
                <Text wrap="wrap">This will create a NEW transaction that reverses all changes made by {transactionHash}. The original transaction record will be preserved.</Text>
                <Box height={1} />
                <Text wrap="wrap">Are you sure?</Text>
            </Box>
        );
    };


    const TransactionDetailScreen = () => {
        const {
            transaction, files,
            navigatorFocus, expandedSection, selectedFileIndex, bodyView,
        } = useTransactionDetailScreen();

        if (!transaction) {
            return <Text>Loading transaction...</Text>;
        }

        const renderNavigator = () => {
            const isPromptFocused = navigatorFocus === 'PROMPT';
            const isReasoningFocused = navigatorFocus === 'REASONING';
            const isFilesFocused = navigatorFocus === 'FILES' || navigatorFocus === 'FILES_LIST';
            
            const isPromptExpanded = expandedSection === 'PROMPT';
            const isReasoningExpanded = expandedSection === 'REASONING';
            const isFilesExpanded = expandedSection === 'FILES';
            
            return (
                <Box flexDirection="column">
                    <Text color={isPromptFocused && !isFilesFocused ? 'cyan' : undefined}>
                        {isPromptFocused && !isFilesFocused ? '> ' : '  '}
                        {isPromptExpanded ? '▾' : '▸'} (P)rompt
                    </Text>
                    <Text color={isReasoningFocused && !isFilesFocused ? 'cyan' : undefined}>
                        {isReasoningFocused && !isFilesFocused ? '> ' : '  '}
                        {isReasoningExpanded ? '▾' : '▸'} (R)easoning ({transaction.reasoning?.split('\n\n').length || 0} steps)
                    </Text>
                    <Text color={isFilesFocused ? 'cyan' : undefined}>
                        {isFilesFocused && navigatorFocus !== 'FILES_LIST' ? '> ' : '  '}
                        {isFilesExpanded ? '▾' : '▸'} (F)iles ({files.length})
                    </Text>
                    {isFilesExpanded && (
                        <Box flexDirection="column" paddingLeft={2}>
                            {files.map((file, index) => {
                                 const isFileSelected = navigatorFocus === 'FILES_LIST' && selectedFileIndex === index;
                                 const stats = file.type === 'DEL' ? '' : ` (+${file.linesAdded}/-${file.linesRemoved})`;
                                 return (
                                    <Text key={file.id} color={isFileSelected ? 'cyan' : undefined}>
                                        {isFileSelected ? '> ' : '  '}
                                        {`${getFileChangeTypeIcon(file.type)} ${file.path}${stats}`}
                                    </Text>
                                );
                            })}
                        </Box>
                    )}
                </Box>
            );
        };

        const renderBody = () => {
            if (bodyView === 'NONE') {
                return <Text color="gray">(Press → to expand a section and view its contents)</Text>;
            }
            if (bodyView === 'PROMPT') {
                return (
                    <Box flexDirection="column">
                        <Text>PROMPT</Text>
                        <Box marginTop={1}><Text>{transaction.prompt}</Text></Box>
                    </Box>
                );
            }
            if (bodyView === 'REASONING') {
                if (!transaction.reasoning) return <Text color="gray">No reasoning provided.</Text>;
                return <ReasonScreen reasoning={transaction.reasoning} />;
            }
            if (bodyView === 'FILES_LIST') {
                 return <Text color="gray">(Select a file and press → to view the diff)</Text>;
            }
            if (bodyView === 'DIFF_VIEW') {
                const file = files[selectedFileIndex];
                if (!file) return null;
                return <DiffScreen filePath={file.path} diffContent={file.diff} isExpanded={true} />;
            }
            return null;
        };

        const renderFooter = () => {
            if (bodyView === 'REVERT_CONFIRM') {
                return <Text>(Enter) Confirm Revert      (Esc) Cancel</Text>;
            }
            
            if (navigatorFocus === 'FILES_LIST') {
                if (bodyView === 'DIFF_VIEW') {
                    return <Text>(↑↓) Nav Files · (←) Back to Files · (C)opy Mode · (U)ndo · (Q)uit</Text>;
                }
                return <Text>(↑↓) Nav Files · (→) View Diff · (←) Back to Sections · (C)opy Mode · (Q)uit</Text>;
            }
            
            if (expandedSection) {
                return <Text>(↑↓) Nav/Scroll · (←) Collapse · (C)opy Mode · (U)ndo · (Q)uit</Text>;
            }
            
            return <Text>(↑↓) Nav · (→) Expand · (C)opy Mode · (U)ndo · (Q)uit</Text>;
        };

        const { message, timestamp, status } = transaction;
        const date = new Date(timestamp).toISOString().replace('T', ' ').substring(0, 19);
        const fileStats = `${files.length} Files · +${files.reduce((a, f) => a + f.linesAdded, 0)} lines, -${files.reduce((a, f) => a + f.linesRemoved, 0)} lines`;

        return (
            <Box flexDirection="column">
                {/* Header */}
                <Text>▲ relaycode transaction details</Text>
                <Separator />
                
                {/* Modal takeover for Revert */}
                {bodyView === 'REVERT_CONFIRM' && <RevertModal transactionHash={transaction.hash} />}
                
                {/* Main view */}
                <Box flexDirection="column" display={bodyView === 'REVERT_CONFIRM' ? 'none' : 'flex'}>
                    {/* Navigator Part A */}
                    <Box flexDirection="column" marginY={1}>
                        <Text>UUID: {transaction.id}</Text>
                        <Text>Git: {message}</Text>
                        <Text>Date: {date} · Status: {status}</Text>
                        <Text>Stats: {fileStats}</Text>
                    </Box>
                    
                    {/* Navigator Part B */}
                    {renderNavigator()}
                    
                    <Separator />
                    
                    {/* Body */}
                    <Box marginY={1}>
                        {renderBody()}
                    </Box>
                    
                    <Separator />
                </Box>
                
                {/* Footer */}
                <Box>
                    {renderFooter()}
                </Box>
            </Box>
        );
    };


    export default TransactionDetailScreen;
  src/components/GlobalHelpScreen.tsx: |-
    import React from 'react';
    import { Box, Text } from 'ink';

    const GlobalHelpScreen = () => {
        return (
            <Box
                flexDirection="column"
                justifyContent="center"
                alignItems="center"
                width="100%"
                height="100%"
            >
                <Box
                    flexDirection="column"
                    borderStyle="round"
                    paddingX={2}
                    paddingY={1}
                    width="80%"
                >
                    <Box justifyContent="center" marginBottom={1}>
                        <Text bold color="cyan">▲ relaycode · keyboard shortcuts</Text>
                    </Box>
                    <Box flexDirection="column" gap={1}>
                        <Box flexDirection="column">
                            <Text bold color="cyan">GLOBAL</Text>
                            <Text>  <Text color="cyan" bold>?</Text>        Toggle this help screen</Text>
                            <Text>  <Text color="cyan" bold>Q</Text>        Quit to terminal (from main screens)</Text>
                        </Box>
                        <Box flexDirection="column">
                            <Text bold color="cyan">DASHBOARD (watch)</Text>
                            <Text>  <Text color="cyan" bold>↑↓</Text>       Navigate event stream</Text>
                            <Text>  <Text color="cyan" bold>P</Text>        Pause / Resume clipboard watcher</Text>
                            <Text>  <Text color="cyan" bold>A</Text>        Approve all pending transactions</Text>
                            <Text>  <Text color="cyan" bold>C</Text>        Commit all applied transactions to git</Text>
                        </Box>
                        <Box flexDirection="column">
                            <Text bold color="cyan">REVIEW & DETAILS SCREENS</Text>
                            <Text>  <Text color="cyan" bold>D</Text>        Show / Collapse file diff</Text>
                            <Text>  <Text color="cyan" bold>R</Text>        Show / Collapse reasoning steps</Text>
                            <Text>  <Text color="cyan" bold>C</Text>        Enter / Exit Copy Mode (Details Screen)</Text>
                            <Text>  <Text color="cyan" bold>U</Text>        Undo / Revert Transaction</Text>
                            <Text>  <Text color="cyan" bold>Space</Text>    Toggle approval state of a file (Review Screen)</Text>
                        </Box>
                    </Box>
                </Box>
                <Box marginTop={1}>
                    <Text bold>(Press <Text color="cyan" bold>?</Text> or <Text color="cyan" bold>Esc</Text> to close)</Text>
                </Box>
            </Box>
        );
    };

    export default GlobalHelpScreen;
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 109
