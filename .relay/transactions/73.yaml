uuid: c25708a5-d36c-4861-a072-4b360f1b2075
projectId: relaycode-tui
createdAt: '2025-09-23T13:43:12.285Z'
gitCommitMsg: >-
  refactor(copy): centralize copy item generation in CopyService

  Introduces a new `CopyService` to act as a single source of truth for
  generating `CopyItem` arrays for different application contexts (review,
  detail, history). This eliminates significant code duplication across multiple
  UI hooks and the debug menu.

  - Created `src/services/copy.service.ts` with methods to generate copy items.
  - Refactored `useReviewScreen`, `useTransactionDetailScreen`, and
  `useTransactionHistoryScreen` to use `CopyService`. - Updated `useDebugMenu`
  to call `CopyService`, ensuring debug functionality stays in sync with the
  main application logic.

  This change improves maintainability and ensures a consistent data structure
  for the copy feature throughout the application.
promptSummary: >-
  The user requested a refactor to centralize the logic for creating
  copy-and-paste items to improve code dryness.
reasoning:
  - >-
    Excellent. I have executed the first part of the refactoring plan, focusing
    on centralizing the data transformation logic for the copy-and-paste
    functionality.
  - '### **Reasoning for Changes**'
  - 1.  **Created `src/services/copy.service.ts`:**
  - >-
    I've introduced a new `CopyService` to act as the single source of truth for
    generating the complex `CopyItem` arrays used by the `CopyScreen`. This
    service now contains all the business logic for creating labels, keys, and
    `getData` functions for various contexts (review, detail, history). This
    immediately eliminates the widespread code duplication that was present in
    multiple UI hooks and the debug menu.
  - 2.  **Refactored UI Hooks:**
  - >-
    The `openCopyMode` functions within `useReviewScreen.tsx`,
    `useTransactionDetailScreen.tsx`, and `useTransactionHistoryScreen.tsx` have
    been refactored. They no longer contain the verbose logic for building
    `CopyItem` arrays. Instead, they now make a single, clean call to the new
    `CopyService`, passing in the relevant data. This makes the hooks leaner,
    easier to read, and ensures that they will all behave consistently.
  - 3.  **Refactored `useDebugMenu.tsx`:**
  - >-
    Finally, I updated the debug menu hook to use the new `CopyService`. This is
    a critical step to prevent divergence between the main application logic and
    the debugging tools. The debug actions for triggering "Copy Mode" now
    leverage the exact same logic as the user-facing features, guaranteeing data
    integrity and simplifying future maintenance.
  - >-
    By consolidating this logic, we have significantly improved the codebase's
    adherence to the DRY (Don't Repeat Yourself) principle, making it more
    robust and easier to maintain.
  - '### **Code Implementation**'
  - 'Here is the new service file that centralizes the logic:'
  - 'Here are the refactored hooks that now use the service:'
operations:
  - type: write
    path: src/services/copy.service.ts
    content: |-
      import type { Transaction } from '../types/transaction.types';
      import type { ReviewFileItem } from '../stores/review.store';
      import type { FileChange } from '../types/file.types';
      import type { CopyItem } from '../types/copy.types';
      import { COPYABLE_ITEMS } from '../types/copy.types';

      const getCopyItemsForReview = (
          transaction: Transaction,
          files: ReviewFileItem[],
          selectedFile?: ReviewFileItem,
      ): CopyItem[] => {
          return [
              { id: 'uuid', key: 'U', label: COPYABLE_ITEMS.UUID, getData: () => transaction.id },
              { id: 'message', key: 'M', label: COPYABLE_ITEMS.MESSAGE, getData: () => transaction.message },
              { id: 'prompt', key: 'P', label: COPYABLE_ITEMS.PROMPT, getData: () => transaction.prompt || '' },
              { id: 'reasoning', key: 'R', label: COPYABLE_ITEMS.REASONING, getData: () => transaction.reasoning || '' },
              { id: 'file_diff', key: 'F', label: `${COPYABLE_ITEMS.FILE_DIFF}${selectedFile ? `: ${selectedFile.path}` : ''}`, getData: () => selectedFile?.diff || 'No file selected' },
              { id: 'all_diffs', key: 'A', label: COPYABLE_ITEMS.ALL_DIFFS, getData: () => files.map(f => `--- FILE: ${f.path} ---\n${f.diff}`).join('\n\n') },
          ];
      };

      const getCopyItemsForDetail = (
          transaction: Transaction,
          selectedFile?: FileChange,
      ): CopyItem[] => {
          return [
              { id: 'message', key: 'M', label: COPYABLE_ITEMS.MESSAGE, getData: () => transaction.message, isDefaultSelected: true },
              { id: 'prompt', key: 'P', label: COPYABLE_ITEMS.PROMPT, getData: () => transaction.prompt || '' },
              { id: 'reasoning', key: 'R', label: COPYABLE_ITEMS.REASONING, getData: () => transaction.reasoning || '', isDefaultSelected: true },
              { id: 'all_diffs', key: 'A', label: `${COPYABLE_ITEMS.ALL_DIFFS} (${transaction.files?.length || 0} files)`, getData: () => transaction.files?.map(f => `--- FILE: ${f.path} ---\n${f.diff}`).join('\n\n') || '' },
              { id: 'file_diff', key: 'F', label: `${COPYABLE_ITEMS.FILE_DIFF}: ${selectedFile?.path || 'No file selected'}`, getData: () => selectedFile?.diff || 'No file selected' },
              { id: 'uuid', key: 'U', label: COPYABLE_ITEMS.UUID, getData: () => transaction.id },
              { id: 'yaml', key: 'Y', label: COPYABLE_ITEMS.FULL_YAML, getData: () => '... YAML representation ...' }, // Mocking this
          ];
      };

      const getCopyItemsForHistory = (
          transactions: Transaction[],
      ): CopyItem[] => {
          if (transactions.length === 0) return [];
          
          return [
              { id: 'messages', key: 'M', label: COPYABLE_ITEMS.MESSAGES, getData: () => transactions.map(tx => tx.message).join('\n'), isDefaultSelected: true },
              { id: 'prompts', key: 'P', label: COPYABLE_ITEMS.PROMPTS, getData: () => transactions.map(tx => tx.prompt || '').join('\n\n---\n\n'), isDefaultSelected: false },
              { id: 'reasonings', key: 'R', label: COPYABLE_ITEMS.REASONINGS, getData: () => transactions.map(tx => tx.reasoning || '').join('\n\n---\n\n'), isDefaultSelected: true },
              { id: 'diffs', key: 'D', label: COPYABLE_ITEMS.DIFFS, getData: () => transactions.flatMap(tx => tx.files?.map(f => `--- TX: ${tx.hash}, FILE: ${f.path} ---\n${f.diff}`)).join('\n\n') },
              { id: 'uuids', key: 'U', label: COPYABLE_ITEMS.UUIDS, getData: () => transactions.map(tx => tx.id).join('\n') },
              { id: 'yaml', key: 'Y', label: COPYABLE_ITEMS.FULL_YAML, getData: () => '... YAML representation ...' },
          ];
      };


      export const CopyService = {
          getCopyItemsForReview,
          getCopyItemsForDetail,
          getCopyItemsForHistory,
      };
    patchStrategy: replace
  - type: write
    path: src/hooks/useReviewScreen.tsx
    content: >+
      --- src/hooks/useReviewScreen.tsx

      +++ src/hooks/useReviewScreen.tsx

      @@ -4,7 +4,7 @@
       import { useAppStore } from '../stores/app.store';
       import { useTransactionStore } from '../stores/transaction.store';
       import { useCopyStore, type CopyItem } from '../stores/copy.store';
      -import { COPYABLE_ITEMS } from '../types/copy.types';

      +import { CopyService } from '../services/copy.service';
       
       export const useReviewScreen = () => {
           const { exit } = useApp();
      @@ -37,18 +37,9 @@
       
           const openCopyMode = () => {
               if (!transaction) return;
      -        const { files: reviewFiles, selectedItemIndex } = store;

      -        const selectedFile = selectedItemIndex < reviewFiles.length ?
      reviewFiles[selectedItemIndex] : undefined;

      -
               const title = 'Select data to copy from review:';
      -        const items: CopyItem[] = [

      -            { id: 'uuid', key: 'U', label: COPYABLE_ITEMS.UUID, getData:
      () => transaction.id },

      -            { id: 'message', key: 'M', label: COPYABLE_ITEMS.MESSAGE,
      getData: () => transaction.message },

      -            { id: 'prompt', key: 'P', label: COPYABLE_ITEMS.PROMPT,
      getData: () => transaction.prompt || '' },

      -            { id: 'reasoning', key: 'R', label: COPYABLE_ITEMS.REASONING,
      getData: () => transaction.reasoning || '' },

      -            { id: 'file_diff', key: 'F', label:
      `${COPYABLE_ITEMS.FILE_DIFF}${selectedFile ? `: ${selectedFile.path}` :
      ''}`, getData: () => selectedFile?.diff || 'No file selected' },

      -            { id: 'all_diffs', key: 'A', label: COPYABLE_ITEMS.ALL_DIFFS,
      getData: () => reviewFiles.map(f => `--- FILE: ${f.path}
      ---\n${f.diff}`).join('\n\n') },

      -        ];

      -

      +        const selectedFile = selectedItemIndex < files.length ?
      files[selectedItemIndex] : undefined;

      +        const items = CopyService.getCopyItemsForReview(transaction,
      files, selectedFile);
               useCopyStore.getState().actions.open(title, items);
           };
       

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useTransactionDetailScreen.tsx
    content: >+
      --- src/hooks/useTransactionDetailScreen.tsx

      +++ src/hooks/useTransactionDetailScreen.tsx

      @@ -4,7 +4,7 @@
       import { useTransactionStore } from '../stores/transaction.store';
       import { useMemo } from 'react';
       import { useCopyStore, type CopyItem } from '../stores/copy.store';
      -import { COPYABLE_ITEMS } from '../types/copy.types';

      +import { CopyService } from '../services/copy.service';
       
       export const useTransactionDetailScreen = () => {
           const { showDashboardScreen } = useAppStore(s => s.actions);
      @@ -23,19 +23,9 @@
               if (!transaction) return;
               const { selectedFileIndex } = store;
               const selectedFile = files[selectedFileIndex];
      -
               const title = `Select data to copy from transaction ${transaction.hash}:`;
      -        const items: CopyItem[] = [

      -            { id: 'message', key: 'M', label: COPYABLE_ITEMS.MESSAGE,
      getData: () => transaction.message, isDefaultSelected: true },

      -            { id: 'prompt', key: 'P', label: COPYABLE_ITEMS.PROMPT,
      getData: () => transaction.prompt || '' },

      -            { id: 'reasoning', key: 'R', label: COPYABLE_ITEMS.REASONING,
      getData: () => transaction.reasoning || '', isDefaultSelected: true },

      -            { id: 'all_diffs', key: 'A', label:
      `${COPYABLE_ITEMS.ALL_DIFFS} (${transaction.files?.length || 0} files)`,
      getData: () => transaction.files?.map(f => `--- FILE: ${f.path}
      ---\n${f.diff}`).join('\n\n') || '' },

      -            { id: 'file_diff', key: 'F', label:
      `${COPYABLE_ITEMS.FILE_DIFF}: ${selectedFile?.path || 'No file
      selected'}`, getData: () => selectedFile?.diff || 'No file selected' },

      -            { id: 'uuid', key: 'U', label: COPYABLE_ITEMS.UUID, getData:
      () => transaction.id },

      -            { id: 'yaml', key: 'Y', label: COPYABLE_ITEMS.FULL_YAML,
      getData: () => '... YAML representation ...' }, // Mocking this

      -        ];

      -

      +        const items = CopyService.getCopyItemsForDetail(transaction,
      selectedFile);
               useCopyStore.getState().actions.open(title, items);
           };
       

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useTransactionHistoryScreen.tsx
    content: >+
      --- src/hooks/useTransactionHistoryScreen.tsx

      +++ src/hooks/useTransactionHistoryScreen.tsx

      @@ -5,7 +5,7 @@
       import { useStdoutDimensions } from '../utils';
       import { useTransactionStore } from '../stores/transaction.store';
       import { useCopyStore, type CopyItem } from '../stores/copy.store';
      -import { COPYABLE_ITEMS } from '../types/copy.types';

      +import { CopyService } from '../services/copy.service';
       
       export const useTransactionHistoryScreen = () => {
           const [, rows] = useStdoutDimensions();
      @@ -33,18 +33,8 @@
               const transactionsToCopy = store.transactions.filter(tx => selectedForAction.has(tx.id));
       
               if (transactionsToCopy.length === 0) return;
      -        
               const title = `Select data to copy from ${transactionsToCopy.length} transactions:`;
      -        const items: CopyItem[] = [

      -            { id: 'messages', key: 'M', label: COPYABLE_ITEMS.MESSAGES,
      getData: () => transactionsToCopy.map(tx => tx.message).join('\n'),
      isDefaultSelected: true },

      -            { id: 'prompts', key: 'P', label: COPYABLE_ITEMS.PROMPTS,
      getData: () => transactionsToCopy.map(tx => tx.prompt ||
      '').join('\n\n---\n\n'), isDefaultSelected: false },

      -            { id: 'reasonings', key: 'R', label:
      COPYABLE_ITEMS.REASONINGS, getData: () => transactionsToCopy.map(tx =>
      tx.reasoning || '').join('\n\n---\n\n'), isDefaultSelected: true },

      -            { id: 'diffs', key: 'D', label: COPYABLE_ITEMS.DIFFS,
      getData: () => transactionsToCopy.flatMap(tx => tx.files?.map(f => `---
      TX: ${tx.hash}, FILE: ${f.path} ---\n${f.diff}`)).join('\n\n') },

      -            { id: 'uuids', key: 'U', label: COPYABLE_ITEMS.UUIDS,
      getData: () => transactionsToCopy.map(tx => tx.id).join('\n') },

      -            { id: 'yaml', key: 'Y', label: COPYABLE_ITEMS.FULL_YAML,
      getData: () => '... YAML representation ...' },

      -        ];

      -

      +        const items =
      CopyService.getCopyItemsForHistory(transactionsToCopy);
               useCopyStore.getState().actions.open(title, items);
           };
       

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useDebugMenu.tsx
    content: >+
      --- src/hooks/useDebugMenu.tsx

      +++ src/hooks/useDebugMenu.tsx

      @@ -7,10 +7,10 @@
       import { useTransactionDetailStore } from '../stores/transaction-detail.store';
       import { useCopyStore } from '../stores/copy.store';
       import { COPYABLE_ITEMS } from '../types/copy.types';
      +import { CopyService } from '../services/copy.service';
       import { useTransactionHistoryStore } from '../stores/transaction-history.store';
       import { ReviewService } from '../services/review.service';
       import { useReviewStore } from '../stores/review.store';
      -import type { MenuItem } from '../types/debug.types';
       import { moveIndex } from '../stores/navigation.utils';
       import { useTransactionStore } from '../stores/transaction.store';
       export type { MenuItem } from '../types/debug.types';
      @@ -24,6 +24,7 @@
           const detailActions = useTransactionDetailStore(s => s.actions);
           const historyActions = useTransactionHistoryStore(s => s.actions);
       
      +    // Note: The menuItems are defined with a type annotation, but TS
      infers it.
           const menuItems: MenuItem[] = [
               {
                   title: 'Splash Screen',
      @@ -103,23 +104,9 @@
                       appActions.showReviewScreen();
                       setTimeout(() => {
                           const { transactionId, files, selectedItemIndex } = useReviewStore.getState();
      -                    const transaction =
      useTransactionStore.getState().transactions.find(t => t.id ===
      transactionId);

      -                    if (!transaction) return;

      -

      +                    const tx =
      useTransactionStore.getState().transactions.find(t => t.id ===
      transactionId);

      +                    if (!tx) return;
                           const selectedFile = selectedItemIndex < files.length ? files[selectedItemIndex] : undefined;
      -

      -                    const title = 'Select data to copy from review:';

      -                    const items = [

      -                        { id: 'uuid', key: 'U', label:
      COPYABLE_ITEMS.UUID, getData: () => transaction.id },

      -                        { id: 'message', key: 'M', label:
      COPYABLE_ITEMS.MESSAGE, getData: () => transaction.message },

      -                        { id: 'prompt', key: 'P', label:
      COPYABLE_ITEMS.PROMPT, getData: () => transaction.prompt || '' },

      -                        { id: 'reasoning', key: 'R', label:
      COPYABLE_ITEMS.REASONING, getData: () => transaction.reasoning || '' },

      -                        { id: 'file_diff', key: 'F', label:
      `${COPYABLE_ITEMS.FILE_DIFF}${selectedFile ? `: ${selectedFile.path}` :
      ''}`, getData: () => selectedFile?.diff || 'No file selected' },

      -                        { id: 'all_diffs', key: 'A', label:
      COPYABLE_ITEMS.ALL_DIFFS, getData: () => files.map(f => `--- FILE:
      ${f.path} ---\n${f.diff}`).join('\n\n') },

      -                    ];

      -                    useCopyStore.getState().actions.open(title, items);

      +                    const items = CopyService.getCopyItemsForReview(tx,
      files, selectedFile);

      +                    useCopyStore.getState().actions.open('Select data to
      copy from review:', items);
                       }, 100);
                   },
               },
      @@ -195,18 +182,8 @@
                       appActions.showTransactionHistoryScreen();
                       setTimeout(() => {
                           const { transactions: allTxs, selectedForAction } = useTransactionHistoryStore.getState();
      -                    const transactions = allTxs.filter(tx =>
      selectedForAction.has(tx.id));

      -                    const title = `Select data to copy from
      ${transactions.length} transactions:`;

      -                    const items = [

      -                        { id: 'messages', key: 'M', label:
      COPYABLE_ITEMS.MESSAGES, getData: () => transactions.map(tx =>
      tx.message).join('\n'), isDefaultSelected: true },

      -                        { id: 'prompts', key: 'P', label:
      COPYABLE_ITEMS.PROMPTS, getData: () => transactions.map(tx => tx.prompt ||
      '').join('\n\n---\n\n'), isDefaultSelected: false },

      -                        { id: 'reasonings', key: 'R', label:
      COPYABLE_ITEMS.REASONINGS, getData: () => transactions.map(tx =>
      tx.reasoning || '').join('\n\n---\n\n'), isDefaultSelected: true },

      -                        { id: 'diffs', key: 'D', label:
      COPYABLE_ITEMS.DIFFS, getData: () => transactions.flatMap(tx =>
      tx.files?.map(f => `--- TX: ${tx.hash}, FILE: ${f.path}
      ---\n${f.diff}`)).join('\n\n') },

      -                        { id: 'uuids', key: 'U', label:
      COPYABLE_ITEMS.UUIDS, getData: () => transactions.map(tx =>
      tx.id).join('\n') },

      -                        { id: 'yaml', key: 'Y', label:
      COPYABLE_ITEMS.FULL_YAML, getData: () => '... YAML representation ...' },

      -                    ];

      -                    useCopyStore.getState().actions.open(title, items);

      +                    const txsToCopy = allTxs.filter(tx =>
      selectedForAction.has(tx.id));

      +                    const items =
      CopyService.getCopyItemsForHistory(txsToCopy);

      +                    useCopyStore.getState().actions.open(`Select data to
      copy from ${txsToCopy.length} transactions:`, items);
                       }, 100);
                   },
               },

    patchStrategy: standard-diff
snapshot:
  src/services/copy.service.ts: null
  src/hooks/useReviewScreen.tsx: |-
    import { useMemo } from 'react';
    import { useInput, useApp } from 'ink';
    import { useReviewStore } from '../stores/review.store';
    import { useAppStore } from '../stores/app.store';
    import { useTransactionStore } from '../stores/transaction.store';
    import { useCopyStore, type CopyItem } from '../stores/copy.store';
    import { COPYABLE_ITEMS } from '../types/copy.types';

    export const useReviewScreen = () => {
        const { exit } = useApp();
        const store = useReviewStore();
        const { transactionId } = store;
        const transaction = useTransactionStore(s => s.transactions.find(t => t.id === transactionId));
        const { showDashboardScreen } = useAppStore(s => s.actions);
        const {
            files, scripts, patchStatus,
            selectedItemIndex, bodyView,
        } = store;
        const {
            moveSelectionUp, moveSelectionDown, toggleFileApproval, expandDiff,
            toggleBodyView, setBodyView,
            startApplySimulation, rejectAllFiles, approve,
            tryRepairFile, showBulkRepair, executeBulkRepairOption, confirmHandoff,
            scrollReasoningUp, scrollReasoningDown, navigateScriptErrorUp, navigateScriptErrorDown,
        } = store.actions;

        const {
            numFiles,
            approvedFilesCount,
            approvedLinesAdded,
            approvedLinesRemoved,
        } = useMemo(() => {
            const approvedFiles = files.filter(f => f.status === 'APPROVED');
            return {
                numFiles: files.length,
                approvedFilesCount: approvedFiles.length,
                approvedLinesAdded: approvedFiles.reduce((sum, f) => sum + f.linesAdded, 0),
                approvedLinesRemoved: approvedFiles.reduce((sum, f) => sum + f.linesRemoved, 0),
            };
        }, [files]);

        const openCopyMode = () => {
            if (!transaction) return;
            const { files: reviewFiles, selectedItemIndex } = store;
            const selectedFile = selectedItemIndex < reviewFiles.length ? reviewFiles[selectedItemIndex] : undefined;

            const title = 'Select data to copy from review:';
            const items: CopyItem[] = [
                { id: 'uuid', key: 'U', label: COPYABLE_ITEMS.UUID, getData: () => transaction.id },
                { id: 'message', key: 'M', label: COPYABLE_ITEMS.MESSAGE, getData: () => transaction.message },
                { id: 'prompt', key: 'P', label: COPYABLE_ITEMS.PROMPT, getData: () => transaction.prompt || '' },
                { id: 'reasoning', key: 'R', label: COPYABLE_ITEMS.REASONING, getData: () => transaction.reasoning || '' },
                { id: 'file_diff', key: 'F', label: `${COPYABLE_ITEMS.FILE_DIFF}${selectedFile ? `: ${selectedFile.path}` : ''}`, getData: () => selectedFile?.diff || 'No file selected' },
                { id: 'all_diffs', key: 'A', label: COPYABLE_ITEMS.ALL_DIFFS, getData: () => reviewFiles.map(f => `--- FILE: ${f.path} ---\n${f.diff}`).join('\n\n') },
            ];

            useCopyStore.getState().actions.open(title, items);
        };

        useInput((input, key) => {
            // For demo purposes: Pressing 1 or 2 triggers the processing screen simulation.
            if (input === '1') {
                startApplySimulation('success');
                return;
            }
            if (input === '2') {
                // The store's default is failure, but to re-trigger the processing screen
                startApplySimulation('failure');
                return;
            }

            if (input.toLowerCase() === 'q') exit();

            // Handle Escape key - context-sensitive behavior
            if (key.escape) {
                if (bodyView === 'bulk_repair' || bodyView === 'confirm_handoff') {
                    toggleBodyView(bodyView); // Close modal
                } else if (bodyView !== 'none') {
                    setBodyView('none');
                } else {
                    showDashboardScreen();
                }
                return;
            }

            // Handoff Confirmation
            if (bodyView === 'confirm_handoff') {
                if (key.return) {
                    confirmHandoff();
                }
                return;
            }

            // Bulk Repair Navigation
            if (bodyView === 'bulk_repair') {
                if (input >= '1' && input <= '4') {
                    executeBulkRepairOption(parseInt(input));
                }
                return;
            }

            // Reasoning Scroll Navigation
            if (bodyView === 'reasoning') {
                if (key.upArrow) scrollReasoningUp();
                if (key.downArrow) scrollReasoningDown();
                if (input.toLowerCase() === 'r') toggleBodyView('reasoning');
                return;
            }

            // Script Output Navigation
            if (bodyView === 'script_output') {
                if (input.toLowerCase() === 'j') navigateScriptErrorDown();
                if (input.toLowerCase() === 'k') navigateScriptErrorUp();
                if (key.return) toggleBodyView('script_output');
                if (input.toLowerCase() === 'c') {
                    // Copy script output
                    const scriptIndex = selectedItemIndex - numFiles;
                    const selectedScript = scripts[scriptIndex];
                    if (selectedScript) {
                        // eslint-disable-next-line no-console
                        console.log(`[CLIPBOARD] Copied script output: ${selectedScript.command}`);
                    }
                }
                return;
            }

            // Diff View Navigation
            if (bodyView === 'diff') {
                if (input.toLowerCase() === 'x') expandDiff();
                if (input.toLowerCase() === 'd') toggleBodyView('diff');
                return;
            }

            // Handle Shift+R for reject all
            if (key.shift && input.toLowerCase() === 'r') {
                if (approvedFilesCount > 0) {
                    rejectAllFiles();
                }
                return;
            }

            // Main View Navigation
            if (key.upArrow) moveSelectionUp();
            if (key.downArrow) moveSelectionDown();

            if (input.toLowerCase() === 'r') toggleBodyView('reasoning');

            if (input === ' ') {
                if (selectedItemIndex < numFiles) {
                    const file = files[selectedItemIndex];
                    if (file && file.status !== 'FAILED') {
                        toggleFileApproval();
                    }
                }
            }

            if (input.toLowerCase() === 'd') {
                if (selectedItemIndex < numFiles) {
                    toggleBodyView('diff');
                }
            }

            if (key.return) { // Enter key
                 if (selectedItemIndex >= numFiles) { // It's a script
                    toggleBodyView('script_output');
                }
            }

            if (input.toLowerCase() === 'a') {
                if (approvedFilesCount > 0) {
                    approve();
                    showDashboardScreen();
                }
            }

            if (input.toLowerCase() === 'c') {
                openCopyMode();
            }

            // Handle T for single repair and Shift+T for bulk repair
            if (input.toLowerCase() === 't') {
                if (key.shift) {
                    const hasFailedFiles = files.some(f => f.status === 'FAILED');
                    if (hasFailedFiles) {
                        showBulkRepair();
                    }
                } else {
                    if (selectedItemIndex < numFiles) {
                        const file = files[selectedItemIndex];
                        if (file && file.status === 'FAILED') {
                            tryRepairFile();
                        }
                    }
                }
            }

            if (input.toLowerCase() === 'q') {
                showDashboardScreen();
            }
        });

        return {
            ...store,
            transaction,
            numFiles,
            approvedFilesCount,
            approvedLinesAdded,
            approvedLinesRemoved,
        };
    };
  src/hooks/useTransactionDetailScreen.tsx: >-
    import { useInput } from 'ink';

    import { useTransactionDetailStore } from
    '../stores/transaction-detail.store';

    import { useAppStore } from '../stores/app.store';

    import { useTransactionStore } from '../stores/transaction.store';

    import { useMemo } from 'react';

    import { useCopyStore, type CopyItem } from '../stores/copy.store';

    import { COPYABLE_ITEMS } from '../types/copy.types';


    export const useTransactionDetailScreen = () => {
        const { showDashboardScreen } = useAppStore(s => s.actions);
        const store = useTransactionDetailStore();
        const { bodyView } = store;

        const transaction = useTransactionStore(s => s.transactions.find(tx => tx.id === store.transactionId));
        const files = useMemo(() => transaction?.files || [], [transaction]);

        const {
            // Main nav
            navigateUp, navigateDown, handleEnterOrRight, handleEscapeOrLeft,
            toggleRevertConfirm,
            // Revert modal nav
            confirmRevert,
        } = store.actions;

        const openCopyMode = () => {
            if (!transaction) return;
            const { selectedFileIndex } = store;
            const selectedFile = files[selectedFileIndex];

            const title = `Select data to copy from transaction ${transaction.hash}:`;
            const items: CopyItem[] = [
                { id: 'message', key: 'M', label: COPYABLE_ITEMS.MESSAGE, getData: () => transaction.message, isDefaultSelected: true },
                { id: 'prompt', key: 'P', label: COPYABLE_ITEMS.PROMPT, getData: () => transaction.prompt || '' },
                { id: 'reasoning', key: 'R', label: COPYABLE_ITEMS.REASONING, getData: () => transaction.reasoning || '', isDefaultSelected: true },
                { id: 'all_diffs', key: 'A', label: `${COPYABLE_ITEMS.ALL_DIFFS} (${transaction.files?.length || 0} files)`, getData: () => transaction.files?.map(f => `--- FILE: ${f.path} ---\n${f.diff}`).join('\n\n') || '' },
                { id: 'file_diff', key: 'F', label: `${COPYABLE_ITEMS.FILE_DIFF}: ${selectedFile?.path || 'No file selected'}`, getData: () => selectedFile?.diff || 'No file selected' },
                { id: 'uuid', key: 'U', label: COPYABLE_ITEMS.UUID, getData: () => transaction.id },
                { id: 'yaml', key: 'Y', label: COPYABLE_ITEMS.FULL_YAML, getData: () => '... YAML representation ...' }, // Mocking this
            ];

            useCopyStore.getState().actions.open(title, items);
        };

        useInput((input, key) => {
            if (bodyView === 'REVERT_CONFIRM') {
                if (key.escape) toggleRevertConfirm();
                if (key.return) confirmRevert();
                return;
            }

            // Main view input
            if (input.toLowerCase() === 'q') {
                showDashboardScreen();
            }
            if (input.toLowerCase() === 'c') {
                openCopyMode();
            }
            if (input.toLowerCase() === 'u') {
                toggleRevertConfirm();
            }

            if (key.upArrow) navigateUp();
            if (key.downArrow) navigateDown();
            if (key.return || key.rightArrow) handleEnterOrRight();
            if (key.escape || key.leftArrow) handleEscapeOrLeft();
        });

        return {
            transaction,
            files,
            ...store,
            actions: {
                ...store.actions,
                showDashboardScreen,
            },
        };
    };
  src/hooks/useTransactionHistoryScreen.tsx: >-
    import { useState, useMemo, useEffect } from 'react';

    import { useInput } from 'ink';

    import { useTransactionHistoryStore, getVisibleItemPaths } from
    '../stores/transaction-history.store';

    import { useAppStore } from '../stores/app.store';

    import { useStdoutDimensions } from '../utils';

    import { useTransactionStore } from '../stores/transaction.store';

    import { useCopyStore, type CopyItem } from '../stores/copy.store';

    import { COPYABLE_ITEMS } from '../types/copy.types';


    export const useTransactionHistoryScreen = () => {
        const [, rows] = useStdoutDimensions();
        const store = useTransactionHistoryStore();
        const { showDashboardScreen } = useAppStore(s => s.actions);
        const transactions = useTransactionStore(s => s.transactions);

        const [viewOffset, setViewOffset] = useState(0);

        const visibleItemPaths = useMemo(
            () => getVisibleItemPaths(store.transactions, store.expandedIds),
            [store.transactions, store.expandedIds],
        );
        const selectedIndex = visibleItemPaths.indexOf(store.selectedItemPath);

        const NON_CONTENT_HEIGHT = 8; // Header, filter, separators, footer, etc.
        const viewportHeight = Math.max(1, rows - NON_CONTENT_HEIGHT);

        useEffect(() => {
            if (selectedIndex >= 0 && selectedIndex < viewOffset) {
                setViewOffset(selectedIndex);
            } else if (selectedIndex >= viewOffset + viewportHeight) {
                setViewOffset(selectedIndex - viewportHeight + 1);
            }
        }, [selectedIndex, viewOffset, viewportHeight]);

        const openCopyMode = () => {
            const { selectedForAction } = store;
            const transactionsToCopy = store.transactions.filter(tx => selectedForAction.has(tx.id));

            if (transactionsToCopy.length === 0) return;
            
            const title = `Select data to copy from ${transactionsToCopy.length} transactions:`;
            const items: CopyItem[] = [
                { id: 'messages', key: 'M', label: COPYABLE_ITEMS.MESSAGES, getData: () => transactionsToCopy.map(tx => tx.message).join('\n'), isDefaultSelected: true },
                { id: 'prompts', key: 'P', label: COPYABLE_ITEMS.PROMPTS, getData: () => transactionsToCopy.map(tx => tx.prompt || '').join('\n\n---\n\n'), isDefaultSelected: false },
                { id: 'reasonings', key: 'R', label: COPYABLE_ITEMS.REASONINGS, getData: () => transactionsToCopy.map(tx => tx.reasoning || '').join('\n\n---\n\n'), isDefaultSelected: true },
                { id: 'diffs', key: 'D', label: COPYABLE_ITEMS.DIFFS, getData: () => transactionsToCopy.flatMap(tx => tx.files?.map(f => `--- TX: ${tx.hash}, FILE: ${f.path} ---\n${f.diff}`)).join('\n\n') },
                { id: 'uuids', key: 'U', label: COPYABLE_ITEMS.UUIDS, getData: () => transactionsToCopy.map(tx => tx.id).join('\n') },
                { id: 'yaml', key: 'Y', label: COPYABLE_ITEMS.FULL_YAML, getData: () => '... YAML representation ...' },
            ];

            useCopyStore.getState().actions.open(title, items);
        };

        useInput((input, key) => {
            if (store.mode === 'FILTER') {
                if (key.escape) store.actions.setMode('LIST');
                if (key.return) store.actions.applyFilter();
                return;
            }
            if (store.mode === 'BULK_ACTIONS') {
                if (key.escape) store.actions.setMode('LIST');
                // Add number handlers...
                return;
            }

            // LIST mode inputs
            if (key.upArrow) store.actions.navigateUp();
            if (key.downArrow) store.actions.navigateDown();
            if (key.rightArrow) store.actions.expandOrDrillDown();
            if (key.leftArrow) store.actions.collapseOrBubbleUp();
            if (input === ' ') store.actions.toggleSelection();

            if (input.toLowerCase() === 'f') store.actions.setMode('FILTER');
            if (input.toLowerCase() === 'c' && store.selectedForAction.size > 0) openCopyMode();
            if (input.toLowerCase() === 'b' && store.selectedForAction.size > 0) store.actions.setMode('BULK_ACTIONS');
            
            if (key.escape || input.toLowerCase() === 'q') {
                showDashboardScreen();
            }
        });

        const itemsInView = visibleItemPaths.slice(viewOffset, viewOffset + viewportHeight);
        const txIdsInView = useMemo(() => new Set(itemsInView.map(p => p.split('/')[0])), [itemsInView]);
        const transactionsInView = useMemo(
            () => store.transactions.filter(tx => txIdsInView.has(tx.id)),
            [store.transactions, txIdsInView],
        );
        const pathsInViewSet = useMemo(() => new Set(itemsInView), [itemsInView]);

        const filterStatus = store.filterQuery ? store.filterQuery : '(none)';
        const showingStatus = `Showing ${viewOffset + 1}-${viewOffset + itemsInView.length} of ${visibleItemPaths.length} items`;
        
        return {
            store,
            viewOffset,
            itemsInView,
            transactionsInView,
            pathsInViewSet,
            filterStatus,
            showingStatus,
            visibleItemPaths,
        };
    };
  src/hooks/useDebugMenu.tsx: >-
    import { useState } from 'react';

    import { useInput } from 'ink';

    import { useAppStore } from '../stores/app.store';

    import { useDashboardStore } from '../stores/dashboard.store';

    import { useInitStore } from '../stores/init.store';

    import { useCommitStore } from '../stores/commit.store';

    import { useTransactionDetailStore } from
    '../stores/transaction-detail.store';

    import { useCopyStore } from '../stores/copy.store';

    import { COPYABLE_ITEMS } from '../types/copy.types';

    import { useTransactionHistoryStore } from
    '../stores/transaction-history.store';

    import { ReviewService } from '../services/review.service';

    import { useReviewStore } from '../stores/review.store';

    import type { MenuItem } from '../types/debug.types';

    import { moveIndex } from '../stores/navigation.utils';

    import { useTransactionStore } from '../stores/transaction.store';

    export type { MenuItem } from '../types/debug.types';


    export const useDebugMenu = () => {
        const [selectedIndex, setSelectedIndex] = useState(0);
        const appActions = useAppStore(s => s.actions);
        const dashboardActions = useDashboardStore(s => s.actions);
        const initActions = useInitStore(s => s.actions);
        const commitActions = useCommitStore(s => s.actions);
        const detailActions = useTransactionDetailStore(s => s.actions);
        const historyActions = useTransactionHistoryStore(s => s.actions);

        const menuItems: MenuItem[] = [
            {
                title: 'Splash Screen',
                action: () => appActions.showSplashScreen(),
            },
            {
                title: 'Init: Analyze Phase',
                action: () => {
                    initActions.setPhase('ANALYZE');
                    appActions.showInitScreen();
                },
            },
            {
                title: 'Init: Interactive Phase',
                action: () => {
                    initActions.setPhase('INTERACTIVE');
                    appActions.showInitScreen();
                },
            },
            {
                title: 'Init: Finalize Phase',
                action: () => {
                    initActions.setPhase('FINALIZE');
                    appActions.showInitScreen();
                },
            },
            {
                title: 'Dashboard: Listening',
                action: () => {
                    dashboardActions.setStatus('LISTENING');
                    appActions.showDashboardScreen();
                },
            },
            {
                title: 'Dashboard: Confirm Approve',
                action: () => {
                    dashboardActions.setStatus('CONFIRM_APPROVE');
                    appActions.showDashboardScreen();
                },
            },
            {
                title: 'Dashboard: Approving',
                action: () => {
                    dashboardActions.setStatus('APPROVING');
                    appActions.showDashboardScreen();
                },
            },
            {
                title: 'Review: Partial Failure (Default)',
                action: () => {
                    ReviewService.loadTransactionForReview('1');
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Success',
                action: () => {
                    ReviewService.loadTransactionForReview('2');
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Diff View',
                action: () => {
                    ReviewService.loadTransactionForReview('1');
                    appActions.showReviewScreen();
                    setTimeout(() => {
                        useReviewStore.getState().actions.toggleBodyView('diff');
                    }, 100);
                },
            },
            {
                title: 'Review: Reasoning View',
                action: () => {
                    ReviewService.loadTransactionForReview('1');
                    appActions.showReviewScreen();
                    setTimeout(() => {
                        useReviewStore.getState().actions.toggleBodyView('reasoning');
                    }, 100);
                },
            },
            {
                title: 'Review: Copy Mode',
                action: () => {
                    ReviewService.loadTransactionForReview('1');
                    appActions.showReviewScreen();
                    setTimeout(() => {
                        const { transactionId, files, selectedItemIndex } = useReviewStore.getState();
                        const transaction = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                        if (!transaction) return;

                        const selectedFile = selectedItemIndex < files.length ? files[selectedItemIndex] : undefined;

                        const title = 'Select data to copy from review:';
                        const items = [
                            { id: 'uuid', key: 'U', label: COPYABLE_ITEMS.UUID, getData: () => transaction.id },
                            { id: 'message', key: 'M', label: COPYABLE_ITEMS.MESSAGE, getData: () => transaction.message },
                            { id: 'prompt', key: 'P', label: COPYABLE_ITEMS.PROMPT, getData: () => transaction.prompt || '' },
                            { id: 'reasoning', key: 'R', label: COPYABLE_ITEMS.REASONING, getData: () => transaction.reasoning || '' },
                            { id: 'file_diff', key: 'F', label: `${COPYABLE_ITEMS.FILE_DIFF}${selectedFile ? `: ${selectedFile.path}` : ''}`, getData: () => selectedFile?.diff || 'No file selected' },
                            { id: 'all_diffs', key: 'A', label: COPYABLE_ITEMS.ALL_DIFFS, getData: () => files.map(f => `--- FILE: ${f.path} ---\n${f.diff}`).join('\n\n') },
                        ];
                        useCopyStore.getState().actions.open(title, items);
                    }, 100);
                },
            },
            {
                title: 'Review: Script Output',
                action: () => {
                    ReviewService.loadTransactionForReview('2');
                    appActions.showReviewScreen();
                    setTimeout(() => {
                        useReviewStore.getState().actions.toggleBodyView('script_output');
                    }, 100);
                },
            },
            {
                title: 'Review: Bulk Repair',
                action: () => {
                    ReviewService.loadTransactionForReview('1');
                    appActions.showReviewScreen();
                    setTimeout(() => {
                        useReviewStore.getState().actions.showBulkRepair();
                    }, 100);
                },
            },
            {
                title: 'Review: Handoff Confirm',
                action: () => {
                    ReviewService.loadTransactionForReview('1');
                    appActions.showReviewScreen();
                    setTimeout(() => {
                        useReviewStore.getState().actions.executeBulkRepairOption(3); // Option 3 is Handoff
                    }, 100);
                },
            },
            {
                title: 'Review Processing',
                action: () => appActions.showReviewProcessingScreen(),
            },
            {
                title: 'Git Commit Screen',
                action: () => {
                    commitActions.prepareCommitScreen();
                    appActions.showGitCommitScreen();
                },
            },
            {
                title: 'Transaction Detail Screen',
                action: () => {
                    // The dashboard store has transactions, we'll just pick one.
                    detailActions.loadTransaction('3'); // 'feat: implement new dashboard UI'
                    appActions.showTransactionDetailScreen();
                },
            },
            {
                title: 'Transaction History Screen',
                action: () => {
                    historyActions.load();
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: L1 Drilldown',
                action: () => {
                    historyActions.prepareDebugState('l1-drill');
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: L2 Drilldown (Diff)',
                action: () => {
                    historyActions.prepareDebugState('l2-drill');
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: Filter Mode',
                action: () => {
                    historyActions.prepareDebugState('filter');
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: Copy Mode',
                action: () => {
                    historyActions.prepareDebugState('copy');
                    appActions.showTransactionHistoryScreen();
                    setTimeout(() => {
                        const { transactions: allTxs, selectedForAction } = useTransactionHistoryStore.getState();
                        const transactions = allTxs.filter(tx => selectedForAction.has(tx.id));
                        const title = `Select data to copy from ${transactions.length} transactions:`;
                        const items = [
                            { id: 'messages', key: 'M', label: COPYABLE_ITEMS.MESSAGES, getData: () => transactions.map(tx => tx.message).join('\n'), isDefaultSelected: true },
                            { id: 'prompts', key: 'P', label: COPYABLE_ITEMS.PROMPTS, getData: () => transactions.map(tx => tx.prompt || '').join('\n\n---\n\n'), isDefaultSelected: false },
                            { id: 'reasonings', key: 'R', label: COPYABLE_ITEMS.REASONINGS, getData: () => transactions.map(tx => tx.reasoning || '').join('\n\n---\n\n'), isDefaultSelected: true },
                            { id: 'diffs', key: 'D', label: COPYABLE_ITEMS.DIFFS, getData: () => transactions.flatMap(tx => tx.files?.map(f => `--- TX: ${tx.hash}, FILE: ${f.path} ---\n${f.diff}`)).join('\n\n') },
                            { id: 'uuids', key: 'U', label: COPYABLE_ITEMS.UUIDS, getData: () => transactions.map(tx => tx.id).join('\n') },
                            { id: 'yaml', key: 'Y', label: COPYABLE_ITEMS.FULL_YAML, getData: () => '... YAML representation ...' },
                        ];
                        useCopyStore.getState().actions.open(title, items);
                    }, 100);
                },
            },
        ];

        useInput((input, key) => {
            if (key.upArrow) {
                setSelectedIndex(i => moveIndex(i, 'up', menuItems.length));
                return;
            }
            if (key.downArrow) {
                setSelectedIndex(i => moveIndex(i, 'down', menuItems.length));
                return;
            }
            if (key.return) {
                const item = menuItems[selectedIndex];
                if (item) {
                    item.action();
                    appActions.toggleDebugMenu();
                }
                return;
            }
            if (key.escape) {
                appActions.toggleDebugMenu();
                return;
            }

            // No ctrl/meta keys for selection shortcuts, and only single characters
            if (key.ctrl || key.meta || input.length !== 1) return;

            if (input >= '1' && input <= '9') {
                const targetIndex = parseInt(input, 10) - 1;
                if (targetIndex < menuItems.length) {
                    setSelectedIndex(targetIndex);
                }
            } else if (input.toLowerCase() >= 'a' && input.toLowerCase() <= 'z') {
                const targetIndex = 9 + (input.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0));
                if (targetIndex < menuItems.length) {
                    setSelectedIndex(targetIndex);
                }
            }
        });

        return {
            selectedIndex,
            menuItems,
        };
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-09-24T14:26:06.550Z'
status: committed
id: 73
