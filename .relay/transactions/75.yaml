uuid: c2584141-8f2c-473d-9f4c-1e24744d0d21
projectId: relaycode-tui
createdAt: '2025-09-23T13:47:51.152Z'
gitCommitMsg: >-
  refactor(review): decouple ReviewService from ReviewStore

  Refactored the patch application simulation logic to improve separation of
  concerns and testability.

  - Converted `ReviewService.runApplySimulation` into an async generator that
  yields state update events instead of directly calling store actions. -
  Introduced an `ApplyUpdate` type to define the contract for these events. -
  Modified `ReviewStore.startApplySimulation` to consume the async generator,
  iterating through the yielded updates and applying them to its internal state.

  This change makes the `ReviewService` a pure, dependency-free business logic
  provider, while the `ReviewStore` remains the single source of truth for its
  own state management.
promptSummary: >-
  The user requested to execute Part 2 of a multi-part refactoring plan, which
  involves decoupling the `ReviewService` from the `ReviewStore` by converting
  the `runApplySimulation` method into an async generator and having the store
  consume its yielded events.
reasoning:
  - >-
    Excellent. I am executing Part 2 of the refactoring plan: Decoupling
    Services from Store Internals. This will make the application logic more
    robust, testable, and maintainable by separating the simulation logic (the
    "what") from the state update mechanism (the "how").
  - '### Step 1: Define the `ApplyUpdate` Type'
  - >-
    First, I will define a new `ApplyUpdate` type. This type will represent the
    stream of events that the simulation service will generate. Placing this in
    the central types file ensures it's available to both the service and the
    store.
  - '### Step 2: Refactor `ReviewService` to Use an Async Generator'
  - >-
    Next, I will refactor `ReviewService.runApplySimulation` to be an `async
    function*`. Instead of directly calling store actions, it will now `yield`
    `ApplyUpdate` objects, making it a pure, self-contained producer of
    simulation events.
  - '### Step 3: Update `ReviewStore` to Consume the Generator'
  - >-
    Finally, I will modify the `startApplySimulation` action in
    `useReviewStore`. It will now consume the async generator from the service,
    iterating through the yielded events and applying them to its own state
    using its internal helper methods. This completes the decoupling.
  - >-
    This completes Part 2. The `ReviewService` is now a pure business logic
    provider, and the `ReviewStore` is the sole authority for managing its
    state, resulting in a cleaner, more robust architecture.
operations:
  - type: write
    path: src/types/review.types.ts
    content: >+
      --- src/types/review.types.ts

      +++ src/types/review.types.ts

      @@ -15,3 +15,7 @@
       
       export type ReviewBodyView = 'diff' | 'reasoning' | 'script_output' | 'bulk_repair' | 'confirm_handoff' | 'none';
       export type PatchStatus = 'SUCCESS' | 'PARTIAL_FAILURE';
      +

      +export type ApplyUpdate =

      +    | { type: 'UPDATE_STEP'; payload: { id: string; status:
      ApplyStep['status']; duration?: number; details?: string } }

      +    | { type: 'ADD_SUBSTEP'; payload: { parentId: string; substep:
      Omit<ApplyStep, 'substeps'> } };

    patchStrategy: standard-diff
  - type: write
    path: src/services/review.service.ts
    content: >+
      --- src/services/review.service.ts

      +++ src/services/review.service.ts

      @@ -2,7 +2,7 @@
       import { useTransactionStore } from '../stores/transaction.store';
       import { useAppStore } from '../stores/app.store';
       import { sleep } from '../utils';
      -import type { ApplyStep } from '../types/review.types';

      +import type { ApplyStep, ApplyUpdate } from '../types/review.types';
       
       const generateBulkRepairPrompt = (files: ReviewFileItem[]): string => {
           const failedFiles = files.filter(f => f.status === 'FAILED');
      @@ -53,49 +53,46 @@
           useAppStore.getState().actions.showDashboardScreen();
       };
       
      -const runApplySimulation = async (scenario: 'success' | 'failure') => {

      -    const { actions } = useReviewStore.getState();

      -    const { _updateApplyStep, _addApplySubstep } = actions;

      -

      +async function* runApplySimulation(scenario: 'success' | 'failure'):
      AsyncGenerator<ApplyUpdate> {
           if (scenario === 'success') {
      -        _updateApplyStep('snapshot', 'active'); await sleep(100);

      -        _updateApplyStep('snapshot', 'done', 0.1);

      +        yield { type: 'UPDATE_STEP', payload: { id: 'snapshot', status:
      'active' } }; await sleep(100);

      +        yield { type: 'UPDATE_STEP', payload: { id: 'snapshot', status:
      'done', duration: 0.1 } };
       
      -        _updateApplyStep('memory', 'active'); await sleep(100);

      -        _addApplySubstep('memory', { id: 's1', title: '[✓] write:
      src/core/clipboard.ts (strategy: replace)', status: 'done' });

      +        yield { type: 'UPDATE_STEP', payload: { id: 'memory', status:
      'active' } }; await sleep(100);

      +        yield { type: 'ADD_SUBSTEP', payload: { parentId: 'memory',
      substep: { id: 's1', title: '[✓] write: src/core/clipboard.ts (strategy:
      replace)', status: 'done' } } };
               await sleep(100);
      -        _addApplySubstep('memory', { id: 's2', title: '[✓] write:
      src/utils/shell.ts (strategy: standard-diff)', status: 'done' });

      -        _updateApplyStep('memory', 'done', 0.3);

      +        yield { type: 'ADD_SUBSTEP', payload: { parentId: 'memory',
      substep: { id: 's2', title: '[✓] write: src/utils/shell.ts (strategy:
      standard-diff)', status: 'done' } } };

      +        yield { type: 'UPDATE_STEP', payload: { id: 'memory', status:
      'done', duration: 0.3 } };
       
      -        _updateApplyStep('post-command', 'active'); await sleep(1300);

      -        _addApplySubstep('post-command', { id: 's3', title: '`bun run
      test` ... Passed', status: 'done' });

      -        _updateApplyStep('post-command', 'done', 2.3);

      +        yield { type: 'UPDATE_STEP', payload: { id: 'post-command',
      status: 'active' } }; await sleep(1300);

      +        yield { type: 'ADD_SUBSTEP', payload: { parentId: 'post-command',
      substep: { id: 's3', title: '`bun run test` ... Passed', status: 'done' }
      } };

      +        yield { type: 'UPDATE_STEP', payload: { id: 'post-command',
      status: 'done', duration: 2.3 } };
       
      -        _updateApplyStep('linter', 'active'); await sleep(1200);

      -        _addApplySubstep('linter', { id: 's4', title: '`bun run lint` ...
      0 Errors', status: 'done' });

      -        _updateApplyStep('linter', 'done', 1.2);

      +        yield { type: 'UPDATE_STEP', payload: { id: 'linter', status:
      'active' } }; await sleep(1200);

      +        yield { type: 'ADD_SUBSTEP', payload: { parentId: 'linter',
      substep: { id: 's4', title: '`bun run lint` ... 0 Errors', status: 'done'
      } } };

      +        yield { type: 'UPDATE_STEP', payload: { id: 'linter', status:
      'done', duration: 1.2 } };
       
               await sleep(500);
       
           } else { // failure scenario
      -        _updateApplyStep('snapshot', 'active'); await sleep(100);

      -        _updateApplyStep('snapshot', 'done', 0.1);

      +        yield { type: 'UPDATE_STEP', payload: { id: 'snapshot', status:
      'active' } }; await sleep(100);

      +        yield { type: 'UPDATE_STEP', payload: { id: 'snapshot', status:
      'done', duration: 0.1 } };
       
      -        _updateApplyStep('memory', 'active'); await sleep(100);

      -        _addApplySubstep('memory', { id: 'f1', title: '[✓] write:
      src/core/transaction.ts (strategy: replace)', status: 'done' });

      +        yield { type: 'UPDATE_STEP', payload: { id: 'memory', status:
      'active' } }; await sleep(100);

      +        yield { type: 'ADD_SUBSTEP', payload: { parentId: 'memory',
      substep: { id: 'f1', title: '[✓] write: src/core/transaction.ts (strategy:
      replace)', status: 'done' } } };
               await sleep(100);
      -        _addApplySubstep('memory', { id: 'f2', title: '[!] failed:
      src/utils/logger.ts (Hunk #1 failed to apply)', status: 'failed' });

      +        yield { type: 'ADD_SUBSTEP', payload: { parentId: 'memory',
      substep: { id: 'f2', title: '[!] failed: src/utils/logger.ts (Hunk #1
      failed to apply)', status: 'failed' } } };
               await sleep(100);
      -        _addApplySubstep('memory', { id: 'f3', title: '[!] failed:
      src/commands/apply.ts (Context mismatch at line 92)', status: 'failed' });

      -        _updateApplyStep('memory', 'done', 0.5);

      +        yield { type: 'ADD_SUBSTEP', payload: { parentId: 'memory',
      substep: { id: 'f3', title: '[!] failed: src/commands/apply.ts (Context
      mismatch at line 92)', status: 'failed' } } };

      +        yield { type: 'UPDATE_STEP', payload: { id: 'memory', status:
      'done', duration: 0.5 } };
       
               await sleep(100);
      -        _updateApplyStep('post-command', 'skipped', undefined, 'Skipped
      due to patch application failure');

      +        yield { type: 'UPDATE_STEP', payload: { id: 'post-command',
      status: 'skipped', details: 'Skipped due to patch application failure' }
      };
               await sleep(100);
      -        _updateApplyStep('linter', 'skipped', undefined, 'Skipped due to
      patch application failure');

      +        yield { type: 'UPDATE_STEP', payload: { id: 'linter', status:
      'skipped', details: 'Skipped due to patch application failure' } };
       
               await sleep(500);
           }
      -};

      +}
       
       const loadTransactionForReview = (transactionId: string) => {
           useReviewStore.getState().actions.load(transactionId);

    patchStrategy: standard-diff
  - type: write
    path: src/stores/review.store.ts
    content: >+
      --- src/stores/review.store.ts

      +++ src/stores/review.store.ts

      @@ -5,7 +5,7 @@
       import { useTransactionStore, type Transaction } from './transaction.store';
       import { moveIndex } from './navigation.utils';
       import type { ReviewFileItem } from '../types/file.types';
      -import type { ScriptResult, ApplyStep, ReviewBodyView, PatchStatus } from
      '../types/review.types';

      +import type { ScriptResult, ApplyStep, ReviewBodyView, PatchStatus,
      ApplyUpdate } from '../types/review.types';
       
       export type { ReviewFileItem } from '../types/file.types';
       export type { ScriptResult, ApplyStep } from '../types/review.types';
      @@ -118,13 +118,22 @@
               },
               startApplySimulation: async (scenario: 'success' | 'failure') => {
                   const { showReviewProcessingScreen, showReviewScreen } = useAppStore.getState().actions;
      +            const { _updateApplyStep, _addApplySubstep } = get().actions;
       
                   set({ applySteps: JSON.parse(JSON.stringify(initialApplySteps)) });
                   showReviewProcessingScreen();
       
      -            await ReviewService.runApplySimulation(scenario);

      +            const simulationGenerator =
      ReviewService.runApplySimulation(scenario);

      +            for await (const update of simulationGenerator) {

      +                switch (update.type) {

      +                    case 'UPDATE_STEP':

      +                        _updateApplyStep(update.payload.id,
      update.payload.status, update.payload.duration, update.payload.details);

      +                        break;

      +                    case 'ADD_SUBSTEP':

      +                        _addApplySubstep(update.payload.parentId,
      update.payload.substep);

      +                        break;

      +                }

      +            }
       
                   showReviewScreen();
               },

    patchStrategy: standard-diff
snapshot:
  src/types/review.types.ts: >-
    export interface ScriptResult {
        command: string;
        success: boolean;
        duration: number;
        summary: string;
        output: string;
    }


    export interface ApplyStep {
        id: string;
        title: string;
        status: 'pending' | 'active' | 'done' | 'failed' | 'skipped';
        details?: string;
        substeps?: ApplyStep[];
        duration?: number;
    }


    export type ReviewBodyView = 'diff' | 'reasoning' | 'script_output' |
    'bulk_repair' | 'confirm_handoff' | 'none';

    export type PatchStatus = 'SUCCESS' | 'PARTIAL_FAILURE';
  src/services/review.service.ts: >-
    import { useReviewStore, type ReviewFileItem } from
    '../stores/review.store';

    import { useTransactionStore } from '../stores/transaction.store';

    import { useAppStore } from '../stores/app.store';

    import { sleep } from '../utils';

    import type { ApplyStep } from '../types/review.types';


    const generateBulkRepairPrompt = (files: ReviewFileItem[]): string => {
        const failedFiles = files.filter(f => f.status === 'FAILED');
        return `The previous patch failed to apply to MULTIPLE files. Please generate a new, corrected patch that addresses all the files listed below.

    IMPORTANT: The response MUST contain a complete code block for EACH file
    that needs to be fixed.


    ${failedFiles.map(file => `--- FILE: ${file.path} ---

    Strategy: ${file.strategy}

    Error: ${file.error}


    ORIGINAL CONTENT:

    ---

    // ... original content of ${file.path} ...

    ---


    FAILED PATCH:

    ---

    ${file.diff || '// ... failed diff ...'}

    ---

    `).join('\n')}


    Please analyze all failed files and provide a complete, corrected
    response.`;

    };


    const generateHandoffPrompt = (
        hash: string,
        message: string,
        reasoning: string,
        files: ReviewFileItem[],
    ): string => {
        const successfulFiles = files.filter(f => f.status === 'APPROVED');
        const failedFiles = files.filter(f => f.status === 'FAILED');

        return `I am handing off a failed automated code transaction to you. Your task is to act as my programming assistant and complete the planned changes.

    The full plan for this transaction is detailed in the YAML file located at:
    .relay/transactions/${hash}.yml. Please use this file as your primary source
    of truth for the overall goal.


    Here is the current status of the transaction:


    --- TRANSACTION SUMMARY ---

    Goal: ${message}

    Reasoning:

    ${reasoning}


    --- CURRENT FILE STATUS ---

    SUCCESSFUL CHANGES (already applied, no action needed):

    ${successfulFiles.map(f => `- MODIFIED: ${f.path}`).join('\n') || ' 
    (None)'}


    FAILED CHANGES (these are the files you need to fix):

    ${failedFiles.map(f => `- FAILED: ${f.path} (Error:
    ${f.error})`).join('\n')}


    Your job is to now work with me to fix the FAILED files and achieve the
    original goal of the transaction. Please start by asking me which file you
    should work on first.`;

    };


    const performHandoff = (hash: string) => {
        // This is a bit of a hack to find the right transaction to update in the demo
        const txToUpdate = useTransactionStore.getState().transactions.find(tx => tx.hash === hash);
        if (txToUpdate) {
            useTransactionStore.getState().actions.updateTransactionStatus(txToUpdate.id, 'HANDOFF');
        }

        useAppStore.getState().actions.showDashboardScreen();
    };


    const runApplySimulation = async (scenario: 'success' | 'failure') => {
        const { actions } = useReviewStore.getState();
        const { _updateApplyStep, _addApplySubstep } = actions;

        if (scenario === 'success') {
            _updateApplyStep('snapshot', 'active'); await sleep(100);
            _updateApplyStep('snapshot', 'done', 0.1);

            _updateApplyStep('memory', 'active'); await sleep(100);
            _addApplySubstep('memory', { id: 's1', title: '[✓] write: src/core/clipboard.ts (strategy: replace)', status: 'done' });
            await sleep(100);
            _addApplySubstep('memory', { id: 's2', title: '[✓] write: src/utils/shell.ts (strategy: standard-diff)', status: 'done' });
            _updateApplyStep('memory', 'done', 0.3);

            _updateApplyStep('post-command', 'active'); await sleep(1300);
            _addApplySubstep('post-command', { id: 's3', title: '`bun run test` ... Passed', status: 'done' });
            _updateApplyStep('post-command', 'done', 2.3);

            _updateApplyStep('linter', 'active'); await sleep(1200);
            _addApplySubstep('linter', { id: 's4', title: '`bun run lint` ... 0 Errors', status: 'done' });
            _updateApplyStep('linter', 'done', 1.2);

            await sleep(500);

        } else { // failure scenario
            _updateApplyStep('snapshot', 'active'); await sleep(100);
            _updateApplyStep('snapshot', 'done', 0.1);

            _updateApplyStep('memory', 'active'); await sleep(100);
            _addApplySubstep('memory', { id: 'f1', title: '[✓] write: src/core/transaction.ts (strategy: replace)', status: 'done' });
            await sleep(100);
            _addApplySubstep('memory', { id: 'f2', title: '[!] failed: src/utils/logger.ts (Hunk #1 failed to apply)', status: 'failed' });
            await sleep(100);
            _addApplySubstep('memory', { id: 'f3', title: '[!] failed: src/commands/apply.ts (Context mismatch at line 92)', status: 'failed' });
            _updateApplyStep('memory', 'done', 0.5);

            await sleep(100);
            _updateApplyStep('post-command', 'skipped', undefined, 'Skipped due to patch application failure');
            await sleep(100);
            _updateApplyStep('linter', 'skipped', undefined, 'Skipped due to patch application failure');

            await sleep(500);
        }
    };


    const loadTransactionForReview = (transactionId: string) => {
        useReviewStore.getState().actions.load(transactionId);
    };


    const generateSingleFileRepairPrompt = (file: ReviewFileItem): string => {
        return `The patch failed to apply to ${file.path}. Please generate a corrected patch.

    Error: ${file.error}

    Strategy: ${file.strategy}


    ORIGINAL CONTENT:

    ---

    // ... original file content would be here ...

    ---


    FAILED PATCH:

    ---

    ${file.diff || '// ... failed diff would be here ...'}

    ---


    Please provide a corrected patch that addresses the error.`;

    };


    const tryRepairFile = (file: ReviewFileItem): ReviewFileItem => {
        const repairPrompt = generateSingleFileRepairPrompt(file);
        // In a real app: clipboardy.writeSync(repairPrompt)
        // eslint-disable-next-line no-console
        console.log(`[CLIPBOARD] Copied repair prompt for: ${file.path}`);

        // Mock: return the updated file
        return { ...file, status: 'APPROVED' as const, error: undefined, linesAdded: 5, linesRemoved: 2 };
    };


    const runBulkReapply = async (files: ReviewFileItem[]):
    Promise<ReviewFileItem[]> => {
        const failedFileIds = new Set(files.filter(f => f.status === 'FAILED').map(f => f.id));
        if (failedFileIds.size === 0) {
            return files;
        }

        await sleep(1500); // Simulate re-apply

        // Mock a mixed result
        let first = true;
        return files.map(file => {
            if (failedFileIds.has(file.id)) {
                if (first) {
                    first = false;
                    // The file coming in already has the 'RE_APPLYING' status from the store action
                    return { ...file, status: 'APPROVED' as const, strategy: 'replace' as const, error: undefined, linesAdded: 9, linesRemoved: 2 };
                }
                return { ...file, status: 'FAILED' as const, error: "'replace' failed: markers not found" };
            }
            return file;
        });
    };


    export const ReviewService = {
        loadTransactionForReview,
        generateBulkRepairPrompt,
        generateHandoffPrompt,
        performHandoff,
        runApplySimulation,
        generateSingleFileRepairPrompt,
        tryRepairFile,
        runBulkReapply,
    };
  src/stores/review.store.ts: >-
    import { create } from 'zustand';

    import { sleep } from '../utils';

    import { useAppStore } from './app.store';

    import { ReviewService } from '../services/review.service';

    import { useTransactionStore, type Transaction } from './transaction.store';

    import { moveIndex } from './navigation.utils';

    import type { ReviewFileItem } from '../types/file.types';

    import type { ScriptResult, ApplyStep, ReviewBodyView, PatchStatus } from
    '../types/review.types';


    export type { ReviewFileItem } from '../types/file.types';

    export type { ScriptResult, ApplyStep } from '../types/review.types';


    export const initialApplySteps: ApplyStep[] = [
        { id: 'snapshot', title: 'Reading initial file snapshot...', status: 'pending' },
        { id: 'memory', title: 'Applying operations to memory...', status: 'pending', substeps: [] },
        { id: 'post-command', title: 'Running post-command script...', status: 'pending', substeps: [] },
        { id: 'linter', title: 'Analyzing changes with linter...', status: 'pending', substeps: [] },
    ];


    interface ReviewState {
        // Transaction Info
        transactionId: string | null;
        patchStatus: PatchStatus;

        // File & Script Info
        files: ReviewFileItem[];
        scripts: ScriptResult[];

        // UI State
        applySteps: ApplyStep[];
        selectedItemIndex: number; // Can be file or script
        bodyView: ReviewBodyView;
        isDiffExpanded: boolean;

        // Reasoning Scroll State
        reasoningScrollIndex: number;

        // Script Navigation State
        scriptErrorIndex: number;

        actions: {
            moveSelectionUp: () => void;
            moveSelectionDown: () => void;
            toggleFileApproval: () => void;
            rejectAllFiles: () => void;
            expandDiff: () => void;
            toggleBodyView: (view: Extract<ReviewBodyView, 'diff' | 'reasoning' | 'script_output' | 'bulk_repair' | 'confirm_handoff'>) => void;
            setBodyView: (view: ReviewBodyView) => void;
            approve: () => void;
            startApplySimulation: (scenario: 'success' | 'failure') => void;

            // Repair Actions
            tryRepairFile: () => void;
            showBulkRepair: () => void;
            executeBulkRepairOption: (option: number) => Promise<void>;
            confirmHandoff: () => void;

            // Navigation Actions
            scrollReasoningUp: () => void;
            scrollReasoningDown: () => void;
            navigateScriptErrorUp: () => void;
            navigateScriptErrorDown: () => void,

            // "Private" actions for service layer
            load: (transactionId: string) => void;
            _updateApplyStep: (id: string, status: ApplyStep['status'], duration?: number, details?: string) => void;
            _addApplySubstep: (parentId: string, substep: Omit<ApplyStep, 'substeps'>) => void;
        };
    }


    export const useReviewStore = create<ReviewState>((set, get) => ({
        // Transaction Info
        transactionId: null,
        patchStatus: 'SUCCESS', // This will be set on load

        // File & Script Info
        files: [],
        scripts: [],

        // UI State
        applySteps: initialApplySteps,
        selectedItemIndex: 0,
        bodyView: 'none' as const,
        isDiffExpanded: false,

        // Reasoning Scroll State
        reasoningScrollIndex: 0,

        // Script Navigation State
        scriptErrorIndex: 0,

        actions: {
            moveSelectionUp: () => set(state => ({
                selectedItemIndex: moveIndex(state.selectedItemIndex, 'up', state.files.length + state.scripts.length),
            })),
            moveSelectionDown: () => set(state => ({
                selectedItemIndex: moveIndex(state.selectedItemIndex, 'down', state.files.length + state.scripts.length),
            })),
            toggleFileApproval: () => set(state => {
                const { selectedItemIndex, files } = state;
                if (selectedItemIndex >= files.length) return {}; // Not a file

                const newFiles = [...files];
                const file = newFiles[selectedItemIndex];
                if (file) {
                    if (file.status === 'APPROVED') {
                        file.status = 'REJECTED';
                    } else if (file.status === 'REJECTED') {
                        file.status = 'APPROVED';
                    }
                }
                return { files: newFiles };
            }),
            rejectAllFiles: () => set(state => {
                const newFiles = state.files.map(file => {
                    if (file.status === 'APPROVED') {
                        return { ...file, status: 'REJECTED' as const };
                    }
                    return file;
                });
                return { files: newFiles };
            }),
            toggleBodyView: (view) => set(state => {
                if (view === 'diff' && state.selectedItemIndex >= state.files.length) return {}; // Can't show diff for scripts
                return {
                    bodyView: state.bodyView === view ? 'none' : view,
                    isDiffExpanded: false, // Always start collapsed
                };
            }),
            setBodyView: (view) => set({ bodyView: view }),
            expandDiff: () => set(state => ({ isDiffExpanded: !state.isDiffExpanded })),
            approve: () => {
                const { transactionId } = get();
                if (transactionId) {
                    // Update transaction status to COMMITTED
                    useTransactionStore.getState().actions.updateTransactionStatus(transactionId, 'COMMITTED');
                    // Navigate back to dashboard
                    useAppStore.getState().actions.showDashboardScreen();
                }
            },
            startApplySimulation: async (scenario: 'success' | 'failure') => {
                const { showReviewProcessingScreen, showReviewScreen } = useAppStore.getState().actions;

                set({ applySteps: JSON.parse(JSON.stringify(initialApplySteps)) });
                showReviewProcessingScreen();

                await ReviewService.runApplySimulation(scenario);

                showReviewScreen();
            },

            // Repair Actions
            tryRepairFile: () => {
                set(state => {
                    const { selectedItemIndex, files } = state;
                    if (selectedItemIndex >= files.length) return {};

                    const file = files[selectedItemIndex];
                    if (file?.status === 'FAILED') {
                        const updatedFile = ReviewService.tryRepairFile(file);
                        const newFiles = [...files];
                        newFiles[selectedItemIndex] = updatedFile;
                        return { files: newFiles };
                    }
                    return {};
                });
            },
            showBulkRepair: () => get().actions.toggleBodyView('bulk_repair'),
            executeBulkRepairOption: async (option: number) => {
                const { files } = get();

                switch (option) {
                    case 1: { // Generate & Copy Bulk Repair Prompt
                        const bulkPrompt = ReviewService.generateBulkRepairPrompt(files);
                        const failedFiles = files.filter(f => f.status === 'FAILED');
                        // eslint-disable-next-line no-console
                        console.log(`[CLIPBOARD] Copied bulk repair prompt for ${failedFiles.length} files.`);
                        // In a real app, this would use clipboardy.writeSync(bulkPrompt),
                        set({ bodyView: 'none' as const });
                        break;
                    }

                    case 2: { // Attempt Bulk Re-apply
                        set({ bodyView: 'none' as const });

                        const failedFileIds = new Set(files.filter(f => f.status === 'FAILED').map(f => f.id));
                        if (failedFileIds.size === 0) {
                            break;
                        }

                        // Set intermediate state
                        set(state => ({
                            files: state.files.map(file =>
                                failedFileIds.has(file.id)
                                    ? { ...file, status: 'RE_APPLYING' as const }
                                    : file
                            ),
                        }));

                        const finalFiles = await ReviewService.runBulkReapply(get().files);
                        set({ files: finalFiles });
                        break;
                    }

                    case 3: { // Handoff to Human
                        get().actions.setBodyView('confirm_handoff');
                        break;
                    }

                    case 4: { // Reject All Failed
                        set(state => ({
                            files: state.files.map(file =>
                                file.status === 'FAILED'
                                    ? { ...file, status: 'REJECTED' as const }
                                    : file,
                            ),
                            bodyView: 'none' as const,
                        }));
                        break;
                    }

                    default: // Close modal
                        set({ bodyView: 'none' as const });
                }
            },
            confirmHandoff: () => {
                const { transactionId, files } = get();
                const transaction = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                if (!transaction) return;

                const handoffPrompt = ReviewService.generateHandoffPrompt(transaction.hash, transaction.message, transaction.reasoning || '', files);

                // eslint-disable-next-line no-console
                console.log('[CLIPBOARD] Copied Handoff Prompt.'); // In real app: clipboardy.writeSync(handoffPrompt)
                ReviewService.performHandoff(transaction.hash);
            },

            // Navigation Actions
            scrollReasoningUp: () => set(state => ({
                reasoningScrollIndex: Math.max(0, state.reasoningScrollIndex - 1),
            })),
            scrollReasoningDown: () => set(state => {
                const { transactionId } = state;
                if (!transactionId) return {};

                const transaction = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                if (!transaction?.reasoning) return {};

                const maxLines = transaction.reasoning.split('\n').length;
                return { reasoningScrollIndex: Math.min(maxLines - 1, state.reasoningScrollIndex + 1) };
            }),
            navigateScriptErrorUp: () => set(state => ({
                scriptErrorIndex: Math.max(0, state.scriptErrorIndex - 1),
            })),
            navigateScriptErrorDown: () => set(state => {
                const selectedScript = state.scripts[state.selectedItemIndex - state.files.length];
                if (selectedScript && selectedScript.output) {
                    const errorLines = selectedScript.output.split('\n').filter(line =>
                        line.includes('Error') || line.includes('Warning'),
                    );
                    return { scriptErrorIndex: Math.min(errorLines.length - 1, state.scriptErrorIndex + 1) };
                }
                return {};
            }),

            // "Private" actions for service layer
            load: (transactionId) => {
                const transaction = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                if (!transaction) return;

                // This simulates the backend determining which files failed or succeeded.
                // For this demo, tx '1' is the failure case, any other is success.
                const isFailureCase = transaction.id === '1';
                const patchStatus = isFailureCase ? 'PARTIAL_FAILURE' : 'SUCCESS';

                const reviewFiles: ReviewFileItem[] = (transaction.files || []).map((file, index) => {
                    if (isFailureCase) {
                        return {
                            ...file,
                            status: index === 0 ? 'APPROVED' : 'FAILED',
                            error: index > 0 ? (index === 1 ? 'Hunk #1 failed to apply' : 'Context mismatch at line 92') : undefined,
                            strategy: file.strategy || 'standard-diff',
                        };
                    }
                    return { ...file, status: 'APPROVED', strategy: file.strategy || 'standard-diff' };
                });

                set({
                    transactionId: transaction.id,
                    patchStatus,
                    files: reviewFiles,
                    scripts: transaction.scripts || [],
                    selectedItemIndex: 0,
                    bodyView: 'none' as const,
                    isDiffExpanded: false,
                    reasoningScrollIndex: 0,
                    scriptErrorIndex: 0,
                    applySteps: JSON.parse(JSON.stringify(initialApplySteps)), // Reset apply steps
                });
            },
            _updateApplyStep: (id, status, duration, details) => {
                set(state => ({
                    applySteps: state.applySteps.map(s => {
                        if (s.id === id) {
                            const newStep = { ...s, status };
                            if (duration !== undefined) newStep.duration = duration;
                            if (details !== undefined) newStep.details = details;
                            return newStep;
                        }
                        return s;
                    }),
                }));
            },
            _addApplySubstep: (parentId, substep) => {
                 set(state => ({
                    applySteps: state.applySteps.map(s => {
                        if (s.id === parentId) {
                            const newSubsteps = [...(s.substeps || []), substep as ApplyStep];
                            return { ...s, substeps: newSubsteps };
                        }
                        return s;
                    }),
                }));
            },
        },
    }));
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 75
