uuid: c259be24-a2fd-4a7b-a48e-d90c9b68a410
projectId: relaycode-tui
createdAt: '2025-09-25T00:56:55.026Z'
gitCommitMsg: >-
  fix(debug): resolve blank screens from debug menu

  Corrects a race condition in the debug menu actions for "Copy Mode" screens
  where state was read immediately after being set, resulting in stale data and
  an empty view.

  Also fixes the "Review Processing" debug option by adding the necessary state
  initialization call to load a transaction before transitioning to the screen.
promptSummary: >-
  The user reported that several screens accessed via the debug menu were
  appearing blank. This was due to race conditions and missing state
  initialization in the debug menu's action handlers.
reasoning:
  - >-
    I've identified a race condition in the debug menu's action handlers.
    Several actions were attempting to read state from a store immediately after
    calling another action that was supposed to set that state. Due to the
    nature of state updates, the read would get the old, stale state, causing
    components to receive `null` or empty data, resulting in a blank screen.
  - 'Here is my plan to resolve this:'
  - >-
    1.  **Refactor Debug Actions**: I will modify the actions for "Review: Copy
    Mode" and "History: Copy Mode" in `src/hooks/useDebugMenu.tsx`. Instead of
    reading the state back from the store, I will prepare the necessary data for
    the copy overlay directly from the transaction store or by using the same
    static data the state-setting action uses. This eliminates the race
    condition.
  - >-
    2.  **Fix Missing State Setup**: The "Review Processing" screen was blank
    because its debug menu action didn't set the `selectedTransactionId`
    required for the component to find its data. I will add the necessary call
    to `ReviewService.loadTransactionForReview` to properly initialize the state
    before showing the screen.
  - >-
    These changes will ensure that the debug menu correctly sets up the
    application state for each screen, resolving the blank view issues.
operations:
  - type: write
    path: src/hooks/useDebugMenu.tsx
    content: >+
      --- src/hooks/useDebugMenu.tsx

      +++ src/hooks/useDebugMenu.tsx

      @@ -107,20 +107,17 @@
                   action: () => {
                       ReviewService.loadTransactionForReview('1');
                       appActions.showReviewScreen();
      -                const { selectedTransactionId, review_selectedItemIndex:
      selectedItemIndex } = useUIStore.getState();

      -                const tx =
      useTransactionStore.getState().transactions.find(t => t.id ===
      selectedTransactionId);

      +                const tx =
      useTransactionStore.getState().transactions.find(t => t.id === '1');
                       if (!tx) return;
      -                const selectedFile = tx.files && selectedItemIndex <
      tx.files.length

      -                    ? tx.files[selectedItemIndex]

      +                // On load, selected index is 0, so we can assume the
      first file.

      +                const selectedFile = tx.files && tx.files.length > 0

      +                    ? tx.files[0]
                           : undefined;
                       const items = CopyService.getCopyItemsForReview(tx, tx.files || [], selectedFile);
                       useCopyStore.getState().actions.open(
                           'Select data to copy from review:', items);
                   },
               },
               {
                   title: 'Review: Script Output',
                   action: () => {
      @@ -137,7 +134,10 @@
               },
               {
                   title: 'Review Processing',
      -            action: () => appActions.showReviewProcessingScreen(),

      +            action: () => {

      +                ReviewService.loadTransactionForReview('2'); // Use tx
      '2' which has scripts

      +                appActions.showReviewProcessingScreen();

      +            },
               },
               {
                   title: 'Git Commit Screen',
      @@ -181,13 +181,10 @@
                   action: () => {
                       uiActions.history_prepareDebugState('copy');
                       appActions.showTransactionHistoryScreen();
      -                const { history_selectedForAction: selectedForAction } =
      useUIStore.getState();
                       const allTxs = useTransactionStore.getState().transactions;
      -                const txsToCopy = allTxs.filter((tx: Transaction) =>

      -                    selectedForAction.has(tx.id),

      -                );

      +                // The 'copy' debug state sets selectedForAction to ['3',
      '6']. We'll use that directly.

      +                const txsToCopy = allTxs.filter((tx: Transaction) =>
      ['3', '6'].includes(tx.id));
                       const items = CopyService.getCopyItemsForHistory(txsToCopy);
                       useCopyStore.getState().actions.open(
                           `Select data to copy from ${txsToCopy.length} transactions:`, items);

    patchStrategy: standard-diff
snapshot:
  src/hooks/useDebugMenu.tsx: |-
    import { useState } from 'react';
    import { useInput } from 'ink';
    import { useAppStore } from '../stores/app.store';
    import { useUIStore } from '../stores/ui.store';
    import { useInitStore } from '../stores/init.store';
    import { useCommitStore } from '../stores/commit.store';
    import { useCopyStore } from '../stores/copy.store';
    import { COPYABLE_ITEMS } from '../types/copy.types';
    import { CopyService } from '../services/copy.service';
    import { ReviewService } from '../services/review.service';
    import type { MenuItem } from '../types/debug.types';
    import { useTransactionStore } from '../stores/transaction.store';
    import type { Transaction } from '../types/domain.types';
    import { moveIndex } from '../stores/navigation.utils';
    export type { MenuItem } from '../types/debug.types';

    const useDebugMenuActions = () => {
        const { actions: appActions } = useAppStore();
        const { actions: initActions } = useInitStore();
        const { actions: commitActions } = useCommitStore();
        const { actions: uiActions } = useUIStore();

        const menuItems: MenuItem[] = [
            {
                title: 'Splash Screen',
                action: () => appActions.showSplashScreen(),
            },
            {
                title: 'Init: Analyze Phase',
                action: () => {
                    initActions.setPhase('ANALYZE');
                    appActions.showInitScreen();
                },
            },
            {
                title: 'Init: Interactive Phase',
                action: () => {
                    initActions.setPhase('INTERACTIVE');
                    appActions.showInitScreen();
                },
            },
            {
                title: 'Init: Finalize Phase',
                action: () => {
                    initActions.setPhase('FINALIZE');
                    appActions.showInitScreen();
                },
            },
            {
                title: 'Dashboard: Listening',
                action: () => {
                    uiActions.dashboard_setStatus('LISTENING');
                    appActions.showDashboardScreen();
                },
            },
            {
                title: 'Dashboard: Confirm Approve',
                action: () => {
                    uiActions.dashboard_startApproveAll();
                    appActions.showDashboardScreen();
                },
            },
            {
                title: 'Dashboard: Approving',
                action: () => {
                    uiActions.dashboard_setStatus('APPROVING');
                    appActions.showDashboardScreen();
                },
            },
            {
                title: 'Review: Partial Failure (Default)',
                action: () => {
                    ReviewService.loadTransactionForReview('1');
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Success',
                action: () => {
                    ReviewService.loadTransactionForReview('2');
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Diff View',
                action: () => {
                    ReviewService.loadTransactionForReview('1');
                    uiActions.review_setBodyView('diff');
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Reasoning View',
                action: () => {
                    ReviewService.loadTransactionForReview('1', { bodyView: 'reasoning' });
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Copy Mode',
                action: () => {
                    ReviewService.loadTransactionForReview('1');
                    appActions.showReviewScreen();
                    const { selectedTransactionId, review_selectedItemIndex: selectedItemIndex } = useUIStore.getState();
                    const tx = useTransactionStore.getState().transactions.find(t => t.id === selectedTransactionId);
                    if (!tx) return;
                    const selectedFile = tx.files && selectedItemIndex < tx.files.length
                        ? tx.files[selectedItemIndex]
                        : undefined;
                    const items = CopyService.getCopyItemsForReview(tx, tx.files || [], selectedFile);
                    useCopyStore.getState().actions.open(
                        'Select data to copy from review:', items);
                },
            },
            {
                title: 'Review: Script Output',
                action: () => {
                    ReviewService.loadTransactionForReview('2');
                    appActions.showReviewScreen();
                    uiActions.review_setBodyView('script_output');
                },
            },
            {
                title: 'Review: Bulk Repair',
                action: () => {
                    ReviewService.loadTransactionForReview('1', { bodyView: 'bulk_repair' });
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Handoff Confirm',
                action: () => {
                    ReviewService.loadTransactionForReview('1', { bodyView: 'confirm_handoff' });
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review Processing',
                action: () => appActions.showReviewProcessingScreen(),
            },
            {
                title: 'Git Commit Screen',
                action: () => {
                    commitActions.prepareCommitScreen();
                    appActions.showGitCommitScreen();
                },
            },
            {
                title: 'Transaction Detail Screen',
                action: () => {
                    // The dashboard store has transactions, we'll just pick one.
                    uiActions.detail_load('3'); // 'feat: implement new dashboard UI'
                    appActions.showTransactionDetailScreen();
                },
            },
            {
                title: 'Transaction History Screen',
                action: () => {
                    uiActions.history_load();
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: L1 Drilldown',
                action: () => {
                    uiActions.history_prepareDebugState('l1-drill');
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: L2 Drilldown (Diff)',
                action: () => {
                    uiActions.history_prepareDebugState('l2-drill');
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: Filter Mode',
                action: () => {
                    uiActions.history_prepareDebugState('filter');
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: Copy Mode',
                action: () => {
                    uiActions.history_prepareDebugState('copy');
                    appActions.showTransactionHistoryScreen();
                    const { history_selectedForAction: selectedForAction } = useUIStore.getState();
                    const allTxs = useTransactionStore.getState().transactions;
                    const txsToCopy = allTxs.filter((tx: Transaction) =>
                        selectedForAction.has(tx.id),
                    );
                    const items = CopyService.getCopyItemsForHistory(txsToCopy);
                    useCopyStore.getState().actions.open(
                        `Select data to copy from ${txsToCopy.length} transactions:`, items);
                },
            },
        ];
        return { menuItems, appActions };
    };

    export const useDebugMenu = () => {
        const [selectedIndex, setSelectedIndex] = useState(0);
        const { menuItems, appActions } = useDebugMenuActions();
        
        useInput((input, key) => {
            if (key.upArrow) {
                setSelectedIndex(i => moveIndex(i, 'up', menuItems.length));
                return;
            }
            if (key.downArrow) {
                setSelectedIndex(i => moveIndex(i, 'down', menuItems.length));
                return;
            }
            if (key.return) {
                const item = menuItems[selectedIndex];
                if (item) {
                    item.action();
                    useUIStore.getState().actions.setActiveOverlay('none');
                }
                return;
            }
            if (key.escape) {
                useUIStore.getState().actions.setActiveOverlay('none');
                return;
            }

            // No ctrl/meta keys for selection shortcuts, and only single characters
            if (key.ctrl || key.meta || input.length !== 1) return;

            if (input >= '1' && input <= '9') {
                const targetIndex = parseInt(input, 10) - 1;
                if (targetIndex < menuItems.length) {
                    setSelectedIndex(targetIndex);
                }
            } else if (input.toLowerCase() >= 'a' && input.toLowerCase() <= 'z') {
                const targetIndex = 9 + (input.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0));
                if (targetIndex < menuItems.length) {
                    setSelectedIndex(targetIndex);
                }
            }
        });

        return {
            selectedIndex,
            menuItems,
        };
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-09-25T00:57:38.007Z'
status: committed
id: 98
