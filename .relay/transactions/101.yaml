uuid: ccf7d00f-8fdd-45f8-b39b-e0691238e55e
projectId: relaycode-tui
createdAt: '2025-09-25T01:13:50.221Z'
gitCommitMsg: >-
  refactor(copy): centralize copy logic into copy.store

  Moved the responsibility of preparing and opening the copy overlay from
  individual screen hooks into the `copy.store`. This decouples the hooks from
  the `CopyService` and improves separation of concerns.

  - Added new actions to `copy.store.ts`: `openForReview`, `openForDetail`, and
  `openForHistory`. - Simplified `useReviewScreen`,
  `useTransactionDetailScreen`, and `useTransactionHistoryScreen` to call these
  new declarative actions. - Removed direct `CopyService` dependencies from the
  hooks.
promptSummary: I have executed part 3 of the refactor plan to centralize copy logic.
reasoning:
  - >-
    This is part 3 of the refactoring plan, focusing on refining the
    application's data flow and centralizing service logic within the stores.
  - >-
    The primary change is to the "Copy" feature. Previously, each screen's hook
    (`useReviewScreen`, `useTransactionDetailScreen`, etc.) was responsible for
    calling `CopyService` to generate the correct list of copyable items and
    then opening the copy overlay. This created tight coupling between the UI
    hooks and a data service.
  - >-
    This refactor centralizes this logic into `copy.store.ts`. I've introduced
    new, context-specific actions (`openForReview`, `openForDetail`,
    `openForHistory`) into the copy store. These actions now encapsulate the
    logic of calling the `CopyService` and preparing the data for the
    `CopyScreen`. The UI hooks are simplified to call these more declarative
    actions, making them cleaner and unaware of the underlying `CopyService`
    implementation. This improves separation of concerns and makes the copy
    feature easier to maintain and extend.
  - '### Step 1: Centralize Copy Logic in `copy.store.ts`'
  - >-
    I will add new actions to `copy.store.ts` that will be responsible for
    preparing and opening the copy overlay for different contexts (Review,
    Detail, History). This removes the need for UI hooks to know about the
    `CopyService`.
  - '### Step 2: Simplify `useReviewScreen` Hook'
  - >-
    Now I will update the `useReviewScreen` hook to use the new, centralized
    `openForReview` action from `copy.store.ts`, removing its direct dependency
    on `CopyService`.
  - '### Step 3: Simplify `useTransactionDetailScreen` Hook'
  - >-
    Similarly, I will update the `useTransactionDetailScreen` hook to call the
    new `openForDetail` action, decoupling it from `CopyService`.
  - '### Step 4: Simplify `useTransactionHistoryScreen` Hook'
  - >-
    Finally, I will refactor `useTransactionHistoryScreen` to use the new
    `openForHistory` action, completing the centralization of copy logic.
operations:
  - type: write
    path: src/stores/copy.store.ts
    content: >+
      --- src/stores/copy.store.ts

      +++ src/stores/copy.store.ts

      @@ -1,7 +1,9 @@
       import { create } from 'zustand';
       import { moveIndex } from './navigation.utils';
       import { useViewStore } from './view.store';
      +import { CopyService } from '../services/copy.service';
       import type { CopyItem } from '../types/copy.types';
      +import type { Transaction, FileItem } from '../types/domain.types';
       
       export type { CopyItem };
       
      @@ -16,6 +18,9 @@
           actions: {
               open: (title: string, items: CopyItem[], onClose?: () => void) => void;
               close: () => void;
      +        openForReview: (transaction: Transaction, files: FileItem[],
      selectedFile?: FileItem) => void;

      +        openForDetail: (transaction: Transaction, selectedFile?:
      FileItem) => void;

      +        openForHistory: (transactions: Transaction[]) => void;
               navigateUp: () => void;
               navigateDown: () => void;
               toggleSelection: () => void;
      @@ -47,6 +52,24 @@
                   get().onClose?.();
                   set({ items: [], onClose: undefined });
               },
      +        openForReview: (transaction, files, selectedFile) => {

      +            const { actions } = get();

      +            const title = 'Select data to copy from review:';

      +            const items = CopyService.getCopyItemsForReview(transaction,
      files, selectedFile);

      +            actions.open(title, items);

      +        },

      +        openForDetail: (transaction, selectedFile) => {

      +            const { actions } = get();

      +            const title = `Select data to copy from transaction
      ${transaction.hash}:`;

      +            const items = CopyService.getCopyItemsForDetail(transaction,
      selectedFile);

      +            actions.open(title, items);

      +        },

      +        openForHistory: (transactions) => {

      +            const { actions } = get();

      +            const title = `Select data to copy from
      ${transactions.length} transactions:`;

      +            const items =
      CopyService.getCopyItemsForHistory(transactions);

      +            actions.open(title, items);

      +        },
               navigateUp: () => set(state => ({
                   selectedIndex: moveIndex(state.selectedIndex, 'up', state.items.length),
               })),

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useReviewScreen.tsx
    content: >+
      --- src/hooks/useReviewScreen.tsx

      +++ src/hooks/useReviewScreen.tsx

      @@ -4,8 +4,7 @@
       import { useViewStore } from '../stores/view.store';
       import { useAppStore } from '../stores/app.store';
       import { useCopyStore } from '../stores/copy.store';
      -import { CopyService } from '../services/copy.service';
       import { useTransactionStore } from '../stores/transaction.store';
       import type { FileItem } from '../types/domain.types';
       
      @@ -53,10 +52,8 @@
       
           const openCopyMode = () => {
               if (!transaction) return;
      -        const title = 'Select data to copy from review:';
               const selectedFile = selectedItemIndex < files.length ? files[selectedItemIndex] : undefined;
      -        const items = CopyService.getCopyItemsForReview(transaction,
      transaction.files || [], selectedFile);

      -        useCopyStore.getState().actions.open(title, items);

      +        useCopyStore.getState().actions.openForReview(transaction,
      transaction.files || [], selectedFile);
           };
       
           // --- Input Handlers ---

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useTransactionDetailScreen.tsx
    content: >+
      --- src/hooks/useTransactionDetailScreen.tsx

      +++ src/hooks/useTransactionDetailScreen.tsx

      @@ -4,8 +4,7 @@
       import { useAppStore } from '../stores/app.store';
       import { useTransactionStore } from '../stores/transaction.store';
       import { useMemo } from 'react';
      -import { useCopyStore, type CopyItem } from '../stores/copy.store';

      -import { CopyService } from '../services/copy.service';

      +import { useCopyStore } from '../stores/copy.store';
       
       export const useTransactionDetailScreen = () => {
           const { showDashboardScreen } = useAppStore(s => s.actions);
      @@ -31,9 +30,7 @@
               if (!transaction) return;
               const { selectedFileIndex } = store;
               const selectedFile = files[selectedFileIndex];
      -        const title = `Select data to copy from transaction
      ${transaction.hash}:`;

      -        const items = CopyService.getCopyItemsForDetail(transaction,
      selectedFile);

      -        useCopyStore.getState().actions.open(title, items);

      +        useCopyStore.getState().actions.openForDetail(transaction,
      selectedFile);
           };
       
           const handleRevertConfirmInput = (input: string, key: any) => {

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useTransactionHistoryScreen.tsx
    content: >+
      --- src/hooks/useTransactionHistoryScreen.tsx

      +++ src/hooks/useTransactionHistoryScreen.tsx

      @@ -3,8 +3,7 @@
       import { useHistoryStore } from '../stores/history.store';
       import { useAppStore } from '../stores/app.store';
       import { useTransactionStore } from '../stores/transaction.store';
       import { useCopyStore } from '../stores/copy.store';
      -import { CopyService } from '../services/copy.service';
       import { getVisibleItemPaths } from '../stores/navigation.utils';
       import { useViewport } from './useViewport';
       
      @@ -26,9 +25,7 @@
               const transactionsToCopy = transactions.filter(tx => selectedForAction.has(tx.id));
       
               if (transactionsToCopy.length === 0) return;
      -        const title = `Select data to copy from
      ${transactionsToCopy.length} transactions:`;

      -        const items =
      CopyService.getCopyItemsForHistory(transactionsToCopy);

      -        useCopyStore.getState().actions.open(title, items);

      +       
      useCopyStore.getState().actions.openForHistory(transactionsToCopy);
           };
       
           const handleFilterInput = (input: string, key: any) => {

    patchStrategy: standard-diff
snapshot:
  src/stores/copy.store.ts: |-
    import { create } from 'zustand';
    import { moveIndex } from './navigation.utils';
    import { useViewStore } from './view.store';
    import type { CopyItem } from '../types/copy.types';

    export type { CopyItem };

    interface CopyState {
        title: string;
        items: CopyItem[];
        selectedIndex: number;
        selectedIds: Set<string>;
        lastCopiedMessage: string | null;
        onClose?: () => void;

        actions: {
            open: (title: string, items: CopyItem[], onClose?: () => void) => void;
            close: () => void;
            navigateUp: () => void;
            navigateDown: () => void;
            toggleSelection: () => void;
            toggleSelectionById: (id: string) => void;
            executeCopy: () => void;
        };
    }

    export const useCopyStore = create<CopyState>((set, get) => ({
        title: '',
        items: [],
        selectedIndex: 0,
        selectedIds: new Set(),
        lastCopiedMessage: null,
        onClose: undefined,

        actions: {
            open: (title, items, onClose) => {
                const defaultSelectedIds = new Set(items.filter(i => i.isDefaultSelected).map(i => i.id));
                useViewStore.getState().actions.setActiveOverlay('copy');
                set({
                    title,
                    items,
                    selectedIndex: 0,
                    selectedIds: defaultSelectedIds,
                    lastCopiedMessage: null,
                    onClose,
                });
            },
            close: () => {
                useViewStore.getState().actions.setActiveOverlay('none');
                get().onClose?.();
                set({ items: [], onClose: undefined });
            },
            navigateUp: () => set(state => ({
                selectedIndex: moveIndex(state.selectedIndex, 'up', state.items.length),
            })),
            navigateDown: () => set(state => ({
                selectedIndex: moveIndex(state.selectedIndex, 'down', state.items.length),
            })),
            toggleSelection: () => set(state => {
                const currentItem = state.items[state.selectedIndex];
                if (!currentItem) return {};
                const newSelectedIds = new Set(state.selectedIds);
                if (newSelectedIds.has(currentItem.id)) {
                    newSelectedIds.delete(currentItem.id);
                } else {
                    newSelectedIds.add(currentItem.id);
                }
                return { selectedIds: newSelectedIds };
            }),
            toggleSelectionById: (id: string) => set(state => {
                const newSelectedIds = new Set(state.selectedIds);
                if (newSelectedIds.has(id)) {
                    newSelectedIds.delete(id);
                } else {
                    newSelectedIds.add(id);
                }
                return { selectedIds: newSelectedIds };
            }),
            executeCopy: () => {
                const { items, selectedIds } = get();
                const itemsToCopy = items.filter(i => selectedIds.has(i.id));
                if (itemsToCopy.length === 0) return;

                const content = itemsToCopy.map(item => `--- ${item.label} ---\n${item.getData()}`).join('\n\n');
                const message = `Copied ${itemsToCopy.length} item(s) to clipboard.`;
                // eslint-disable-next-line no-console
                console.log(`[CLIPBOARD MOCK] ${message}\n${content.substring(0, 200)}...`);
                set({ lastCopiedMessage: message });
            },
        },
    }));
  src/hooks/useReviewScreen.tsx: |-
    import { useMemo } from 'react';
    import { useInput, useApp } from 'ink';
    import { useReviewStore } from '../stores/review.store';
    import { useViewStore } from '../stores/view.store';
    import { useAppStore } from '../stores/app.store';
    import { useCopyStore } from '../stores/copy.store';
    import { CopyService } from '../services/copy.service';
    import { useTransactionStore } from '../stores/transaction.store';
    import type { FileItem } from '../types/domain.types';

    export const useReviewScreen = () => {
        const { exit } = useApp();
        const store = useReviewStore();
        const transactionId = useViewStore(s => s.selectedTransactionId);
        const {
            selectedItemIndex,
            bodyView,
            patchStatus,
        } = store;

        const transaction = useTransactionStore(state => state.transactions.find(t => t.id === transactionId));
        const { showDashboardScreen } = useAppStore(s => s.actions);

        // Memoize files to prevent re-renders, fixing the exhaustive-deps lint warning.
        const files: FileItem[] = useMemo(() => transaction?.files || [], [transaction]);
        const fileReviewStates = useReviewStore(s => s.fileReviewStates);

        const reviewStats = useMemo(() => {
            const approvedFiles = files.filter(f => fileReviewStates.get(f.id)?.status === 'APPROVED');
            return {
                numFiles: files.length,
                approvedFilesCount: approvedFiles.length,
                approvedLinesAdded: approvedFiles.reduce((sum, f) => sum + f.linesAdded, 0),
                approvedLinesRemoved: approvedFiles.reduce((sum, f) => sum + f.linesRemoved, 0),
            };
        }, [files, fileReviewStates]);

        const scripts = transaction?.scripts || [];

        const {
            moveSelectionUp,
            moveSelectionDown,
            expandDiff,
            toggleBodyView,
            setBodyView,
            startApplySimulation,
            approve,
            tryRepairFile,
            showBulkRepair,
            executeBulkRepairOption,
            confirmHandoff,
            scrollReasoningUp,
            scrollReasoningDown,
            navigateScriptErrorUp,
            navigateScriptErrorDown,
            toggleFileApproval,
            rejectAllFiles,
        } = store.actions;

        const openCopyMode = () => {
            if (!transaction) return;
            const title = 'Select data to copy from review:';
            const selectedFile = selectedItemIndex < files.length ? files[selectedItemIndex] : undefined;
            const items = CopyService.getCopyItemsForReview(transaction, transaction.files || [], selectedFile);
            useCopyStore.getState().actions.open(title, items);
        };

        // --- Input Handlers ---

        const handleGlobalInput = (input: string, key: any) => {
            if (input === '1') { // For demo purposes
                startApplySimulation('success');
                return true;
            }
            if (input === '2') { // For demo purposes
                startApplySimulation('failure');
                return true;
            }
            if (input.toLowerCase() === 'q') {
                exit();
                return true;
            }
            if (key.escape) {
                if (bodyView === 'bulk_repair' || bodyView === 'confirm_handoff') {
                    toggleBodyView(bodyView);
                } else if (bodyView !== 'none') {
                    setBodyView('none');
                } else {
                    showDashboardScreen();
                }
                return true;
            }
            return false;
        };

        const handleHandoffConfirmInput = (input: string, key: any) => {
            if (key.return) confirmHandoff();
        };

        const handleBulkRepairInput = (input: string) => {
            if (input >= '1' && input <= '4') {
                executeBulkRepairOption(parseInt(input));
            }
        };

        const handleReasoningInput = (input: string, key: any) => {
            if (key.upArrow) scrollReasoningUp();
            if (key.downArrow) scrollReasoningDown();
            if (input.toLowerCase() === 'r') toggleBodyView('reasoning');
        };

        const handleScriptOutputInput = (input: string, key: any) => {
            if (input.toLowerCase() === 'j') navigateScriptErrorDown();
            if (input.toLowerCase() === 'k') navigateScriptErrorUp();
            if (key.return) toggleBodyView('script_output');
            if (input.toLowerCase() === 'c') {
                const scriptIndex = selectedItemIndex - reviewStats.numFiles;
                const selectedScript = scripts[scriptIndex];
                if (selectedScript) {
                    // eslint-disable-next-line no-console
                    console.log(`[CLIPBOARD] Copied script output: ${selectedScript.command}`);
                }
            }
        };

        const handleDiffInput = (input: string) => {
            if (input.toLowerCase() === 'x') expandDiff();
            if (input.toLowerCase() === 'd') toggleBodyView('diff');
        };

        const handleMainNavigationInput = (input: string, key: any) => {
            // Handle Shift+R for reject all
            if (key.shift && input.toLowerCase() === 'r') {
                if (reviewStats.approvedFilesCount > 0 && transactionId) {
                    rejectAllFiles();
                }
                return;
            }

            // Main View Navigation
            if (key.upArrow) moveSelectionUp();
            if (key.downArrow) moveSelectionDown();
            if (input.toLowerCase() === 'r') toggleBodyView('reasoning');

            if (input === ' ') {
                if (selectedItemIndex < reviewStats.numFiles) {
                    const file = files[selectedItemIndex];
                    const fileState = file ? fileReviewStates.get(file.id) : undefined;
                    if (file && fileState && fileState.status !== 'FAILED') {
                        toggleFileApproval(file.id);
                    }
                }
            }

            if (input.toLowerCase() === 'd') {
                if (selectedItemIndex < reviewStats.numFiles) {
                    toggleBodyView('diff');
                }
            }

            if (key.return) { // Enter key
                if (selectedItemIndex >= reviewStats.numFiles) { // It's a script
                    toggleBodyView('script_output');
                }
            }

            if (input.toLowerCase() === 'a') {
                if (reviewStats.approvedFilesCount > 0) {
                    approve();
                    showDashboardScreen();
                }
            }

            if (input.toLowerCase() === 'c') {
                openCopyMode();
            }

            if (input.toLowerCase() === 't') {
                if (key.shift) { // Bulk repair
                    const hasFailedFiles = Array.from(fileReviewStates.values()).some(s => s.status === 'FAILED');
                    if (hasFailedFiles) showBulkRepair();
                } else {
                    if (selectedItemIndex < reviewStats.numFiles) {
                        const file = files[selectedItemIndex];
                        const fileState = file ? fileReviewStates.get(file.id) : undefined;
                        if (file && fileState?.status === 'FAILED') tryRepairFile();
                    }
                }
            }
        };

        useInput((input, key) => {
            if (handleGlobalInput(input, key)) {
                return;
            }

            switch (bodyView) {
                case 'confirm_handoff': return handleHandoffConfirmInput(input, key);
                case 'bulk_repair': return handleBulkRepairInput(input);
                case 'reasoning': return handleReasoningInput(input, key);
                case 'script_output': return handleScriptOutputInput(input, key);
                case 'diff': return handleDiffInput(input);
                default: return handleMainNavigationInput(input, key);
            }
        });

        return {
            ...store,
            fileReviewStates,
            selectedItemIndex,
            transaction,
            files,
            scripts,
            patchStatus,
            ...reviewStats,
        };
    };
  src/hooks/useTransactionDetailScreen.tsx: |-
    import { useInput } from 'ink';
    import { useDetailStore } from '../stores/detail.store';
    import { useViewStore } from '../stores/view.store';
    import { useAppStore } from '../stores/app.store';
    import { useTransactionStore } from '../stores/transaction.store';
    import { useMemo } from 'react';
    import { useCopyStore, type CopyItem } from '../stores/copy.store';
    import { CopyService } from '../services/copy.service';

    export const useTransactionDetailScreen = () => {
        const { showDashboardScreen } = useAppStore(s => s.actions);
        const store = useDetailStore();
        const selectedTransactionId = useViewStore(s => s.selectedTransactionId);
        const {
            bodyView,
        } = store;

        const transaction = useTransactionStore(s => s.transactions.find(tx => tx.id === selectedTransactionId));
        const files = useMemo(() => transaction?.files || [], [transaction]);

        const {
            // Main nav
            navigateUp,
            navigateDown,
            handleEnterOrRight,
            handleEscapeOrLeft,
            toggleRevertConfirm,
            // Revert modal nav
            confirmRevert,
        } = store.actions;

        const openCopyMode = () => {
            if (!transaction) return;
            const { selectedFileIndex } = store;
            const selectedFile = files[selectedFileIndex];
            const title = `Select data to copy from transaction ${transaction.hash}:`;
            const items = CopyService.getCopyItemsForDetail(transaction, selectedFile);
            useCopyStore.getState().actions.open(title, items);
        };

        const handleRevertConfirmInput = (input: string, key: any) => {
            if (key.escape) toggleRevertConfirm();
            if (key.return) confirmRevert();
        };

        const handleMainInput = (input: string, key: any) => {
            if (input.toLowerCase() === 'q') {
                showDashboardScreen();
            }
            if (input.toLowerCase() === 'c') {
                openCopyMode();
            }
            if (input.toLowerCase() === 'u') {
                toggleRevertConfirm();
            }

            if (key.upArrow) navigateUp();
            if (key.downArrow) navigateDown();
            if (key.return || key.rightArrow) handleEnterOrRight();
            if (key.escape || key.leftArrow) handleEscapeOrLeft();
        };

        useInput((input, key) => {
            if (bodyView === 'REVERT_CONFIRM') {
                return handleRevertConfirmInput(input, key);
            }
            return handleMainInput(input, key);
        });

        return {
            transaction,
            files,
            navigatorFocus: store.navigatorFocus,
            expandedSection: store.expandedSection,
            selectedFileIndex: store.selectedFileIndex,
            bodyView: store.bodyView,
            actions: {
                showDashboardScreen,
            },
        };
    };
  src/hooks/useTransactionHistoryScreen.tsx: |-
    import { useMemo } from 'react';
    import { useInput } from 'ink';
    import { useHistoryStore } from '../stores/history.store';
    import { useAppStore } from '../stores/app.store';
    import { useTransactionStore } from '../stores/transaction.store';
    import { useCopyStore } from '../stores/copy.store';
    import { CopyService } from '../services/copy.service';
    import { getVisibleItemPaths } from '../stores/navigation.utils';
    import { useViewport } from './useViewport';

    export const useTransactionHistoryScreen = () => {
        const store = useHistoryStore();
        const { mode, selectedItemPath, expandedIds, filterQuery, selectedForAction, actions } = store;
        const { showDashboardScreen } = useAppStore(s => s.actions);
        const transactions = useTransactionStore(s => s.transactions);

        const visibleItemPaths = useMemo(
            () => getVisibleItemPaths(transactions, expandedIds),
            [transactions, expandedIds],
        );
        const selectedIndex = visibleItemPaths.indexOf(selectedItemPath);

        const NON_CONTENT_HEIGHT = 8; // Header, filter, separators, footer, etc.
        const { viewOffset, viewportHeight, width } = useViewport({
            selectedIndex,
            padding: NON_CONTENT_HEIGHT,
        });

        const openCopyMode = () => {
            const transactionsToCopy = transactions.filter(tx => selectedForAction.has(tx.id));

            if (transactionsToCopy.length === 0) return;
            const title = `Select data to copy from ${transactionsToCopy.length} transactions:`;
            const items = CopyService.getCopyItemsForHistory(transactionsToCopy);
            useCopyStore.getState().actions.open(title, items);
        };

        const handleFilterInput = (input: string, key: any) => {
            if (key.escape) actions.setMode('LIST');
            if (key.return) actions.applyFilter();
        };

        const handleBulkActionsInput = (input: string, key: any) => {
            if (key.escape) actions.setMode('LIST');
            // Add number handlers...
        };

        const handleListInput = (input: string, key: any) => {
            if (key.upArrow) actions.navigateUp();
            if (key.downArrow) actions.navigateDown();
            if (key.rightArrow) actions.expandOrDrillDown();
            if (key.leftArrow) actions.collapseOrBubbleUp();
            if (input === ' ') actions.toggleSelection();

            if (input.toLowerCase() === 'f') actions.setMode('FILTER');
            if (input.toLowerCase() === 'c' && selectedForAction.size > 0) openCopyMode();
            if (input.toLowerCase() === 'b' && selectedForAction.size > 0) actions.setMode('BULK_ACTIONS');
            
            if (key.escape || input.toLowerCase() === 'q') {
                showDashboardScreen();
            }
        };

        useInput((input, key) => {
            if (mode === 'FILTER') {
                handleFilterInput(input, key);
                return;
            }
            if (mode === 'BULK_ACTIONS') {
                handleBulkActionsInput(input, key);
                return;
            }
            handleListInput(input, key);
        });

        const itemsInView = visibleItemPaths.slice(viewOffset, viewOffset + viewportHeight);
        const txIdsInView = useMemo(() => new Set(itemsInView.map(p => p.split('/')[0])), [itemsInView]);
        const transactionsInView = useMemo(
            () => transactions.filter(tx => txIdsInView.has(tx.id)),
            [transactions, txIdsInView],
        );
        const pathsInViewSet = useMemo(() => new Set(itemsInView), [itemsInView]);

        const filterStatusText = filterQuery ? filterQuery : '(none)';
        const showingStatusText = `Showing ${Math.min(viewOffset + 1, visibleItemPaths.length)}-${Math.min(viewOffset + itemsInView.length, visibleItemPaths.length)} of ${visibleItemPaths.length} items`;
        
        return {
            mode,
            filterQuery,
            selectedForAction,
            selectedItemPath,
            expandedIds,
            actions,
            transactions,
            viewOffset,
            itemsInView,
            transactionsInView,
            pathsInViewSet,
            filterStatus: filterStatusText,
            showingStatus: showingStatusText,
            visibleItemPaths,
            width,
        };
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 101
