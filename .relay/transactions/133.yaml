uuid: c25c0c66-9875-47e1-8f55-1f6f87f4c000
projectId: relaycode-tui
createdAt: '2025-09-25T09:11:48.863Z'
gitCommitMsg: >-
  feat(ui): implement responsive action footer component

  Introduces a new reusable `ActionFooter` component to provide a consistent and
  responsive user experience for action hints across all screens.

  - The `ActionFooter` component automatically adjusts its layout from a single
  horizontal line to a two-column vertical layout on narrow terminals. - A new
  `ActionItem` type is defined in `src/types/actions.types.ts` for declaratively
  defining footer actions. - All major screens (`Dashboard`, `Review`,
  `Details`, `History`, `GitCommit`, `Copy`, `DebugMenu`) have been refactored
  to use this new centralized component, removing redundant layout code and
  ensuring a consistent look and feel. - Adds a new `footer` section to
  `ui.config.ts` for easy tuning of footer layout constants.
promptSummary: >-
  I need to make the action hint footers responsive to terminal width, breaking
  into multiple lines or columns when the terminal is narrow.
reasoning:
  - >-
    This is a comprehensive refactor to make all action-hint footers responsive
    to the terminal width. I've introduced a centralized `ActionFooter`
    component, defined a standard `ActionItem` type for declaring actions, and
    integrated this new system across all relevant screens. This eliminates
    redundant layout code, ensures a consistent user experience on both wide and
    narrow terminals, and makes future modifications to footers significantly
    easier.
  - First, I'll create a new type definition for footer actions.
  - >-
    Next, I'll add a configuration section to `ui.config.ts` for the new footer
    component.
  - >-
    Now, I'll create the new reusable `ActionFooter` component. This component
    contains the core logic for rendering actions horizontally on wide terminals
    and stacking them into columns on narrow ones.
  - >-
    With the core infrastructure in place, I will now integrate the
    `ActionFooter` component into all screens that have a footer.
  - Here is the update for `CopyScreen.tsx`.
  - Here is the update for `DashboardScreen.tsx`.
  - Here is the update for `DebugMenu.tsx`.
  - Here is the update for `GitCommitScreen.tsx`.
  - Here is the update for `ReviewScreen.tsx`.
  - Here is the update for `TransactionDetailScreen.tsx`.
  - Finally, here is the update for `TransactionHistoryScreen.tsx`.
operations:
  - type: write
    path: src/types/actions.types.ts
    content: |-
      /**
       * Represents a single action item for display in a responsive footer.
       */
      export interface ActionItem {
          key: string;
          label: string;
      }
    patchStrategy: replace
  - type: write
    path: src/config/ui.config.ts
    content: >+
      --- src/config/ui.config.ts

      +++ src/config/ui.config.ts

      @@ -16,4 +16,8 @@
           splash: {
               initialCountdown: 3, // Seconds before auto-skip
           },
      +    footer: {

      +        horizontalPadding: 2, // Minimum space from the left/right edges
      of the screen

      +        actionSeparator: ' · ',

      +    },
       } as const;

    patchStrategy: standard-diff
  - type: write
    path: src/components/ActionFooter.tsx
    content: |-
      import { Box, Text } from 'ink';
      import { useStdoutDimensions } from '../utils';
      import { UI_CONFIG } from '../config/ui.config';
      import type { ActionItem } from '../types/actions.types';

      interface ActionFooterProps {
          actions: ActionItem[];
      }

      const Action = ({ item }: { item: ActionItem }) => (
          <Text>
              (<Text color="cyan" bold>{item.key}</Text>) {item.label}
          </Text>
      );

      const ActionFooter = ({ actions }: ActionFooterProps) => {
          const [width] = useStdoutDimensions();
          const { horizontalPadding, actionSeparator } = UI_CONFIG.footer;

          const formattedActions = actions.map(a => `(${a.key}) ${a.label}`);
          const requiredWidth = formattedActions.join(actionSeparator).length;

          // Render horizontally if it fits
          if (requiredWidth <= width - horizontalPadding * 2) {
              return (
                  <Box>
                      {actions.map((item, index) => (
                          <Text key={item.key}>
                              <Action item={item} />
                              {index < actions.length - 1 && <Text>{actionSeparator}</Text>}
                          </Text>
                      ))}
                  </Box>
              );
          }

          // Render in two columns if it doesn't fit horizontally
          const midPoint = Math.ceil(actions.length / 2);
          const leftColumn = actions.slice(0, midPoint);
          const rightColumn = actions.slice(midPoint);

          // Calculate max width for left column to align columns nicely
          const leftColumnMaxWidth = Math.max(...leftColumn.map(a => `(${a.key}) ${a.label}`.length));

          return (
              <Box flexDirection="row" width="100%">
                  <Box flexDirection="column" width={`${leftColumnMaxWidth + 4}px`}>
                      {leftColumn.map(item => <Action key={item.key} item={item} />)}
                  </Box>
                  <Box flexDirection="column">
                      {rightColumn.map(item => <Action key={item.key} item={item} />)}
                  </Box>
              </Box>
          );
      };

      export default ActionFooter;
    patchStrategy: replace
  - type: write
    path: src/components/CopyScreen.tsx
    content: >+
      --- src/components/CopyScreen.tsx

      +++ src/components/CopyScreen.tsx

      @@ -2,6 +2,7 @@
       import { useCopyStore } from '../stores/copy.store';
       import Separator from './Separator';
       import { useViewStore } from '../stores/view.store';
       import { useStdoutDimensions } from '../utils';
      +import ActionFooter from './ActionFooter';
       
       const CopyScreen = () => {
           const activeOverlay = useViewStore(s => s.activeOverlay);
      @@ -52,7 +53,12 @@
                       </Box>
                       <Separator width={Math.floor(width * 0.8) - 4} />
                       {lastCopiedMessage && <Text color="green">✓ {lastCopiedMessage}</Text>}
      -                <Text>(↑↓) Nav · (Spc/Hotkey) Toggle · (Enter) Copy ·
      (Esc) Close</Text>

      +                <ActionFooter actions={[

      +                    { key: '↑↓', label: 'Nav' },

      +                    { key: 'Spc/Hotkey', label: 'Toggle' },

      +                    { key: 'Enter', label: 'Copy' },

      +                    { key: 'Esc', label: 'Close' },

      +                ]}/>
                   </Box>
               </Box>
           );

    patchStrategy: standard-diff
  - type: write
    path: src/components/DashboardScreen.tsx
    content: "--- src/components/DashboardScreen.tsx\n+++ src/components/DashboardScreen.tsx\n@@ -4,6 +4,8 @@\n import Separator from './Separator';\n import type { Transaction, TransactionStatus, FileChangeType } from '../types/domain.types';\n import { useDashboardScreen } from '../hooks/useDashboardScreen';\n import { UI_CONFIG } from '../config/ui.config';\n+import ActionFooter from './ActionFooter';\n+import type { ActionItem } from '../types/actions.types';\n \n // --- Sub-components & Helpers ---\n \n@@ -156,26 +158,23 @@\n \n     const renderFooter = () => {\n         if (isModal) return (\n-            <Text>\n-                (<Text color=\"cyan\" bold>Enter</Text>) Confirm      (<Text color=\"cyan\" bold>Esc</Text>) Cancel\n-            </Text>\n+            <ActionFooter actions={[\n+                { key: 'Enter', label: 'Confirm' },\n+                { key: 'Esc', label: 'Cancel' },\n+            ]}/>\n         );\n         if (isProcessing) return <Text>Processing... This may take a moment.</Text>;\n \n-        const pauseAction = status === 'PAUSED'\n-\t\t\t? <Text>(<Text color=\"cyan\" bold>P</Text>)resume</Text>\n-\t\t\t: <Text>(<Text color=\"cyan\" bold>P</Text>)ause</Text>;\n-\t\treturn (\n-            <Box>\n-                <Text color=\"gray\">(<Text color=\"cyan\" bold>↑↓</Text>) Nav · (<Text color=\"cyan\" bold>→</Text>/Ent) View · </Text>\n-                <Text color=\"gray\">(<Text color=\"cyan\" bold>←</Text>) Collapse · (<Text color=\"cyan\" bold>L</Text>)og · </Text>\n-                <Text color=\"gray\">(<Text color=\"cyan\" bold>A</Text>)pprove All · (<Text color=\"cyan\" bold>C</Text>)ommit · </Text>\n-                <Text color=\"gray\">{pauseAction} · (<Text color=\"cyan\" bold>Q</Text>)uit</Text>\n-            </Box>\n-        );\n+        const footerActions: ActionItem[] = [\n+            { key: '↑↓', label: 'Nav' },\n+            { key: '→/Ent', label: 'View' },\n+            { key: '←', label: 'Collapse' },\n+            { key: 'L', label: 'Log' },\n+            { key: 'A', label: 'Approve All' },\n+            { key: 'C', label: 'Commit' },\n+            { key: 'P', label: status === 'PAUSED' ? 'Resume' : 'Pause' },\n+            { key: 'Q', label: 'Quit' },\n+        ];\n+\t\treturn <ActionFooter actions={footerActions} />;\n     };\n     \n     return (\n\n"
    patchStrategy: standard-diff
  - type: write
    path: src/components/DebugMenu.tsx
    content: >+
      --- src/components/DebugMenu.tsx

      +++ src/components/DebugMenu.tsx

      @@ -2,6 +2,7 @@
       import Separator from './Separator';
       import { useDebugMenu } from '../hooks/useDebugMenu';
       import { useStdoutDimensions } from '../utils';
      +import ActionFooter from './ActionFooter';
       
       const getKeyForIndex = (index: number): string => {
           if (index < 9) {
      @@ -29,7 +30,12 @@
                       ))}
                   </Box>
                   <Separator width={width - 4} />
      -            <Text>(↑↓) Nav · (1-9,a-z) Jump · (Enter) Select · (Esc /
      Ctrl+B) Close</Text>

      +            <ActionFooter actions={[

      +                { key: '↑↓', label: 'Nav' },

      +                { key: '1-9,a-z', label: 'Jump' },

      +                { key: 'Enter', label: 'Select' },

      +                { key: 'Esc/Ctrl+B', label: 'Close' },

      +            ]}/>
               </Box>
           );
       };

    patchStrategy: standard-diff
  - type: write
    path: src/components/GitCommitScreen.tsx
    content: >+
      --- src/components/GitCommitScreen.tsx

      +++ src/components/GitCommitScreen.tsx

      @@ -2,16 +2,13 @@
       import Spinner from 'ink-spinner';
       import Separator from './Separator';
       import { useGitCommitScreen } from '../hooks/useGitCommitScreen';
      +import ActionFooter from './ActionFooter';
       
       const GitCommitScreen = () => {
           const { transactionsToCommit, finalCommitMessage, isCommitting } = useGitCommitScreen();
       
           const transactionLines = transactionsToCommit.map(tx => (
               <Text key={tx.id}>- {tx.hash}: {tx.message}</Text>
      -    ));

      -

      -    const footer = isCommitting

      -        ? <Text><Spinner type="dots"/> Committing... please wait.</Text>

      -        : <Text>(Enter) Confirm & Commit      (Esc) Cancel</Text>;

      +    ));
       
           return (
               <Box flexDirection="column">
      @@ -32,7 +29,14 @@
                        <Text>This will run &apos;git add .&apos; and &apos;git commit&apos; with the message above.</Text>
                   </Box>
                   <Separator />
      -            {footer}

      +            {isCommitting

      +                ? <Text><Spinner type="dots"/> Committing... please
      wait.</Text>

      +                : <ActionFooter actions={[

      +                    { key: 'Enter', label: 'Confirm & Commit' },

      +                    { key: 'Esc', label: 'Cancel' },

      +                ]}/>

      +            }
               </Box>
           );
       };

    patchStrategy: standard-diff
  - type: write
    path: src/components/ReviewScreen.tsx
    content: >+
      --- src/components/ReviewScreen.tsx

      +++ src/components/ReviewScreen.tsx

      @@ -4,6 +4,8 @@
       import ReasonScreen from './ReasonScreen';
       import type { ScriptResult, FileItem, FileChangeType } from '../types/domain.types';
       import { useReviewScreen } from '../hooks/useReviewScreen';
      +import ActionFooter from './ActionFooter';

      +import type { ActionItem } from '../types/actions.types';
       
       // --- Sub-components ---
       
      @@ -319,63 +321,79 @@
           const renderFooter = () => {
               // Contextual footer for body views
               if (bodyView === 'diff') {
      -            return <Text>(↑↓) Nav · (X)pand · (D/Esc) Back</Text>;

      +            return <ActionFooter actions={[

      +                { key: '↑↓', label: 'Nav' },

      +                { key: 'X', label: 'Expand' },

      +                { key: 'D/Esc', label: 'Back' },

      +            ]}/>;
               }
               if (bodyView === 'reasoning') {
      -            return <Text>(↑↓) Scroll Text · (R)Collapse View · (C)opy
      Mode</Text>;

      +            return <ActionFooter actions={[

      +                { key: '↑↓', label: 'Scroll Text' },

      +                { key: 'R', label: 'Collapse View' },

      +                { key: 'C', label: 'Copy Mode' },

      +            ]}/>;
               }
               if (bodyView === 'script_output') {
      -            return (

      -                <Text>(↑↓) Nav · (J↓/K↑) Next/Prev Error · (C)opy Output
      · (Ent/Esc) Back</Text>

      -            );

      +            return <ActionFooter actions={[

      +                { key: '↑↓', label: 'Nav' },

      +                { key: 'J↓/K↑', label: 'Next/Prev Error' },

      +                { key: 'C', label: 'Copy Output' },

      +                { key: 'Ent/Esc', label: 'Back' },

      +            ]}/>;
               }
               if (bodyView === 'bulk_repair') {
      -            return <Text>Choose an option [1-4, Esc]:</Text>;

      +            return <Text>Use (↑↓) Nav · (Enter) Select · (1-4) Jump ·
      (Esc) Cancel</Text>;
               }
               if (bodyView === 'bulk_instruct') {
      -            return <Text>Choose an option [1-4, Esc]:</Text>;

      +            return <Text>Use (↑↓) Nav · (Enter) Select · (1-4) Jump ·
      (Esc) Cancel</Text>;
               }
               if (bodyView === 'confirm_handoff') {
      -            return <Text>(Enter) Confirm Handoff      (Esc)
      Cancel</Text>;

      +            return <ActionFooter actions={[

      +                { key: 'Enter', label: 'Confirm Handoff' },

      +                { key: 'Esc', label: 'Cancel' },

      +            ]}/>;
               }
       
               // Main footer
      -        const actions = ['(↑↓) Nav'];

      +        const actions: ActionItem[] = [{ key: '↑↓', label: 'Nav' }];
       
               const currentItem = navigableItems[selectedItemIndex];
               
               if (currentItem?.type === 'file') {
                   const selectedFile = files.find(f => f.id === currentItem.id);
                   const fileState = fileReviewStates.get(currentItem.id);
                   if (fileState?.status !== 'FAILED') {
      -                actions.push('(Spc) Toggle');

      -            }

      -            actions.push('(D)iff');

      +                actions.push({ key: 'Spc', label: 'Toggle' });

      +            }

      +            actions.push({ key: 'D', label: 'Diff' });
                   
                   // Add repair options for failed files
                   if (selectedFile && fileState?.status === 'FAILED') {
      -                actions.push('(T)ry Repair');

      +                actions.push({ key: 'T', label: 'Try Repair' });
                   }
                   if (selectedFile && fileState?.status === 'REJECTED') {
      -                actions.push('(I)nstruct');

      +                actions.push({ key: 'I', label: 'Instruct' });
                   }
               } else if (currentItem?.type === 'script') {
      -            actions.push('(Ent) Expand Details');

      +            actions.push({ key: 'Ent', label: 'Expand Details' });
               } else { // Prompt or Reasoning
      -            actions.push('(Ent) Expand');

      +            actions.push({ key: 'Ent', label: 'Expand' });
               }
       
               if (currentItem?.type !== 'reasoning') {
      -            actions.push('(R)easoning');

      +            actions.push({ key: 'R', label: 'Reasoning' });
               }
       
               // Add bulk repair if there are failed files
               const hasFailedFiles = Array.from(fileReviewStates.values()).some(s => s.status === 'FAILED');
               if (hasFailedFiles) {
      -            actions.push('(Shift+T) Bulk Repair');

      +            actions.push({ key: 'Shift+T', label: 'Bulk Repair' });
               }
               // Add bulk instruct if there are rejected files
               if (hasRejectedFiles) {
      -            actions.push('(Shift+I) Bulk Instruct');

      -        }

      -        

      -        actions.push('(C)opy');

      +            actions.push({ key: 'Shift+I', label: 'Bulk Instruct' });

      +        }

      +        

      +        actions.push({ key: 'C', label: 'Copy' });
       
               if (approvedFilesCount > 0) {
      -            actions.push('(A)pprove');

      +            actions.push({ key: 'A', label: 'Approve' });
               }
       
               if (Array.from(fileReviewStates.values()).some(s => s.status === 'APPROVED' || s.status === 'FAILED')) {
      -            actions.push('(Shift+R) Reject All');

      -        }

      -        actions.push('(Q)uit');

      -

      -        return <Text>{actions.join(' · ')}</Text>;

      +            actions.push({ key: 'Shift+R', label: 'Reject All' });

      +        }

      +        actions.push({ key: 'Q', label: 'Quit' });

      +

      +        return <ActionFooter actions={actions} />;
           };
       
           return (

    patchStrategy: standard-diff
  - type: write
    path: src/components/TransactionDetailScreen.tsx
    content: >+
      --- src/components/TransactionDetailScreen.tsx

      +++ src/components/TransactionDetailScreen.tsx

      @@ -4,6 +4,8 @@
       import ReasonScreen from './ReasonScreen';
       import { useTransactionDetailScreen } from '../hooks/useTransactionDetailScreen';
       import type { FileChangeType } from '../types/domain.types';
      +import ActionFooter from './ActionFooter';

      +import type { ActionItem } from '../types/actions.types';
       
       const getFileChangeTypeIcon = (type: FileChangeType) => {
           switch (type) {
      @@ -113,31 +115,44 @@
       
           const renderFooter = () => {
               if (bodyView === 'REVERT_CONFIRM') {
      -            return <Text>(Enter) Confirm Revert      (Esc) Cancel</Text>;

      -        }

      -        

      -        const baseActions = ['(↑↓) Nav', '(C)opy', '(U)ndo',
      '(Q)uit/Back'];

      +            return <ActionFooter actions={[

      +                { key: 'Enter', label: 'Confirm Revert' },

      +                { key: 'Esc', label: 'Cancel' },

      +            ]} />;

      +        }

      +        

      +        const baseActions: ActionItem[] = [

      +            { key: 'C', label: 'Copy' },

      +            { key: 'U', label: 'Undo' },

      +            { key: 'Q', label: 'Quit/Back' },

      +        ];

      +        let contextualActions: ActionItem[] = [];
       
               if (focusedItemPath.includes('/')) { // Is a file
                   if (bodyView === 'DIFF_VIEW') {
      -                return <Text>(↑↓) Nav Files · (←) Back to List ·
      {baseActions.slice(1).join(' · ')}</Text>;

      +                contextualActions = [

      +                    { key: '↑↓', label: 'Nav Files' },

      +                    { key: '←', label: 'Back to List' },

      +                ];

      +            } else {

      +                contextualActions = [

      +                    { key: '↑↓', label: 'Nav Files' },

      +                    { key: '→', label: 'View Diff' },

      +                    { key: '←', label: 'Back to Sections' },

      +                ];
                   }
      -            return <Text>(↑↓) Nav Files · (→) View Diff · (←) Back to
      Sections · {baseActions.slice(1).join(' · ')}</Text>;

      +            return <ActionFooter actions={[...contextualActions,
      ...baseActions]} />;
               }
               
               if (expandedItemPaths.has(focusedItemPath)) {
      -            return <Text>(↑↓) Nav/Scroll · (→) Drill In · (←) Collapse ·
      {baseActions.slice(1).join(' · ')}</Text>;

      -        }

      -        

      -        return <Text>(↑↓) Nav · (→) Expand · {baseActions.slice(1).join('
      · ')}</Text>;

      +            contextualActions = [

      +                { key: '↑↓', label: 'Nav/Scroll' },

      +                { key: '→', label: 'Drill In' },

      +                { key: '←', label: 'Collapse' },

      +            ];

      +        } else {

      +            contextualActions = [

      +                { key: '↑↓', label: 'Nav' },

      +                { key: '→', label: 'Expand' },

      +            ];

      +        }

      +        return <ActionFooter actions={[...contextualActions,
      ...baseActions]} />;
           };
       
           const { message, timestamp, status } = transaction;

    patchStrategy: standard-diff
  - type: write
    path: src/components/TransactionHistoryScreen.tsx
    content: >+
      --- src/components/TransactionHistoryScreen.tsx

      +++ src/components/TransactionHistoryScreen.tsx

      @@ -5,6 +5,8 @@
       import type { Transaction, FileItem } from '../types/domain.types';
       import { useTransactionHistoryScreen } from '../hooks/useTransactionHistoryScreen';
       import { UI_CONFIG } from '../config/ui.config';
      +import ActionFooter from './ActionFooter';

      +import type { ActionItem } from '../types/actions.types';
       
       // --- Sub-components ---
       
      @@ -142,15 +144,24 @@
       
           const renderFooter = () => {
               if (mode === 'FILTER') return <Text>(Enter) Apply Filter & Return      (Esc) Cancel</Text>; 
      -        if (mode === 'BULK_ACTIONS') return <Text>Choose an option [1-3,
      Esc]:</Text>;

      -        

      -        const footerActions = ['(↑↓) Nav', '(→) Expand', '(←) Collapse',
      '(Spc) Select', '(Ent) Details', '(F)ilter'];

      +        if (mode === 'BULK_ACTIONS') return <Text>Choose an option [1-3]
      or (Esc) Cancel</Text>;

      +        

      +        const footerActions: ActionItem[] = [

      +            { key: '↑↓', label: 'Nav' },

      +            { key: '→', label: 'Expand' },

      +            { key: '←', label: 'Collapse' },

      +            { key: 'Spc', label: 'Select' },

      +            { key: 'Ent', label: 'Details' },

      +            { key: 'F', label: 'Filter' },

      +        ];

      +
               if (selectedForAction.size > 0) {
      -            footerActions.push('(C)opy', '(B)ulk');

      -        }

      -        return <Text>{footerActions.join(' · ')}</Text>;

      +            footerActions.push({ key: 'C', label: 'Copy' }, { key: 'B',
      label: 'Bulk' });

      +        }

      +        return <ActionFooter actions={footerActions} />;
           };
       
           return (

    patchStrategy: standard-diff
snapshot:
  src/types/actions.types.ts: null
  src/components/ActionFooter.tsx: null
  src/config/ui.config.ts: |-
    /**
     * Centralized UI configuration.
     * This object is the single source of truth for layout constants, thresholds,
     * and other UI-related magic numbers.
     */
    export const UI_CONFIG = {
        diffScreen: {
            collapseThreshold: 20, // Lines before collapsing
            collapseShowLines: 8,  // Lines to show at top/bottom when collapsed
        },
        dashboard: {
            reservedRows: 9, // Non-event stream vertical space (header, footer, etc.)
        },
        history: {
            reservedRows: 8, // Non-content vertical space (header, footer, filter)
        },
        splash: {
            initialCountdown: 3, // Seconds before auto-skip
        },
    } as const;
  src/components/CopyScreen.tsx: |-
    import { Box, Text, useInput } from 'ink';
    import { useCopyStore } from '../stores/copy.store';
    import Separator from './Separator';
    import { useViewStore } from '../stores/view.store';
    import { useStdoutDimensions } from '../utils';

    const CopyScreen = () => {
        const activeOverlay = useViewStore(s => s.activeOverlay);
        const {
            title, items, selectedIndex, selectedIds, lastCopiedMessage,
            actions,
        } = useCopyStore(state => ({ ...state, actions: state.actions }));

        useInput((input, key) => {
            if (key.escape) {
                actions.close();
                return;
            }
            if (key.upArrow) {
                actions.navigateUp();
                return;
            }
            if (key.downArrow) {
                actions.navigateDown();
                return;
            }
            if (input === ' ') {
                actions.toggleSelection();
                return;
            }
            if (key.return) {
                actions.executeCopy();
                return;
            }
            
            const item = items.find(i => i.key.toLowerCase() === input.toLowerCase());
            if(item) {
                actions.toggleSelectionById(item.id);
            }
        }, { isActive: activeOverlay === 'copy' });
        const [width] = useStdoutDimensions();

        return (
            <Box 
                width="100%"
                height="100%"
                flexDirection="column"
                justifyContent="center"
                alignItems="center"
            >
                <Box 
                    flexDirection="column" 
                    borderStyle="round" 
                    borderColor="yellow" 
                    paddingX={2}
                    width="80%"
                >
                    <Text bold color="yellow">▲ relaycode · copy mode</Text>
                    <Separator width={Math.floor(width * 0.8) - 4} />
                    <Box flexDirection="column" marginY={1}>
                        <Text>{title}</Text>
                        <Box flexDirection="column" marginTop={1}>
                            {items.map((item, index) => {
                                const isSelected = index === selectedIndex;
                                const isChecked = selectedIds.has(item.id);
                                return (
                                    <Text key={item.id} color={isSelected ? 'cyan' : undefined}>
                                        {isSelected ? '> ' : '  '}
                                        [{isChecked ? 'x' : ' '}] ({item.key}) {item.label}
                                    </Text>
                                );
                            })}
                        </Box>
                    </Box>
                    <Separator width={Math.floor(width * 0.8) - 4} />
                    {lastCopiedMessage && <Text color="green">✓ {lastCopiedMessage}</Text>}
                    <Text>(↑↓) Nav · (Spc/Hotkey) Toggle · (Enter) Copy · (Esc) Close</Text>
                </Box>
            </Box>
        );
    };

    export default CopyScreen;
  src/components/DashboardScreen.tsx: "import React from 'react';\nimport { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport Separator from './Separator';\nimport type { Transaction, TransactionStatus, FileChangeType } from '../types/domain.types';\nimport { useDashboardScreen } from '../hooks/useDashboardScreen';\nimport { UI_CONFIG } from '../config/ui.config';\n\n// --- Sub-components & Helpers ---\n\nconst getStatusIcon = (status: TransactionStatus) => {\n    switch (status) {\n        case 'PENDING': return <Text color=\"yellow\">?</Text>;\n        case 'APPLIED': return <Text color=\"green\">✓</Text>;\n        case 'COMMITTED': return <Text color=\"blue\">→</Text>;\n        case 'HANDOFF': return <Text color=\"magenta\">→</Text>;\n        case 'FAILED': return <Text color=\"red\">✗</Text>;\n        case 'REVERTED': return <Text color=\"gray\">↩</Text>;\n        case 'IN-PROGRESS': return <Spinner type=\"dots\" />;\n        default: return <Text> </Text>;\n    }\n};\n\nconst getFileChangeTypeIcon = (type: FileChangeType) => {\n    switch (type) {\n        case 'MOD': return '[MOD]';\n        case 'ADD': return '[ADD]';\n        case 'DEL': return '[DEL]';\n        case 'REN': return '[REN]';\n    }\n};\n\nconst formatTimeAgo = (timestamp: number) => {\n    const seconds = Math.floor((Date.now() - timestamp) / 1000);\n    if (seconds < 60) return `${seconds}s`;\n    const minutes = Math.floor(seconds / 60);\n    return `${minutes}m`;\n};\n\nconst ExpandedEventInfo = ({ transaction }: { transaction: Transaction }) => {\n    const stats = transaction.stats;\n    const files = transaction.files || [];\n\n    return (\n        <Box flexDirection=\"column\" paddingLeft={4} marginBottom={1} borderStyle=\"round\" borderLeft={true} borderTop={false} borderRight={false} borderBottom={false} borderColor=\"gray\">\n            {stats && (\n                <Text color=\"gray\">\n                    Stats: {stats.files} files, +{stats.linesAdded}/-{stats.linesRemoved}\n                </Text>\n            )}\n             <Box flexDirection=\"column\" paddingLeft={1}>\n                {files.map(file => (\n                     <Text key={file.id}>\n                        <Text color=\"gray\">{getFileChangeTypeIcon(file.type)}</Text> {file.path}\n                    </Text>\n                ))}\n             </Box>\n        </Box>\n    );\n};\n\nconst EventStreamItem = ({ transaction, isSelected, isExpanded }: { transaction: Transaction, isSelected: boolean, isExpanded: boolean }) => {\n    const icon = getStatusIcon(transaction.status);\n    const time = formatTimeAgo(transaction.timestamp).padEnd(5, ' ');\n    const statusText = transaction.status.padEnd(11, ' ');\n    const expandIcon = isExpanded ? '▾' : '▸';\n    \n    const messageNode = transaction.status === 'IN-PROGRESS'\n        ? <Text color=\"cyan\">{transaction.message}</Text>\n        : transaction.message;\n    \n    const content = (\n        <Text>\n            {time} {expandIcon} {icon} {statusText} <Text color=\"gray\">{transaction.hash}</Text> · {messageNode}\n        </Text>\n    );\n\n    return isSelected ? <Text bold color=\"cyan\">{'> '}{content}</Text> : <Text>{'  '}{content}</Text>;\n};\n\nconst ConfirmationContent = ({\n    transactionsToConfirm,\n}: {\n    transactionsToConfirm: Transaction[];\n}) => {\n    const actionText = 'APPROVE';\n    \n    return (\n        <Box flexDirection=\"column\" marginY={1} paddingLeft={2}>\n            <Text bold color=\"yellow\">{actionText} ALL PENDING TRANSACTIONS?</Text>\n            <Text>\n                The following {transactionsToConfirm.length} transaction(s) will be approved:\n            </Text>\n            <Box flexDirection=\"column\" paddingLeft={1} marginTop={1}>\n                {transactionsToConfirm.map(tx => (\n                    <Text key={tx.id}>- {tx.hash}: {tx.message}</Text>\n                ))}\n            </Box>\n        </Box>\n    );\n};\n\n// --- Main Component ---\n\nconst DashboardScreen = () => {\n    const {\n        status,\n        transactions,\n        selectedTransactionIndex,\n        pendingApprovals,\n        pendingCommits,\n        isModal,\n        isProcessing,\n        viewOffset,\n        viewportHeight,\n        transactionsToConfirm,\n        expandedTransactionId,\n    } = useDashboardScreen({ reservedRows: UI_CONFIG.dashboard.reservedRows });\n\n    const renderStatusBar = () => {\n        let statusText: string;\n        let statusIcon: React.ReactNode;\n        switch (status) {\n            case 'LISTENING': statusText = 'LISTENING'; statusIcon = <Text color=\"green\">●</Text>; break;\n            case 'PAUSED': statusText = 'PAUSED'; statusIcon = <Text color=\"yellow\">||</Text>; break;\n            case 'APPROVING': statusText = 'APPROVING...'; statusIcon = <Text color=\"cyan\"><Spinner type=\"dots\"/></Text>; break;\n            default: statusText = 'LISTENING'; statusIcon = <Text color=\"green\">●</Text>;\n        }\n\n        let approvalStr: React.ReactNode = String(pendingApprovals).padStart(2, '0');\n        const commitStr: React.ReactNode = String(pendingCommits).padStart(2, '0');\n\n        if (status === 'APPROVING') approvalStr = <Text color=\"cyan\">(<Spinner type=\"dots\"/>)</Text>;\n        if (status === 'CONFIRM_APPROVE') {\n            approvalStr = <Text bold color=\"yellow\">┌ {approvalStr} ┐</Text>;\n        }\n        \n        return (\n            <Text>\n                STATUS: {statusIcon} {statusText} · APPROVALS: {approvalStr} · COMMITS: {commitStr}\n            </Text>\n        );\n    };\n\n    const renderFooter = () => {\n        if (isModal) return (\n            <Text>\n                (<Text color=\"cyan\" bold>Enter</Text>) Confirm      (<Text color=\"cyan\" bold>Esc</Text>) Cancel\n            </Text>\n        );\n        if (isProcessing) return <Text>Processing... This may take a moment.</Text>;\n\n        const pauseAction = status === 'PAUSED'\n\t\t\t? <Text>(<Text color=\"cyan\" bold>P</Text>)resume</Text>\n\t\t\t: <Text>(<Text color=\"cyan\" bold>P</Text>)ause</Text>;\n\t\treturn (\n            <Box>\n                <Text color=\"gray\">(<Text color=\"cyan\" bold>↑↓</Text>) Nav · (<Text color=\"cyan\" bold>→</Text>/Ent) View · </Text>\n                <Text color=\"gray\">(<Text color=\"cyan\" bold>←</Text>) Collapse · (<Text color=\"cyan\" bold>L</Text>)og · </Text>\n                <Text color=\"gray\">(<Text color=\"cyan\" bold>A</Text>)pprove All · (<Text color=\"cyan\" bold>C</Text>)ommit · </Text>\n                <Text color=\"gray\">{pauseAction} · (<Text color=\"cyan\" bold>Q</Text>)uit</Text>\n            </Box>\n        );\n    };\n    \n    return (\n        <Box flexDirection=\"column\" height=\"100%\">\n            <Text color=\"cyan\">▲ relaycode dashboard</Text>\n            <Separator />\n            <Box marginY={1}>\n                {renderStatusBar()}\n            </Box>\n            \n            {isModal && (\n                <>\n                    <ConfirmationContent transactionsToConfirm={transactionsToConfirm} />\n                    <Separator />\n                </>\n            )}\n            \n            <Text bold underline> EVENT STREAM (Last 15 minutes)</Text>\n            <Box flexDirection=\"column\" marginTop={1}>\n                {transactions.length === 0 && (\n                     <Box paddingLeft={2}><Text color=\"gray\">Listening for changes... no events yet.</Text></Box>\n                )}\n                {transactions.slice(viewOffset, viewOffset + viewportHeight).map((tx, index) => {\n                    const actualIndex = viewOffset + index;\n                    const isExpanded = expandedTransactionId === tx.id;\n                    return (\n                        <React.Fragment key={tx.id}>\n                            <EventStreamItem\n                                transaction={tx}\n                                isSelected={!isModal && actualIndex === selectedTransactionIndex}\n                                isExpanded={isExpanded}\n                            />\n                            {isExpanded && <ExpandedEventInfo transaction={tx} />}\n                        </React.Fragment>\n                    );\n                })}\n            </Box>\n\n            <Box marginTop={1}><Separator /></Box>\n            {renderFooter()}\n        </Box>\n    );\n};\n\nexport default DashboardScreen;"
  src/components/DebugMenu.tsx: |-
    import { Box, Text } from 'ink';
    import Separator from './Separator';
    import { useDebugMenu } from '../hooks/useDebugMenu';
    import { useStdoutDimensions } from '../utils';

    const getKeyForIndex = (index: number): string => {
        if (index < 9) {
            return (index + 1).toString();
        }
        return String.fromCharCode('a'.charCodeAt(0) + (index - 9));
    };

    const DebugMenu = () => {
        const { selectedIndex, menuItems } = useDebugMenu();
        const [width] = useStdoutDimensions();

        return (
            <Box
                flexDirection="column"
                borderStyle="round"
                borderColor="yellow"
                width="100%"
                paddingX={2}
            >
                <Text bold color="yellow">▲ relaycode · DEBUG MENU</Text>
                <Separator width={width - 4} />
                <Box flexDirection="column" marginY={1}>
                    {menuItems.map((item, index) => (
                        <Text key={item.title} color={selectedIndex === index ? 'cyan' : undefined}>
                            {selectedIndex === index ? '> ' : '  '}
                            ({getKeyForIndex(index)}) {item.title}
                        </Text>
                    ))}
                </Box>
                <Separator width={width - 4} />
                <Text>(↑↓) Nav · (1-9,a-z) Jump · (Enter) Select · (Esc / Ctrl+B) Close</Text>
            </Box>
        );
    };

    export default DebugMenu;
  src/components/GitCommitScreen.tsx: |-
    import { Box, Text } from 'ink';
    import Spinner from 'ink-spinner';
    import Separator from './Separator';
    import { useGitCommitScreen } from '../hooks/useGitCommitScreen';

    const GitCommitScreen = () => {
        const { transactionsToCommit, finalCommitMessage, isCommitting } = useGitCommitScreen();

        const transactionLines = transactionsToCommit.map(tx => (
            <Text key={tx.id}>- {tx.hash}: {tx.message}</Text>
        ));

        const footer = isCommitting
            ? <Text><Spinner type="dots"/> Committing... please wait.</Text>
            : <Text>(Enter) Confirm & Commit      (Esc) Cancel</Text>;

        return (
            <Box flexDirection="column">
                <Text color="cyan">▲ relaycode git commit</Text>
                <Separator />
                <Box marginY={1} flexDirection="column" paddingX={2}>
                    <Text>Found {transactionsToCommit.length} new transactions to commit since last git commit.</Text>
                    <Box marginTop={1} flexDirection="column">
                        <Text bold>TRANSACTIONS INCLUDED</Text>
                        {transactionLines}
                    </Box>
                </Box>
                <Separator />
                <Box marginY={1} flexDirection="column" paddingX={2}>
                    <Text bold>FINAL COMMIT MESSAGE</Text>
                    <Box marginTop={1}>
                        <Text>{finalCommitMessage}</Text>
                    </Box>
                </Box>
                <Separator />
                <Box marginY={1} paddingX={2}>
                     <Text>This will run &apos;git add .&apos; and &apos;git commit&apos; with the message above.</Text>
                </Box>
                <Separator />
                {footer}
            </Box>
        );
    };

    export default GitCommitScreen;
  src/components/ReviewScreen.tsx: >-
    import { Box, Text } from 'ink';

    import Separator from './Separator';

    import DiffScreen from './DiffScreen';

    import ReasonScreen from './ReasonScreen';

    import type { ScriptResult, FileItem, FileChangeType } from
    '../types/domain.types';

    import { useReviewScreen } from '../hooks/useReviewScreen';


    // --- Sub-components ---


    const FileItemRow = ({ file, reviewStatus, reviewError, reviewDetails,
    isFocused }: {
        file: FileItem;
        reviewStatus: string;
        reviewError?: string;
        reviewDetails?: string;
        isFocused: boolean;
    }) => {
        let icon;
        let iconColor;
        switch (reviewStatus) {
            case 'APPROVED': icon = '[✓]'; iconColor = 'green'; break;
            case 'REJECTED': icon = '[✗]'; iconColor = 'red'; break;
            case 'FAILED': icon = '[!]'; iconColor = 'red'; break;
            case 'AWAITING': icon = '[●]'; iconColor = 'yellow'; break;
            case 'RE_APPLYING': icon = '[●]'; iconColor = 'cyan'; break;
        }

        const typeColor = (type: FileChangeType) => {
            switch (type) {
                case 'ADD': return 'green';
                case 'DEL': return 'red';
                case 'REN': return 'yellow';
                default: return 'white';
            }
        };

        const diffStats = <Text>(+<Text color="green">{file.linesAdded}</Text>/-<Text color="red">{file.linesRemoved}</Text>)</Text>;
        const strategy = file.strategy === 'standard-diff' ? 'diff' : file.strategy;
        const prefix = isFocused ? '> ' : '  ';
        const colorProps = isFocused ? { bold: true, color: 'cyan' } : {};

        if (reviewStatus === 'FAILED') {
            return (
                <Box>
                    <Text {...colorProps}>
                        {prefix}<Text color={iconColor}>{icon} FAILED {file.path}</Text>
                        <Text color="red">    ({reviewError})</Text>
                    </Text>
                </Box>
            );
        }

        if (reviewStatus === 'AWAITING') {
            return (
                <Box>
                    <Text {...colorProps}>
                        {prefix}<Text color={iconColor}>{icon} AWAITING {file.path}</Text>
                        <Text color="yellow">    ({reviewDetails})</Text>
                    </Text>
                </Box>
            );
        }

        if (reviewStatus === 'RE_APPLYING') {
            return (
                 <Box>
                    <Text {...colorProps}>
                        {prefix}<Text color={iconColor}>{icon} RE-APPLYING... {file.path}</Text>
                        <Text color="cyan"> (using &apos;replace&apos; strategy)</Text>
                    </Text>
                </Box>
            );
        }

        return (
            <Box>
                <Text {...colorProps}>
                    {prefix}<Text color={iconColor}>{icon}</Text> {file.type}{' '}
                    <Text color={typeColor(file.type)}>{file.path}</Text>{' '}
                    {diffStats} [{strategy}]
                </Text>
            </Box>
        );
    };


    const ScriptItemRow = ({
        script,
        isSelected,
        isExpanded,
    }: {
        script: ScriptResult;
        isSelected: boolean;
        isExpanded: boolean;
    }) => {
        const icon = script.success ? '✓' : '✗';
        const iconColor = script.success ? 'green' : 'red';
        const arrow = isExpanded ? '▾' : '▸';
        const prefix = isSelected ? '> ' : '  ';
        
        // Extract script type from command (e.g., "bun run test" -> "Post-Command", "bun run lint" -> "Linter")
        const scriptType = script.command.includes('test') ? 'Post-Command' : 
                          script.command.includes('lint') ? 'Linter' : 
                          'Script';

        return (
            <Box>
                <Text bold={isSelected} color={isSelected ? 'cyan' : undefined}>
                    {prefix}<Text color={iconColor}>{icon}</Text> {scriptType}: `{script.command}` ({script.duration}s) {arrow}{' '}
                    {script.summary}
                </Text>
            </Box>
        );
    };


    // --- Main Component ---


    const ReviewScreen = () => {
        const {
            transaction,
            files,
            scripts = [],
            patchStatus,
            selectedItemIndex,
            bodyView,
            isDiffExpanded,
            reasoningScrollIndex,
            scriptErrorIndex,
            fileReviewStates,
            numFiles,
            approvedFilesCount,
            totalLinesAdded,
            totalLinesRemoved,
            selectedBulkRepairOptionIndex,
            selectedBulkInstructOptionIndex,
            navigableItems,
            hasRejectedFiles,
        } = useReviewScreen();

        if (!transaction) {
            return <Text>Loading review...</Text>;
        }
        const { hash, message, prompt = '', reasoning = '' } = transaction;

        const renderBody = () => {
            if (bodyView === 'none') return null;

            if (bodyView === 'reasoning') {
                const reasoningText = reasoning || '';
                const reasoningLinesCount = reasoningText.split('\n').length;
                const visibleLinesCount = 10;
                return (
                    <Box flexDirection="column">
                        <ReasonScreen
                            reasoning={reasoningText}
                            scrollIndex={reasoningScrollIndex}
                            visibleLinesCount={visibleLinesCount}
                        />
                        {reasoningLinesCount > visibleLinesCount && (
                            <Text color="gray">
                                Showing lines {reasoningScrollIndex + 1}-{Math.min(reasoningScrollIndex + visibleLinesCount, reasoningLinesCount)}{' '}
                                of {reasoningLinesCount}
                            </Text>
                        )}
                    </Box>
                );
            }
            
            if (bodyView === 'diff') {
                const currentItem = navigableItems[selectedItemIndex];
                const selectedFile = currentItem?.type === 'file' ? files.find(f => f.id === currentItem.id) : undefined;
                if (!selectedFile) return null;
                return (
                    <DiffScreen
                        filePath={selectedFile.path}
                        diffContent={selectedFile.diff}
                        isExpanded={isDiffExpanded}
                    />
                );
            }

            if (bodyView === 'script_output') {
                 const currentItem = navigableItems[selectedItemIndex];
                 const scriptItems = navigableItems.filter((i): i is { type: 'script'; id: string } => i.type === 'script');
                 const scriptIndex = currentItem?.type === 'script'
                    ? scriptItems.findIndex(i => i.id === currentItem.id)
                    : -1;
                 const selectedScript = scripts[scriptIndex] || null;
                 if (!selectedScript) return null;
                 
                 const outputLines = selectedScript.output.split('\n');
                 const errorLines = outputLines.filter((line: string) =>
                    line.includes('Error') || line.includes('Warning'),
                 );
                 
                 return (
                    <Box flexDirection="column">
                        <Text>{selectedScript.command.includes('lint') ? 'LINTER' : 'SCRIPT'} OUTPUT: `{selectedScript.command}`</Text>
                        <Box marginTop={1} flexDirection="column">
                            {outputLines.map((line: string, index: number) => {
                                const isError = line.includes('Error');
                                const isWarning = line.includes('Warning');
                                const isHighlighted = errorLines[scriptErrorIndex] === line;
                                
                                return (
                                    <Text 
                                        key={index} 
                                        color={isError ? 'red' : isWarning ? 'yellow' : undefined}
                                        bold={isHighlighted}
                                        backgroundColor={isHighlighted ? 'blue' : undefined}
                                    >
                                        {line}
                                    </Text>
                                );
                            })}
                        </Box>
                        {errorLines.length > 0 && (
                            <Text color="gray">
                                Error {scriptErrorIndex + 1} of {errorLines.length} highlighted
                            </Text>
                        )}
                    </Box>
                 );
            }

            if (bodyView === 'confirm_handoff') {
                return (
                    <Box flexDirection="column" gap={1}>
                        <Text bold>HANDOFF TO EXTERNAL AGENT</Text>
                        <Box flexDirection="column">
                            <Text>This action will:</Text>
                            <Text>1. Copy a detailed prompt to your clipboard for an agentic AI.</Text>
                            <Text>2. Mark the current transaction as &apos;Handoff&apos; and close this review.</Text>
                            <Text>3. Assume that you and the external agent will complete the work.</Text>
                        </Box>
                        <Text>Relaycode will NOT wait for a new patch. This is a final action.</Text>
                        <Text bold color="yellow">Are you sure you want to proceed?</Text>
                    </Box>
                );
            }

            if (bodyView === 'bulk_repair') {
                const failedFiles = files.filter((f: FileItem) => fileReviewStates.get(f.id)?.status === 'FAILED');
                const repairOptions = [
                    '(1) Copy Bulk Re-apply Prompt (for single-shot AI)',
                    '(2) Bulk Change Strategy & Re-apply',
                    '(3) Handoff to External Agent',
                    '(4) Bulk Abandon All Failed Files',
                    '(Esc) Cancel',
                ];

                return (
                    <Box flexDirection="column" gap={1}>
                        <Text bold>BULK REPAIR ACTION</Text>

                        <Box flexDirection="column">
                            <Text>The following {failedFiles.length} files failed to apply:</Text>
                            {failedFiles.map((file: FileItem) => (
                                <Text key={file.id}>- {file.path}</Text>
                            ))}
                        </Box>

                        <Text>How would you like to proceed?</Text>

                        <Box flexDirection="column">
                            {repairOptions.map((opt, i) => (
                                <Text key={i} color={selectedBulkRepairOptionIndex === i ? 'cyan' : undefined}>
                                    {selectedBulkRepairOptionIndex === i ? '> ' : '  '}
                                    {opt}
                                </Text>
                            ))}
                        </Box>
                    </Box>
                );
            }

            if (bodyView === 'bulk_instruct') {
                const rejectedFiles = files.filter((f: FileItem) => fileReviewStates.get(f.id)?.status === 'REJECTED');
                const instructOptions = [
                    '(1) Copy Bulk Re-instruct Prompt (for single-shot AI)',
                    '(2) Handoff to External Agent',
                    '(3) Bulk Un-reject All Files (revert to original)',
                    '(4) Cancel',
                ];

                return (
                    <Box flexDirection="column" gap={1}>
                        <Text bold>BULK INSTRUCTION ACTION</Text>

                        <Box flexDirection="column">
                            <Text>The following {rejectedFiles.length} files were rejected:</Text>
                            {rejectedFiles.map((file: FileItem) => (
                                <Text key={file.id}>- {file.path}</Text>
                            ))}
                        </Box>
                        <Box flexDirection="column" marginTop={1}>
                            {instructOptions.map((opt, i) => (
                                <Text key={i} color={selectedBulkInstructOptionIndex === i ? 'cyan' : undefined}>
                                    {selectedBulkInstructOptionIndex === i ? '> ' : '  '}
                                    {opt}
                                </Text>
                            ))}
                        </Box>
                    </Box>
                );
            }

            return null;
        };

        const renderFooter = () => {
            // Contextual footer for body views
            if (bodyView === 'diff') {
                return <Text>(↑↓) Nav · (X)pand · (D/Esc) Back</Text>;
            }
            if (bodyView === 'reasoning') {
                return <Text>(↑↓) Scroll Text · (R)Collapse View · (C)opy Mode</Text>;
            }
            if (bodyView === 'script_output') {
                return (
                    <Text>(↑↓) Nav · (J↓/K↑) Next/Prev Error · (C)opy Output · (Ent/Esc) Back</Text>
                );
            }
            if (bodyView === 'bulk_repair') {
                return <Text>Choose an option [1-4, Esc]:</Text>;
            }
            if (bodyView === 'bulk_instruct') {
                return <Text>Choose an option [1-4, Esc]:</Text>;
            }
            if (bodyView === 'confirm_handoff') {
                return <Text>(Enter) Confirm Handoff      (Esc) Cancel</Text>;
            }

            // Main footer
            const actions = ['(↑↓) Nav'];

            const currentItem = navigableItems[selectedItemIndex];
            
            if (currentItem?.type === 'file') {
                const selectedFile = files.find(f => f.id === currentItem.id);
                const fileState = fileReviewStates.get(currentItem.id);
                if (fileState?.status !== 'FAILED') {
                    actions.push('(Spc) Toggle');
                }
                actions.push('(D)iff');
                
                // Add repair options for failed files
                if (selectedFile && fileState?.status === 'FAILED') {
                    actions.push('(T)ry Repair');
                }
                if (selectedFile && fileState?.status === 'REJECTED') {
                    actions.push('(I)nstruct');
                }
            } else if (currentItem?.type === 'script') {
                actions.push('(Ent) Expand Details');
            } else { // Prompt or Reasoning
                actions.push('(Ent) Expand');
            }

            if (currentItem?.type !== 'reasoning') {
                actions.push('(R)easoning');
            }

            // Add bulk repair if there are failed files
            const hasFailedFiles = Array.from(fileReviewStates.values()).some(s => s.status === 'FAILED');
            if (hasFailedFiles) {
                actions.push('(Shift+T) Bulk Repair');
            }
            // Add bulk instruct if there are rejected files
            if (hasRejectedFiles) {
                actions.push('(Shift+I) Bulk Instruct');
            }
            
            actions.push('(C)opy');

            if (approvedFilesCount > 0) {
                actions.push('(A)pprove');
            }

            if (Array.from(fileReviewStates.values()).some(s => s.status === 'APPROVED' || s.status === 'FAILED')) {
                actions.push('(Shift+R) Reject All');
            }
            actions.push('(Q)uit');

            return <Text>{actions.join(' · ')}</Text>;
        };

        return (
            <Box flexDirection="column">
                {/* Header */}
                <Text color="cyan">▲ relaycode review</Text>
                <Separator />
                
                {/* Navigator Section */}
                <Box flexDirection="column" marginY={1}>
                    <Box flexDirection="column">
                        <Text>{hash} · {message}</Text>
                        <Text>
                            (<Text color="green">+{totalLinesAdded}</Text>/<Text color="red">-{totalLinesRemoved}</Text>) · {numFiles} Files · {approvedFilesCount}/{numFiles} Approved
                            {patchStatus === 'PARTIAL_FAILURE' && scripts.length === 0 && <Text> · Scripts: SKIPPED</Text>}
                            {patchStatus === 'PARTIAL_FAILURE' && <Text color="red" bold> · MULTIPLE PATCHES FAILED</Text>}
                        </Text>
                    </Box>

                    <Box flexDirection="column" marginTop={1}>
                        <Text color={navigableItems[selectedItemIndex]?.type === 'prompt' ? 'cyan' : undefined}>
                            {navigableItems[selectedItemIndex]?.type === 'prompt' ? '> ' : '  '}
                            (P)rompt ▸ {(prompt || '').substring(0, 60)}...
                        </Text>
                        <Text color={navigableItems[selectedItemIndex]?.type === 'reasoning' ? 'cyan' : undefined}>
                            {navigableItems[selectedItemIndex]?.type === 'reasoning' ? '> ' : '  '}
                            (R)easoning ({(reasoning || '').split('\n\n').length} steps) {bodyView === 'reasoning' ? '▾' : '▸'}{' '}
                            {((reasoning || '').split('\n')[0] ?? '').substring(0, 50)}...
                        </Text>
                    </Box>
                </Box>

                <Separator />

                {/* Script Results (if any) */}
                {scripts.length > 0 && navigableItems.some(i => i.type === 'script') && (
                    <>
                        <Box flexDirection="column" marginY={1}>
                            {scripts.map((script: ScriptResult) => (
                                (() => {
                                    const navItemIndex = navigableItems.findIndex(i => {
                                        if (i.type === 'script') {
                                            return i.id === script.command;
                                        }
                                        return false;
                                    });
                                    const isSelected = selectedItemIndex === navItemIndex;
                                    return (
                                        <ScriptItemRow
                                            key={script.command}
                                            script={script}
                                            isSelected={isSelected}
                                            isExpanded={bodyView === 'script_output' && isSelected}
                                        />
                                    );
                                })()
                            ))}
                        </Box>
                        <Separator />
                    </>
                )}

                {/* Files Section */}
                <Box flexDirection="column" marginY={1}>
                    <Text bold>FILES</Text>
                    {files.map((file: FileItem) => {
                        const navItemIndex = navigableItems.findIndex(i => {
                            if (i.type === 'file') {
                                return i.id === file.id;
                            }
                            return false;
                        });
                        const isFocused = selectedItemIndex === navItemIndex;
                        const reviewState = fileReviewStates.get(file.id);
                        return (
                            <FileItemRow
                                key={file.id}
                                file={file}
                                isFocused={isFocused}
                                reviewStatus={reviewState?.status || 'AWAITING'}
                                reviewError={reviewState?.error}
                                reviewDetails={reviewState?.details}
                            />
                        );
                    })}
                </Box>
                
                <Separator />
                
                {/* Body Viewport */}
                {bodyView !== 'none' && (
                    <>
                        <Box marginY={1}>
                            {renderBody()}
                        </Box>
                        <Separator />
                    </>
                )}

                {/* Footer */}
                <Box>
                    {renderFooter()}
                </Box>
            </Box>
        );
    };


    export default ReviewScreen;
  src/components/TransactionDetailScreen.tsx: >-
    import { Box, Text } from 'ink';

    import Separator from './Separator';

    import DiffScreen from './DiffScreen';

    import ReasonScreen from './ReasonScreen';

    import { useTransactionDetailScreen } from
    '../hooks/useTransactionDetailScreen';

    import type { FileChangeType } from '../types/domain.types';


    const getFileChangeTypeIcon = (type: FileChangeType) => {
        switch (type) {
            case 'MOD': return '[MOD]';
            case 'ADD': return '[ADD]';
            case 'DEL': return '[DEL]';
            case 'REN': return '[REN]';
        }
    };


    const RevertModal = ({ transactionHash }: { transactionHash: string }) => {
        return (
            <Box 
                borderStyle="round"
                borderColor="yellow"
                flexDirection="column"
                paddingX={2}
                width="80%"
                alignSelf='center'
            >
                <Text bold color="yellow" wrap="wrap" >REVERT THIS TRANSACTION?</Text>
                <Box height={1} />
                <Text wrap="wrap">This will create a NEW transaction that reverses all changes made by {transactionHash}. The original transaction record will be preserved.</Text>
                <Box height={1} />
                <Text wrap="wrap">Are you sure?</Text>
            </Box>
        );
    };


    const TransactionDetailScreen = () => {
        const {
            transaction, files,
            focusedItemPath, expandedItemPaths, bodyView,
        } = useTransactionDetailScreen();

        if (!transaction) {
            return <Text>Loading transaction...</Text>;
        }

        const renderNavigator = () => {
            const isPromptFocused = focusedItemPath === 'PROMPT';
            const isReasoningFocused = focusedItemPath === 'REASONING';
            const isFilesFocused = focusedItemPath.startsWith('FILES');
            
            const isPromptExpanded = expandedItemPaths.has('PROMPT');
            const isReasoningExpanded = expandedItemPaths.has('REASONING');
            const isFilesExpanded = expandedItemPaths.has('FILES');
            
            return (
                <Box flexDirection="column">
                    <Text color={isPromptFocused ? 'cyan' : undefined}>
                        {isPromptFocused ? '> ' : '  '}
                        {isPromptExpanded ? '▾' : '▸'} (P)rompt
                    </Text>
                    <Text color={isReasoningFocused ? 'cyan' : undefined}>
                        {isReasoningFocused ? '> ' : '  '}
                        {isReasoningExpanded ? '▾' : '▸'} (R)easoning ({transaction.reasoning?.split('\n\n').length || 0} steps)
                    </Text>
                    <Text color={isFilesFocused ? 'cyan' : undefined}>
                        {isFilesFocused && !focusedItemPath.includes('/') ? '> ' : '  '}
                        {isFilesExpanded ? '▾' : '▸'} (F)iles ({files.length})
                    </Text>
                    {isFilesExpanded && (
                        <Box flexDirection="column" paddingLeft={2}>
                            {files.map((file) => {
                                 const fileId = `FILES/${file.id}`;
                                 const isFileSelected = focusedItemPath === fileId;
                                 const stats = file.type === 'DEL' ? '' : ` (+${file.linesAdded}/-${file.linesRemoved})`;
                                 return (
                                    <Text key={file.id} color={isFileSelected ? 'cyan' : undefined}>
                                        {isFileSelected ? '> ' : '  '}
                                        {`${getFileChangeTypeIcon(file.type)} ${file.path}${stats}`}
                                    </Text>
                                );
                            })}
                        </Box>
                    )}
                </Box>
            );
        };

        const renderBody = () => {
            if (bodyView === 'NONE') {
                return <Text color="gray">(Press → to expand a section and view its contents)</Text>;
            }
            if (bodyView === 'PROMPT') {
                return (
                    <Box flexDirection="column">
                        <Text>PROMPT</Text>
                        <Box marginTop={1}><Text>{transaction.prompt}</Text></Box>
                    </Box>
                );
            }
            if (bodyView === 'REASONING') {
                if (!transaction.reasoning) return <Text color="gray">No reasoning provided.</Text>;
                return <ReasonScreen reasoning={transaction.reasoning} />;
            }
            if (bodyView === 'FILES_LIST') {
                 return <Text color="gray">(Select a file and press → to view the diff)</Text>;
            }
            if (bodyView === 'DIFF_VIEW') {
                const fileId = focusedItemPath.split('/')[1];
                const file = files.find(f => f.id === fileId);
                if (!file) return null;
                return <DiffScreen filePath={file.path} diffContent={file.diff} isExpanded={true} />;
            }
            return null;
        };

        const renderFooter = () => {
            if (bodyView === 'REVERT_CONFIRM') {
                return <Text>(Enter) Confirm Revert      (Esc) Cancel</Text>;
            }
            
            const baseActions = ['(↑↓) Nav', '(C)opy', '(U)ndo', '(Q)uit/Back'];

            if (focusedItemPath.includes('/')) { // Is a file
                if (bodyView === 'DIFF_VIEW') {
                    return <Text>(↑↓) Nav Files · (←) Back to List · {baseActions.slice(1).join(' · ')}</Text>;
                }
                return <Text>(↑↓) Nav Files · (→) View Diff · (←) Back to Sections · {baseActions.slice(1).join(' · ')}</Text>;
            }
            
            if (expandedItemPaths.has(focusedItemPath)) {
                return <Text>(↑↓) Nav/Scroll · (→) Drill In · (←) Collapse · {baseActions.slice(1).join(' · ')}</Text>;
            }
            
            return <Text>(↑↓) Nav · (→) Expand · {baseActions.slice(1).join(' · ')}</Text>;
        };

        const { message, timestamp, status } = transaction;
        const date = new Date(timestamp).toISOString().replace('T', ' ').substring(0, 19);
        const fileStats = `${files.length} Files · +${files.reduce((a, f) => a + f.linesAdded, 0)} lines, -${files.reduce((a, f) => a + f.linesRemoved, 0)} lines`;

        return (
            <Box flexDirection="column">
                {/* Header */}
                <Text>▲ relaycode transaction details</Text>
                <Separator />
                
                {/* Modal takeover for Revert */}
                {bodyView === 'REVERT_CONFIRM' && <RevertModal transactionHash={transaction.hash} />}
                
                {/* Main view */}
                <Box flexDirection="column" display={bodyView === 'REVERT_CONFIRM' ? 'none' : 'flex'}>
                    {/* Navigator Part A */}
                    <Box flexDirection="column" marginY={1}>
                        <Text>UUID: {transaction.id}</Text>
                        <Text>Git: {message}</Text>
                        <Text>Date: {date} · Status: {status}</Text>
                        <Text>Stats: {fileStats}</Text>
                    </Box>
                    
                    {/* Navigator Part B */}
                    {renderNavigator()}
                    
                    <Separator />
                    
                    {/* Body */}
                    <Box marginY={1}>
                        {renderBody()}
                    </Box>
                    
                    <Separator />
                </Box>
                
                {/* Footer */}
                <Box>
                    {renderFooter()}
                </Box>
            </Box>
        );
    };


    export default TransactionDetailScreen;
  src/components/TransactionHistoryScreen.tsx: >-
    import { useMemo } from 'react';

    import { Box, Text } from 'ink';

    import TextInput from 'ink-text-input';

    import Spinner from 'ink-spinner';

    import Separator from './Separator';

    import type { Transaction, FileItem } from '../types/domain.types';

    import { useTransactionHistoryScreen } from
    '../hooks/useTransactionHistoryScreen';

    import { UI_CONFIG } from '../config/ui.config';


    // --- Sub-components ---


    const ContentRow = ({ title, content, isSelected, isExpanded, isLoading }: {
        title: string;
        content: string;
        isSelected: boolean;
        isExpanded: boolean;
        isLoading: boolean;
    }) => {
        const icon = isExpanded ? '▾' : '▸';
        return (
            <Box flexDirection="column" paddingLeft={6}>
                <Text color={isSelected ? 'cyan' : undefined}>
                    {isSelected ? '> ' : '  '}{icon} {title}
                </Text>
                {isLoading && <Box paddingLeft={8}><Spinner type="dots" /></Box>}
                {isExpanded && !isLoading && (
                    <Box paddingLeft={8} flexDirection="column">
                        {(content || '').split('\n').map((line, i) => <Text key={i}>{line || ' '}</Text>)}
                    </Box>
                )}
            </Box>
        );
    };


    const DiffPreview = ({ diff }: { diff: string }) => {
        const lines = diff.split('\n');
        const previewLines = lines.slice(0, 5);
        const hiddenLines = lines.length > 5 ? lines.length - 5 : 0;

        return (
            <Box flexDirection="column" paddingLeft={8}>
                {previewLines.map((line, i) => {
                    let color = 'white';
                    if (line.startsWith('+')) color = 'green';
                    if (line.startsWith('-')) color = 'red';
                    if (line.startsWith('@@')) color = 'cyan';
                    return <Text key={i} color={color}>{line}</Text>;
                })}
                {hiddenLines > 0 && <Text color="gray">... {hiddenLines} lines hidden ...</Text>}
            </Box>
        );
    };


    const FileRow = ({ file, isSelected, isExpanded, isLoading }: {
        file: FileItem;
        isSelected: boolean;
        isExpanded: boolean;
        isLoading: boolean;
    }) => {
        const icon = isExpanded ? '▾' : '▸';
        const typeMap = { MOD: '[MOD]', ADD: '[ADD]', DEL: '[DEL]', REN: '[REN]' };
        
        return (
            <Box flexDirection="column" paddingLeft={6}>
                <Text color={isSelected ? 'cyan' : undefined}>
                    {isSelected ? '> ' : '  '}
                    {icon} {typeMap[file.type]} {file.path}
                </Text>
                {isLoading && <Box paddingLeft={8}><Spinner type="dots" /></Box>}
                {isExpanded && !isLoading && <DiffPreview diff={file.diff} />}
            </Box>
        );
    };


    const TransactionRow = ({
        tx,
        isSelected,
        isExpanded,
        isSelectedForAction,
        hasSelection,
    }: {
        tx: Transaction;
        isSelected: boolean;
        isExpanded: boolean;
        isSelectedForAction: boolean;
        hasSelection: boolean;
    }) => {
        const icon = isExpanded ? '▾' : '▸';
        const statusMap = {
            COMMITTED: <Text color="green">✓ Committed</Text>,
            HANDOFF: <Text color="magenta">→ Handoff</Text>,
            REVERTED: <Text color="gray">↩ Reverted</Text>,
            APPLIED: <Text color="blue">✓ Applied</Text>,
            PENDING: <Text color="yellow">? Pending</Text>,
            FAILED: <Text color="red">✗ Failed</Text>,
        };
        const date = new Date(tx.timestamp).toISOString().split('T')[0];
        const selectionIndicator = isSelectedForAction ? '[x] ' : '[ ] ';
        
        const statusDisplay = statusMap[tx.status as keyof typeof statusMap] || tx.status;

        return (
            <Box flexDirection="column" marginBottom={isExpanded ? 1 : 0}>
                <Text color={isSelected ? 'cyan' : undefined}>
                    {isSelected ? '> ' : '  '}
                    {hasSelection && selectionIndicator}
                    {icon} {statusDisplay} · {tx.hash} · {date} ·{' '}
                    {tx.message}
                </Text>
                {isExpanded && (
                    <Box flexDirection="column" paddingLeft={8}>
                        {tx.stats && (
                            <Text color="gray">
                                Stats: {tx.stats.files} files, +{tx.stats.linesAdded}/-{tx.stats.linesRemoved}
                            </Text>
                        )}
                        <Text>Files:</Text>
                    </Box>
                )}
            </Box>
        );
    };


    const BulkActionsMode = ({ selectedForActionCount }: {
    selectedForActionCount: number }) => {
        return (
            <Box flexDirection="column" marginY={1}>
                <Text bold color="yellow">PERFORM BULK ACTION ON {selectedForActionCount} SELECTED ITEMS</Text>
                <Box marginY={1}>
                    <Text>This action is often irreversible. Are you sure?</Text>
                </Box>
                <Text>(1) Revert Selected Transactions</Text>
                <Text>(2) Mark as &apos;Git Committed&apos;</Text>
                <Text>(3) Delete Selected Transactions (from Relaycode history)</Text>
                <Text>(Esc) Cancel</Text>
            </Box>
        );
    };


    // --- Main Component ---


    const TransactionHistoryScreen = () => {
        const {
            mode,
            filterQuery,
            selectedForAction,
            selectedItemPath,
            expandedIds,
            loadingPaths,
            actions,
            transactions,
            itemsInView,
            filterStatus,
            showingStatus,
            statsStatus,
            hasSelection,
        } = useTransactionHistoryScreen({ reservedRows: UI_CONFIG.history.reservedRows });

        const transactionsById = useMemo(() => new Map(transactions.map(tx => [tx.id, tx])), [transactions]);

        const renderFooter = () => {
            if (mode === 'FILTER') return <Text>(Enter) Apply Filter & Return      (Esc) Cancel</Text>; 
            if (mode === 'BULK_ACTIONS') return <Text>Choose an option [1-3, Esc]:</Text>;
            
            const footerActions = ['(↑↓) Nav', '(→) Expand', '(←) Collapse', '(Spc) Select', '(Ent) Details', '(F)ilter'];
            if (selectedForAction.size > 0) {
                footerActions.push('(C)opy', '(B)ulk');
            }
            return <Text>{footerActions.join(' · ')}</Text>;
        };

        return (
            <Box flexDirection="column">
                <Text color="cyan">▲ relaycode transaction history</Text>
                <Separator />

                <Box>
                    <Text>Filter: </Text>
                    {mode === 'FILTER' ? (
                        <TextInput value={filterQuery} onChange={actions.setFilterQuery} />
                    ) : (
                        <Text>{filterStatus}</Text>
                    )}
                    <Text> · {showingStatus}</Text>
                    {statsStatus && <Text> · {statsStatus}</Text>}
                </Box>

                <Box flexDirection="column" marginY={1}>
                    {mode === 'BULK_ACTIONS' && <BulkActionsMode selectedForActionCount={selectedForAction.size} />}

                    {mode === 'LIST' && itemsInView.map(path => {
                        const txId = path.split('/')[0]!;
                        const tx = transactionsById.get(txId);
                        if (!tx) return <Text key={path}>Error: Missing TX {txId}</Text>;

                        // Is a transaction row
                        if (path === tx.id) {
                            return (
                                <TransactionRow
                                    key={path}
                                    tx={tx}
                                    isSelected={selectedItemPath === path}
                                    isExpanded={expandedIds.has(path)}
                                    isSelectedForAction={selectedForAction.has(tx.id)}
                                    hasSelection={hasSelection}
                                />
                            );
                        }

                        // Is a child row
                        const itemType = path.split('/')[1]!;
                        const isSelected = selectedItemPath === path;
                        const isExpanded = expandedIds.has(path);
                        const isLoading = loadingPaths.has(path);

                        if (itemType === 'file') {
                            const fileId = path.split('/')[2]!;
                            const file = tx.files?.find(f => f.id === fileId);
                            if (!file) return null;
                            return (
                                <FileRow
                                    key={path} file={file} isSelected={isSelected}
                                    isExpanded={isExpanded} isLoading={isLoading}
                                />
                            );
                        }

                        const contentMap = {
                            message: { title: 'Commit Message', content: tx.message || '' },
                            prompt: { title: 'Prompt', content: tx.prompt || '' },
                            reasoning: { title: 'Reasoning', content: tx.reasoning || '' },
                        };

                        const item = contentMap[itemType as keyof typeof contentMap];
                        if (!item) return null;

                        return (
                            <ContentRow
                                key={path}
                                {...item}
                                isSelected={isSelected}
                                isExpanded={isExpanded}
                                isLoading={isLoading}
                            />
                        );
                    })}
                </Box>

                <Separator />
                {renderFooter()}
            </Box>
        );
    };


    export default TransactionHistoryScreen;
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 133
