uuid: a664e1f7-e24c-4148-b0a5-a043c75abf13
projectId: relaycode-tui
createdAt: '2025-09-25T09:44:20.022Z'
gitCommitMsg: >-
  feat(debug): add more screen states to debug menu

  Adds several new states to the debug menu for easier testing and development:
  - Dashboard: Expanded transaction view. - Detail Screen: Copy mode overlay. -
  Detail Screen: Direct navigation to file diff view. - Detail Screen: Revert
  confirmation modal.

  To support this, the `detail.store` `load` action has been enhanced to accept
  an initial state, allowing for direct-to-state navigation.
promptSummary: Add new screen states to the debug menu.
reasoning:
  - >-
    Of course. I will add the new screen states to the debug menu. This involves
    enabling more granular state setup for the Transaction Detail screen and
    then adding the corresponding menu items.
  - >-
    First, I'll update the `detail.store.ts` to allow its `load` action to
    accept an initial state. This makes it possible to directly jump to specific
    views like the diff view or revert confirmation modal.
  - >-
    Next, I'll add the new debug menu items in `useDebugMenu.tsx`. This includes
    a state for an expanded transaction on the dashboard and several states for
    the transaction detail screen (copy mode, diff view, and revert
    confirmation).
  - >-
    These changes add several new testable states to the debug menu, improving
    development velocity and ensuring all parts of the UI can be accessed
    quickly.
operations:
  - type: write
    path: src/stores/detail.store.ts
    content: >+
      --- src/stores/detail.store.ts

      +++ src/stores/detail.store.ts

      @@ -6,13 +6,16 @@
       
       export type NavigatorSection = ObjectValues<typeof NAVIGATOR_SECTIONS>;
       export type DetailBodyView = ObjectValues<typeof DETAIL_BODY_VIEWS>;
      +

      +// Omit 'actions' from state type for partial updates

      +type DetailStateData = Omit<DetailState, 'actions'>;
        
       interface DetailState {
           focusedItemPath: string; // e.g., 'PROMPT', 'FILES', 'FILES/1-1'
           expandedItemPaths: Set<string>;
           bodyView: DetailBodyView;
           actions: {
      -        load: (transactionId: string) => void;

      +        load: (transactionId: string, initialState?:
      Partial<DetailStateData>) => void;
               navigateUp: () => void;
               navigateDown: () => void;
               expandOrDrillDown: () => void;
      @@ -40,13 +43,14 @@
           expandedItemPaths: new Set(),
           bodyView: DETAIL_BODY_VIEWS.NONE,
           actions: {
      -        load: (transactionId) => {

      +        load: (transactionId, initialState) => {
                   useViewStore.getState().actions.setSelectedTransactionId(transactionId);
                   set({
                       focusedItemPath: NAVIGATOR_SECTIONS.PROMPT,
                       expandedItemPaths: new Set(),
                       bodyView: DETAIL_BODY_VIEWS.NONE,
      +                ...initialState,
                   });
               },
               navigateUp: () => {

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useDebugMenu.tsx
    content: >+
      --- src/hooks/useDebugMenu.tsx

      +++ src/hooks/useDebugMenu.tsx

      @@ -93,6 +93,14 @@
                       appActions.showDashboardScreen();
                   },
               },
      +        {

      +            title: 'Dashboard: Expanded View',

      +            action: () => {

      +                dashboardActions.setStatus('LISTENING');

      +                dashboardActions.setExpandedTransactionId('1');

      +                appActions.showDashboardScreen();

      +            },

      +        },
               {
                   title: 'Review: Partial Failure (Default)',
                   action: () => {
      @@ -200,6 +208,35 @@
                       appActions.showTransactionDetailScreen();
                   },
               },
      +        {

      +            title: 'Detail: Copy Mode',

      +            action: () => {

      +                detailActions.load('3');

      +                appActions.showTransactionDetailScreen();

      +                const tx =
      useTransactionStore.getState().transactions.find(t => t.id === '3');

      +                if (!tx) return;

      +                const selectedFile = tx.files?.[0];

      +                useCopyStore.getState().actions.openForDetail(tx,
      selectedFile);

      +            },

      +        },

      +        {

      +            title: 'Detail: Diff View',

      +            action: () => {

      +                detailActions.load('3', {

      +                    focusedItemPath: 'FILES/3-1',

      +                    bodyView: 'DIFF_VIEW',

      +                    expandedItemPaths: new Set(['FILES']),

      +                });

      +                appActions.showTransactionDetailScreen();

      +            },

      +        },

      +        {

      +            title: 'Detail: Revert Confirm',

      +            action: () => {

      +                detailActions.load('3', { bodyView: 'REVERT_CONFIRM' });

      +                appActions.showTransactionDetailScreen();

      +            },

      +        },
               {
                   title: 'Transaction History Screen',
                   action: () => {

    patchStrategy: standard-diff
snapshot:
  src/stores/detail.store.ts: >-
    import { create } from 'zustand';

    import { useTransactionStore } from './transaction.store';

    import { useViewStore } from './view.store';

    import { TransactionService } from '../services/transaction.service';

    import { NAVIGATOR_SECTIONS, DETAIL_BODY_VIEWS } from
    '../constants/detail.constants';

    import { findNextPath, findPrevPath, getParentPath } from
    './navigation.utils';


    type ObjectValues<T> = T[keyof T];


    export type NavigatorSection = ObjectValues<typeof NAVIGATOR_SECTIONS>;

    export type DetailBodyView = ObjectValues<typeof DETAIL_BODY_VIEWS>;
     
    interface DetailState {
        focusedItemPath: string; // e.g., 'PROMPT', 'FILES', 'FILES/1-1'
        expandedItemPaths: Set<string>;
        bodyView: DetailBodyView;
        actions: {
            load: (transactionId: string) => void;
            navigateUp: () => void;
            navigateDown: () => void;
            expandOrDrillDown: () => void;
            collapseOrBubbleUp: () => void;
            toggleRevertConfirm: () => void;
            confirmRevert: () => void;
        };
    }


    const getVisibleItemPaths = (expandedItemPaths: Set<string>): string[] => {
        const { selectedTransactionId } = useViewStore.getState();
        const transaction = useTransactionStore.getState().transactions.find(tx => tx.id === selectedTransactionId);
        if (!transaction) return [];

        const paths: string[] = [NAVIGATOR_SECTIONS.PROMPT, NAVIGATOR_SECTIONS.REASONING, NAVIGATOR_SECTIONS.FILES];
        if (expandedItemPaths.has(NAVIGATOR_SECTIONS.FILES) && transaction.files) {
            for (const file of transaction.files) {
                paths.push(`${NAVIGATOR_SECTIONS.FILES}/${file.id}`);
            }
        }
        return paths;
    };


    export const useDetailStore = create<DetailState>((set, get) => ({
        focusedItemPath: NAVIGATOR_SECTIONS.PROMPT,
        expandedItemPaths: new Set(),
        bodyView: DETAIL_BODY_VIEWS.NONE,
        actions: {
            load: (transactionId) => {
                useViewStore.getState().actions.setSelectedTransactionId(transactionId);
                set({
                    focusedItemPath: NAVIGATOR_SECTIONS.PROMPT,
                    expandedItemPaths: new Set(),
                    bodyView: DETAIL_BODY_VIEWS.NONE,
                });
            },
            navigateUp: () => {
                const { expandedItemPaths, focusedItemPath } = get();
                const visibleItems = getVisibleItemPaths(expandedItemPaths);
                set({ focusedItemPath: findPrevPath(focusedItemPath, visibleItems) });
            },
            navigateDown: () => {
                const { expandedItemPaths, focusedItemPath } = get();
                const visibleItems = getVisibleItemPaths(expandedItemPaths);
                set({ focusedItemPath: findNextPath(focusedItemPath, visibleItems) });
            },
            expandOrDrillDown: () => set(state => {
                const { focusedItemPath, expandedItemPaths } = state;
                const newExpandedPaths = new Set(expandedItemPaths);
                
                if (focusedItemPath.includes('/')) { // Is a file
                    return { bodyView: DETAIL_BODY_VIEWS.DIFF_VIEW };
                }

                // Is a section header
                if (newExpandedPaths.has(focusedItemPath)) {
                    // Already expanded, drill in if it's FILES
                    if (focusedItemPath === NAVIGATOR_SECTIONS.FILES) {
                        const visibleItems = getVisibleItemPaths(newExpandedPaths);
                        const firstFile = visibleItems.find(item => item.startsWith(`${NAVIGATOR_SECTIONS.FILES}/`));
                        if (firstFile) {
                            return { focusedItemPath: firstFile, bodyView: DETAIL_BODY_VIEWS.FILES_LIST };
                        }
                    }
                    return {}; // No-op for PROMPT/REASONING if already expanded
                } else {
                    // Not expanded, so expand it
                    newExpandedPaths.add(focusedItemPath);
                    let newBodyView: DetailBodyView = DETAIL_BODY_VIEWS.NONE;
                    if (focusedItemPath === NAVIGATOR_SECTIONS.PROMPT) newBodyView = DETAIL_BODY_VIEWS.PROMPT;
                    if (focusedItemPath === NAVIGATOR_SECTIONS.REASONING) newBodyView = DETAIL_BODY_VIEWS.REASONING;
                    if (focusedItemPath === NAVIGATOR_SECTIONS.FILES) newBodyView = DETAIL_BODY_VIEWS.FILES_LIST;
                    return { expandedItemPaths: newExpandedPaths, bodyView: newBodyView };
                }
            }),
            collapseOrBubbleUp: () => set(state => {
                const { focusedItemPath, expandedItemPaths, bodyView } = state;
                
                if (bodyView === DETAIL_BODY_VIEWS.DIFF_VIEW) {
                    return { bodyView: DETAIL_BODY_VIEWS.FILES_LIST };
                }

                if (getParentPath(focusedItemPath)) { // Is a file
                    return { focusedItemPath: NAVIGATOR_SECTIONS.FILES, bodyView: DETAIL_BODY_VIEWS.FILES_LIST };
                }
                
                // Is a section header
                if (expandedItemPaths.has(focusedItemPath)) {
                    const newExpandedPaths = new Set(expandedItemPaths);
                    newExpandedPaths.delete(focusedItemPath);
                    return { expandedItemPaths: newExpandedPaths, bodyView: DETAIL_BODY_VIEWS.NONE };
                }
                
                return {}; // No-op if not expanded (global back will handle)
            }),
            toggleRevertConfirm: () => set(state => ({
                bodyView: state.bodyView === DETAIL_BODY_VIEWS.REVERT_CONFIRM
                    ? DETAIL_BODY_VIEWS.NONE
                    : DETAIL_BODY_VIEWS.REVERT_CONFIRM,
            })),
            confirmRevert: () => {
                const { selectedTransactionId } = useViewStore.getState();
                if (!selectedTransactionId) return;
                TransactionService.revertTransaction(selectedTransactionId);
                useTransactionStore.getState().actions.updateTransactionStatus(selectedTransactionId, 'REVERTED');
                set({ bodyView: DETAIL_BODY_VIEWS.NONE });
            },
        },
    }));
  src/hooks/useDebugMenu.tsx: |-
    import { useState } from 'react';
    import { useInput } from 'ink';
    import { useAppStore } from '../stores/app.store';
    import { useViewStore } from '../stores/view.store';
    import { useDashboardStore } from '../stores/dashboard.store';
    import { useReviewStore } from '../stores/review.store';
    import { useDetailStore } from '../stores/detail.store';
    import { useHistoryStore } from '../stores/history.store';
    import { useInitStore } from '../stores/init.store';
    import { useCommitStore } from '../stores/commit.store';
    import { useCopyStore } from '../stores/copy.store';
    import type { MenuItem } from '../types/debug.types';
    import { useTransactionStore } from '../stores/transaction.store';
    import { moveIndex } from '../stores/navigation.utils';
    export type { MenuItem } from '../types/debug.types';

    const useDebugMenuActions = () => {
        const { actions: appActions } = useAppStore();
        const { actions: initActions } = useInitStore();
        const { actions: commitActions } = useCommitStore();
        const { actions: dashboardActions } = useDashboardStore();
        const { actions: reviewActions } = useReviewStore();
        const { actions: detailActions } = useDetailStore();
        const { actions: historyActions } = useHistoryStore();

        const menuItems: MenuItem[] = [
            {
                title: 'Splash Screen',
                action: () => appActions.showSplashScreen(),
            },
            {
                title: 'Init: Analyze Phase',
                action: () => {
                    initActions.setPhase('ANALYZE');
                    appActions.showInitScreen();
                },
            },
            {
                title: 'Init: Interactive Phase',
                action: () => {
                    initActions.setPhase('INTERACTIVE');
                    appActions.showInitScreen();
                },
            },
            {
                title: 'Init: Finalize Phase',
                action: () => {
                    initActions.setPhase('FINALIZE');
                    appActions.showInitScreen();
                },
            },
            {
                title: 'Dashboard: Listening',
                action: () => {
                    dashboardActions.setStatus('LISTENING');
                    appActions.showDashboardScreen();
                },
            },
            {
                title: 'Dashboard: Confirm Approve',
                action: () => {
                    dashboardActions.startApproveAll();
                    appActions.showDashboardScreen();
                },
            },
            {
                title: 'Dashboard: Approving',
                action: () => {
                    dashboardActions.setStatus('APPROVING');
                    appActions.showDashboardScreen();
                },
            },
            {
                title: 'Review: Partial Failure (Default)',
                action: () => {
                    reviewActions.load('1');
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Success',
                action: () => {
                    reviewActions.load('2');
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Diff View',
                action: () => {
                    reviewActions.load('1');
                    reviewActions.setBodyView('diff');
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Reasoning View',
                action: () => {
                    reviewActions.load('1', { bodyView: 'reasoning' });
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Copy Mode',
                action: () => {
                    reviewActions.load('1');
                    appActions.showReviewScreen();
                    const tx = useTransactionStore.getState().transactions.find(t => t.id === '1');
                    if (!tx) return;
                    // On load, selected index is 0, so we can assume the first file.
                    const selectedFile = tx.files && tx.files.length > 0
                        ? tx.files[0]
                        : undefined;
                    useCopyStore.getState().actions.openForReview(tx, tx.files || [], selectedFile);
                },
            },
            {
                title: 'Review: Script Output',
                action: () => {
                    reviewActions.load('2');
                    appActions.showReviewScreen();
                    reviewActions.setBodyView('script_output');
                },
            },
            {
                title: 'Review: Bulk Repair',
                action: () => {
                    reviewActions.load('1', { bodyView: 'bulk_repair' });
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Bulk Repair (Navigable)',
                action: () => {
                    reviewActions.load('1', { bodyView: 'bulk_repair', selectedBulkRepairOptionIndex: 1 });
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Bulk Instruct',
                action: () => {
                    reviewActions.load('2'); // Load success case
                    // Reject some files to enable the workflow
                    reviewActions.toggleFileApproval('2-1');
                    reviewActions.toggleFileApproval('2-2');
                    reviewActions.showBulkInstruct();
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review: Handoff Confirm',
                action: () => {
                    reviewActions.load('1', { bodyView: 'confirm_handoff' });
                    appActions.showReviewScreen();
                },
            },
            {
                title: 'Review Processing',
                action: () => {
                    reviewActions.load('2'); // Use tx '2' which has scripts
                    appActions.showReviewProcessingScreen();
                },
            },
            {
                title: 'Git Commit Screen',
                action: () => {
                    commitActions.prepareCommitScreen();
                    appActions.showGitCommitScreen();
                },
            },
            {
                title: 'Transaction Detail Screen',
                action: () => {
                    // The dashboard store has transactions, we'll just pick one.
                    detailActions.load('3'); // 'feat: implement new dashboard UI'
                    appActions.showTransactionDetailScreen();
                },
            },
            {
                title: 'Transaction History Screen',
                action: () => {
                    historyActions.load();
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: L1 Drilldown (Content)',
                action: () => {
                    historyActions.prepareDebugState('l1-drill-content');
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: L2 Drilldown (Reasoning)',
                action: () => {
                    historyActions.prepareDebugState('l2-drill-reasoning');
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: L2 Drilldown (File Diff)',
                action: () => {
                    historyActions.prepareDebugState('l2-drill-diff');
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: Filter Mode',
                action: () => {
                    historyActions.prepareDebugState('filter');
                    appActions.showTransactionHistoryScreen();
                },
            },
            {
                title: 'History: Copy Mode',
                action: () => {
                    historyActions.prepareDebugState('copy');
                    appActions.showTransactionHistoryScreen();
                    const { transactions } = useTransactionStore.getState();
                    const { selectedForAction } = useHistoryStore.getState();
                    const txsToCopy = transactions.filter(tx => selectedForAction.has(tx.id));
                    useCopyStore.getState().actions.openForHistory(txsToCopy);
                },
            },
            {
                title: 'History: Bulk Actions Mode',
                action: () => {
                    historyActions.prepareDebugState('bulk');
                    appActions.showTransactionHistoryScreen();
                },
            },
        ];
        return { menuItems };
    };

    export const useDebugMenu = () => {
        const [selectedIndex, setSelectedIndex] = useState(0);
        const { menuItems } = useDebugMenuActions();
        
        useInput((input, key) => {
            if (key.upArrow) {
                setSelectedIndex(i => moveIndex(i, 'up', menuItems.length));
                return;
            }
            if (key.downArrow) {
                setSelectedIndex(i => moveIndex(i, 'down', menuItems.length));
                return;
            }
            if (key.return) {
                const item = menuItems[selectedIndex];
                if (item) {
                    item.action();
                    useViewStore.getState().actions.setActiveOverlay('none');
                }
                return;
            }
            if (key.escape) {
                useViewStore.getState().actions.setActiveOverlay('none');
                return;
            }

            // No ctrl/meta keys for selection shortcuts, and only single characters
            if (key.ctrl || key.meta || input.length !== 1) return;

            if (input >= '1' && input <= '9') {
                const targetIndex = parseInt(input, 10) - 1;
                if (targetIndex < menuItems.length) {
                    setSelectedIndex(targetIndex);
                }
            } else if (input.toLowerCase() >= 'a' && input.toLowerCase() <= 'z') {
                const targetIndex = 9 + (input.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0));
                if (targetIndex < menuItems.length) {
                    setSelectedIndex(targetIndex);
                }
            }
        });

        return {
            selectedIndex,
            menuItems,
        };
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 140
