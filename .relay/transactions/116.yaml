uuid: c3274261-2495-46b7-849a-e95e92ac82c6
projectId: relaycode-tui
createdAt: '2025-09-25T03:15:04.204Z'
gitCommitMsg: >-
  feat(review): overhaul screen navigation and UX

  Refactors the Review Screen for a significantly improved user experience by
  implementing a unified navigation model and enhancing visual clarity.

  - **Unified Navigation:** Replaces disjointed navigation areas with a single,
  seamless list for Prompt, Reasoning, Scripts, and Files. Arrow keys now
  intuitively navigate all items. - **Enhanced UI:**
    - Header stats now show totals for the entire transaction, not just approved files.
    - File list items are color-coded by change type (ADD, DEL) and diff stats for at-a-glance understanding.
    - The Bulk Repair modal is now fully interactive, allowing navigation with arrow keys.
  - **Improved Interactivity:** The 'Enter' key now contextually expands
  details, shows diffs, or opens script outputs based on the selected item.
promptSummary: >-
  The user requested a significant refactor of the Review Screen to improve
  navigation, add more color for clarity, update header stats, and make the bulk
  repair modal interactive.
reasoning:
  - >-
    This is a comprehensive update that executes Parts 1 and 2 of the master
    plan, focusing on a major refactoring of the Review Screen for improved
    navigation, user experience, and visual clarity.
  - '### Part 1: Foundational Refactoring'
  - >-
    I've unified the navigation model within the `ReviewScreen`. Previously,
    navigating files and other sections like scripts were separate; now, they
    are part of a single, seamless list. This makes moving up and down the
    screen with arrow keys far more intuitive.
  - >-
    -   **`review.store.ts`**: The state management has been updated to support
    this unified navigation. It also now includes state for navigating options
    within the "Bulk Repair" modal, which was previously static.
  - >-
    -   **`useReviewScreen.tsx`**: The hook now contains the core logic for the
    new navigation. It creates a unified list of all navigable items (Prompt,
    Reasoning, Scripts, Files) and manages the user's position within it. Input
    handling has been completely reworked to map keys like `Enter` and `Space`
    contextually to the currently selected item type.
  - '### Part 2: UI/UX and Visual Clarity Enhancements'
  - >-
    Building on the new foundation, I've implemented significant visual
    upgrades.
  - '-   **`ReviewScreen.tsx`**:'
  - >-
    -   **Header Stats**: The header now displays the *total* additions and
    removals for the entire transaction, providing a better at-a-glance summary.
    The count of approved files is shown alongside the total file count (e.g.,
    `2/3 Approved`).
  - >-
    -   **Color-Coding**: File list items are now color-coded for better
    readability. Added files are green, deleted files are red, and diff stats
    (`+10/-5`) are also colored appropriately.
  - >-
    -   **Interactive Bulk Repair**: The bulk repair modal is no longer just a
    static list. You can now navigate the repair options with the up/down arrow
    keys, and the selected option is clearly highlighted.
  - >-
    This combined set of changes makes the Review Screen more powerful,
    ergonomic, and easier to understand.
operations:
  - type: write
    path: src/stores/review.store.ts
    content: >+
      --- src/stores/review.store.ts

      +++ src/stores/review.store.ts

      @@ -21,21 +21,24 @@
           scriptErrorIndex: number;
           fileReviewStates: Map<string, { status: FileReviewStatus; error?: string }>;
       
      +    selectedBulkRepairOptionIndex: number;

      +
           actions: {
      -        load: (transactionId: string, initialState?: { bodyView:
      ReviewBodyView }) => void;

      -        moveSelectionUp: () => void;

      -        moveSelectionDown: () => void;

      +        load: (transactionId: string, initialState?:
      Partial<Pick<ReviewState, 'bodyView' | 'selectedBulkRepairOptionIndex'>>)
      => void;

      +        moveSelectionUp: (listSize: number) => void;

      +        moveSelectionDown: (listSize: number) => void;
               expandDiff: () => void;
               toggleBodyView: (view: Extract<
                   ReviewBodyView,
                   'diff' | 'reasoning' | 'script_output' | 'bulk_repair' | 'confirm_handoff'
               >) => void;
               setBodyView: (view: ReviewBodyView) => void;
               approve: () => void;
               startApplySimulation: (scenario: 'success' | 'failure') => void;
      -        tryRepairFile: () => void;

      +        tryRepairFile: (fileId: string) => void;
               showBulkRepair: () => void;
               executeBulkRepairOption: (option: number) => Promise<void>;
               confirmHandoff: () => void;
      @@ -47,6 +50,8 @@
               updateFileReviewStatus: (fileId: string, status: FileReviewStatus, error?: string) => void;
               toggleFileApproval: (fileId: string) => void;
               rejectAllFiles: () => void;
      +        navigateBulkRepairUp: () => void;

      +        navigateBulkRepairDown: () => void;
           };
       }
       
      @@ -58,6 +63,7 @@
           reasoningScrollIndex: 0,
           scriptErrorIndex: 0,
           fileReviewStates: new Map(),
      +    selectedBulkRepairOptionIndex: 0,
       
           actions: {
               load: (transactionId, initialState) => {
      @@ -74,20 +80,15 @@
                       reasoningScrollIndex: 0,
                       scriptErrorIndex: 0,
                       applySteps: JSON.parse(JSON.stringify(INITIAL_APPLY_STEPS)),
      +                selectedBulkRepairOptionIndex: 0,

      +                ...initialState,
                   });
               },
      -        moveSelectionUp: () => set(state => {

      -            const transactionId =
      useViewStore.getState().selectedTransactionId;

      -            const tx = useTransactionStore.getState().transactions.find(t
      => t.id === transactionId);

      -            if (!tx) return {};

      -            const listSize = (tx.files?.length || 0) +
      (tx.scripts?.length || 0);

      +        moveSelectionUp: (listSize) => set(state => {
                   return { selectedItemIndex: moveIndex(state.selectedItemIndex, 'up', listSize) };
               }),
      -        moveSelectionDown: () => set(state => {

      -            const transactionId =
      useViewStore.getState().selectedTransactionId;

      -            const tx = useTransactionStore.getState().transactions.find(t
      => t.id === transactionId);

      -            if (!tx) return {};

      -            const listSize = (tx.files?.length || 0) +
      (tx.scripts?.length || 0);

      +        moveSelectionDown: (listSize) => set(state => {
                   return { selectedItemIndex: moveIndex(state.selectedItemIndex, 'down', listSize) };
               }),
               toggleBodyView: (view) => set(state => {
      @@ -134,13 +135,12 @@
                   // This avoids a direct dependency from the store to app-level navigation.
               },
      -        tryRepairFile: () => {

      +        tryRepairFile: (fileId) => {
                   const selectedTransactionId = useViewStore.getState().selectedTransactionId;
      -            const { selectedItemIndex, fileReviewStates } = get();

      +            const { fileReviewStates } = get();
                   if (!selectedTransactionId) return;
                   const tx = useTransactionStore.getState().transactions.find(t => t.id === selectedTransactionId);
      -            const file = tx?.files?.[selectedItemIndex];

      +            const file = tx?.files?.find(f => f.id === fileId);
                   if (!file) return;
       
                   const { status, error } = fileReviewStates.get(file.id) || {};
      @@ -216,5 +216,11 @@
                       return { fileReviewStates: newStates };
                   });
               },
      +        navigateBulkRepairUp: () => set(state => ({

      +            selectedBulkRepairOptionIndex:
      moveIndex(state.selectedBulkRepairOptionIndex, 'up', 4),

      +        })),

      +        navigateBulkRepairDown: () => set(state => ({

      +            selectedBulkRepairOptionIndex:
      moveIndex(state.selectedBulkRepairOptionIndex, 'down', 4),

      +        })),
           },
       }));

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useReviewScreen.tsx
    content: >
      --- src/hooks/useReviewScreen.tsx

      +++ src/hooks/useReviewScreen.tsx

      @@ -5,17 +5,29 @@
       import { useTransactionStore, selectSelectedTransaction } from '../stores/transaction.store';
       import type { FileItem } from '../types/domain.types';
       
      +type NavigableItem =

      +    | { type: 'prompt' }

      +    | { type: 'reasoning' }

      +    | { type: 'script'; id: string }

      +    | { type: 'file'; id: string };

      +
       export const useReviewScreen = () => {
           const store = useReviewStore();
           const {
               selectedItemIndex,
               bodyView,
               patchStatus,
      +        selectedBulkRepairOptionIndex,
           } = store;
       
           const transaction = useTransactionStore(selectSelectedTransaction);
           const { showDashboardScreen } = useAppStore(s => s.actions);
       
      +    const navigableItems = useMemo((): NavigableItem[] => {

      +        if (!transaction) return [];

      +        const scriptItems: NavigableItem[] = (transaction.scripts ||
      []).map(s => ({ type: 'script', id: s.command }));

      +        const fileItems: NavigableItem[] = (transaction.files ||
      []).map(f => ({ type: 'file', id: f.id }));

      +        return [{ type: 'prompt' }, { type: 'reasoning' },
      ...scriptItems, ...fileItems];

      +    }, [transaction]);

      +
           // Memoize files to prevent re-renders, fixing the exhaustive-deps lint warning.
           const files: FileItem[] = useMemo(() => transaction?.files || [], [transaction]);
           const fileReviewStates = useReviewStore(s => s.fileReviewStates);
      @@ -23,13 +35,21 @@
           const reviewStats = useMemo(() => {
               const approvedFiles = files.filter(f => fileReviewStates.get(f.id)?.status === 'APPROVED');
               return {
      +            totalFiles: files.length,

      +            totalLinesAdded: files.reduce((sum, f) => sum + f.linesAdded,
      0),

      +            totalLinesRemoved: files.reduce((sum, f) => sum +
      f.linesRemoved, 0),
                   numFiles: files.length,
                   approvedFilesCount: approvedFiles.length,
                   approvedLinesAdded: approvedFiles.reduce((sum, f) => sum + f.linesAdded, 0),
                   approvedLinesRemoved: approvedFiles.reduce((sum, f) => sum + f.linesRemoved, 0),
               };
           }, [files, fileReviewStates]);
       
      -    const { numFiles, approvedFilesCount } = reviewStats;

      +    const {

      +        numFiles, approvedFilesCount, totalLinesAdded, totalLinesRemoved,

      +    } = reviewStats;

      +

      +    const isFileSelected = navigableItems[selectedItemIndex]?.type ===
      'file';
       
           const scripts = transaction?.scripts || [];
       
      @@ -50,11 +70,14 @@
               navigateScriptErrorDown,
               toggleFileApproval,
               rejectAllFiles,
      +        navigateBulkRepairUp,

      +        navigateBulkRepairDown,
           } = store.actions;
       
           const openCopyMode = () => {
               if (!transaction) return;
      -        const selectedFile = selectedItemIndex < files.length ?
      files[selectedItemIndex] : undefined;

      +        const currentItem = navigableItems[selectedItemIndex];

      +        const selectedFile = currentItem?.type === 'file' ? files.find(f
      => f.id === currentItem.id) : undefined;
               useCopyStore.getState().actions.openForReview(transaction, transaction.files || [], selectedFile);
           };
       
      @@ -84,10 +107,17 @@
               if (key.return) confirmHandoff();
           };
       
      -    const handleBulkRepairInput = (input: string) => {

      +    const handleBulkRepairInput = (input: string, key: Key): void => {

      +        if (key.upArrow) navigateBulkRepairUp();

      +        if (key.downArrow) navigateBulkRepairDown();

      +        if (key.return) {

      +            executeBulkRepairOption(selectedBulkRepairOptionIndex + 1);
      // Options are 1-based

      +            return;

      +        }

      +
               if (input >= '1' && input <= '4') {
                   executeBulkRepairOption(parseInt(input));
               }
           };
       
           const handleReasoningInput = (input: string, key: Key): void => {
      @@ -99,10 +129,9 @@
               if (input.toLowerCase() === 'j') navigateScriptErrorDown();
               if (input.toLowerCase() === 'k') navigateScriptErrorUp();
               if (key.return) toggleBodyView('script_output');
      -        if (input.toLowerCase() === 'c') {

      -            const scriptIndex = selectedItemIndex - numFiles;

      -            const selectedScript = scripts[scriptIndex];

      -            if (selectedScript) {

      +        if (input.toLowerCase() === 'c') { // TODO: this copy logic is
      not great.

      +            const currentItem = navigableItems[selectedItemIndex];

      +            const selectedScript = currentItem?.type === 'script' ?
      scripts.find(s => s.command === currentItem.id) : undefined;

      +            if (selectedScript) {
                       // eslint-disable-next-line no-console
                       console.log(`[CLIPBOARD] Copied script output: ${selectedScript.command}`);
                   }
      @@ -122,29 +151,34 @@
               }
       
               // Main View Navigation
      -        if (key.upArrow) moveSelectionUp();

      -        if (key.downArrow) moveSelectionDown();

      -        if (input.toLowerCase() === 'r') toggleBodyView('reasoning');

      +        if (key.upArrow) moveSelectionUp(navigableItems.length);

      +        if (key.downArrow) moveSelectionDown(navigableItems.length);

      +

      +        const currentItem = navigableItems[selectedItemIndex];
       
               if (input === ' ') {
      -            if (selectedItemIndex < numFiles) {

      -                const file = files[selectedItemIndex];

      -                const fileState = file ? fileReviewStates.get(file.id) :
      undefined;

      -                if (file && fileState && fileState.status !== 'FAILED') {

      -                    toggleFileApproval(file.id);

      +            if (currentItem?.type === 'file') {

      +                const fileState = fileReviewStates.get(currentItem.id);

      +                if (fileState && fileState.status !== 'FAILED') {

      +                    toggleFileApproval(currentItem.id);
                       }
                   }
               }
       
      -        if (input.toLowerCase() === 'd') {

      -            if (selectedItemIndex < numFiles) {

      -                toggleBodyView('diff');

      -            }

      -        }

      +        if (input.toLowerCase() === 'd' && currentItem?.type === 'file')
      {

      +            toggleBodyView('diff');

      +        }

      +

      +        if (input.toLowerCase() === 'r') {

      +            toggleBodyView('reasoning');

      +        }
       
               if (key.return) { // Enter key
      -            if (selectedItemIndex >= numFiles) { // It's a script

      +            if (currentItem?.type === 'file') {

      +                toggleBodyView('diff');

      +            } else if (currentItem?.type === 'reasoning') {

      +                toggleBodyView('reasoning');

      +            } else if (currentItem?.type === 'script') {
                       toggleBodyView('script_output');
                   }
               }
      @@ -163,11 +197,11 @@
                       const hasFailedFiles = Array.from(fileReviewStates.values()).some(s => s.status === 'FAILED');
                       if (hasFailedFiles) showBulkRepair();
                   } else {
      -                if (selectedItemIndex < numFiles) {

      -                    const file = files[selectedItemIndex];

      -                    const fileState = file ?
      fileReviewStates.get(file.id) : undefined;

      -                    if (file && fileState?.status === 'FAILED')
      tryRepairFile();

      +                if (currentItem?.type === 'file') {

      +                    const fileState =
      fileReviewStates.get(currentItem.id);

      +                    if (fileState?.status === 'FAILED')
      tryRepairFile(currentItem.id);
                       }
                   }
               }
           };
       
      @@ -178,7 +212,7 @@
       
               switch (bodyView) {
                   case 'confirm_handoff': return handleHandoffConfirmInput(input, key);
      -            case 'bulk_repair': return handleBulkRepairInput(input);

      +            case 'bulk_repair': return handleBulkRepairInput(input, key);
                   case 'reasoning': return handleReasoningInput(input, key);
                   case 'script_output': return handleScriptOutputInput(input, key);
                   case 'diff': return handleDiffInput(input);
      @@ -193,7 +227,11 @@
               files,
               scripts,
               patchStatus,
      +        navigableItems,

      +        isFileSelected,

      +        selectedBulkRepairOptionIndex,
               ...reviewStats,
           };
       };
    patchStrategy: standard-diff
  - type: write
    path: src/components/ReviewScreen.tsx
    content: >
      --- src/components/ReviewScreen.tsx

      +++ src/components/ReviewScreen.tsx

      @@ -1,15 +1,15 @@
       import { Box, Text } from 'ink';
       import Separator from './Separator';
       import DiffScreen from './DiffScreen';
       import ReasonScreen from './ReasonScreen';
      -import type { ScriptResult, FileItem } from '../types/domain.types';

      +import type { ScriptResult, FileItem, FileChangeType } from
      '../types/domain.types';
       import { useReviewScreen } from '../hooks/useReviewScreen';
       
       // --- Sub-components ---
       
      -const FileItemRow = ({ file, isSelected, reviewStatus, reviewError }: {

      +const FileItemRow = ({ file, reviewStatus, reviewError, isFocused }: {
           file: FileItem;
      -    isSelected: boolean;
           reviewStatus: string;
           reviewError?: string;
      +    isFocused: boolean;
       }) => {
           let icon;
           let iconColor;
      @@ -21,14 +21,24 @@
               case 'RE_APPLYING': icon = '[●]'; iconColor = 'cyan'; break;
           }
       
      -    const diffStats = `(+${file.linesAdded}/-${file.linesRemoved})`;

      +    const typeColor = (type: FileChangeType) => {

      +        switch (type) {

      +            case 'ADD': return 'green';

      +            case 'DEL': return 'red';

      +            case 'REN': return 'yellow';

      +            default: return 'white';

      +        }

      +    };

      +

      +    const diffStats = <Text>(+<Text
      color="green">{file.linesAdded}</Text>/-<Text
      color="red">{file.linesRemoved}</Text>)</Text>;
           const strategy = file.strategy === 'standard-diff' ? 'diff' : file.strategy;
      -    const prefix = isSelected ? '> ' : '  ';

      +    const prefix = isFocused ? '> ' : '  ';

      +    const colorProps = isFocused ? { bold: true, color: 'cyan' } : {};
       
           if (reviewStatus === 'FAILED') {
               return (
                   <Box>
      -                <Text bold={isSelected} color={isSelected ? 'cyan' :
      undefined}>

      +                <Text {...colorProps}>
                           {prefix}<Text color={iconColor}>{icon} FAILED {file.path}</Text>
                           <Text color="red">    ({reviewError})</Text>
                       </Text>
      @@ -39,7 +49,7 @@
           if (reviewStatus === 'AWAITING') {
               return (
                   <Box>
      -                <Text bold={isSelected} color={isSelected ? 'cyan' :
      undefined}>

      +                <Text {...colorProps}>
                           {prefix}<Text color={iconColor}>{icon} AWAITING {file.path}</Text>
                           <Text color="yellow">    (Bulk re-apply prompt copied!)</Text>
                       </Text>
      @@ -50,7 +60,7 @@
           if (reviewStatus === 'RE_APPLYING') {
               return (
                    <Box>
      -                <Text bold={isSelected} color={isSelected ? 'cyan' :
      undefined}>

      +                <Text {...colorProps}>
                           {prefix}<Text color={iconColor}>{icon} RE-APPLYING... {file.path}</Text>
                           <Text color="cyan"> (using &apos;replace&apos; strategy)</Text>
                       </Text>
      @@ -60,8 +70,8 @@
       
           return (
               <Box>
      -            <Text bold={isSelected} color={isSelected ? 'cyan' :
      undefined}>

      -                {prefix}<Text color={iconColor}>{icon}</Text> MOD
      {file.path} {diffStats} [{strategy}]

      +            <Text {...colorProps}>

      +                {prefix}<Text color={iconColor}>{icon}</Text> {file.type}
      <Text color={typeColor(file.type)}>{file.path}</Text> {diffStats}
      [{strategy}]
                   </Text>
               </Box>
           );
      @@ -102,12 +112,16 @@
               scriptErrorIndex,
               fileReviewStates,
               numFiles,
      +        totalLinesAdded,

      +        totalLinesRemoved,
               approvedFilesCount,
               approvedLinesRemoved,
      +        navigableItems,

      +        selectedBulkRepairOptionIndex,
           } = useReviewScreen();
       
           if (!transaction) {
               return <Text>Loading review...</Text>;
           }
           const { hash, message, prompt = '', reasoning = '' } = transaction;
       
           const renderBody = () => {
               if (bodyView === 'none') return null;
       
               if (bodyView === 'reasoning') {
      -            const reasoningLinesCount = (reasoning ||
      '').split('\n').length;

      +            const reasoningText = reasoning || '';

      +            const reasoningLinesCount = reasoningText.split('\n').length;
                   const visibleLinesCount = 10;
                   return (
                       <Box flexDirection="column">
                           <ReasonScreen
      -                        reasoning={reasoning}

      +                        reasoning={reasoningText}
                               scrollIndex={reasoningScrollIndex}
                               visibleLinesCount={visibleLinesCount}
                           />
      @@ -122,7 +126,8 @@
               }
               
               if (bodyView === 'diff') {
      -            const selectedFile = files[selectedItemIndex];

      +            const currentItem = navigableItems[selectedItemIndex];

      +            const selectedFile = currentItem?.type === 'file' ?
      files.find(f => f.id === currentItem.id) : undefined;
                   if (!selectedFile) return null;
                   return (
                       <DiffScreen
      @@ -134,8 +139,9 @@
               }
       
               if (bodyView === 'script_output') {
      -             const scriptIndex = selectedItemIndex - numFiles;

      -             const selectedScript = scripts[scriptIndex];

      +             const currentItem = navigableItems[selectedItemIndex];

      +             const scriptIndex = currentItem?.type === 'script' ?
      navigableItems.filter(i => i.type === 'script').findIndex(i => i.id ===
      currentItem.id) : -1;

      +             const selectedScript = scripts[scriptIndex] || null;
                    if (!selectedScript) return null;
                    
                    const outputLines = selectedScript.output.split('\n');
      @@ -196,7 +202,7 @@
       
                           <Box flexDirection="column">
                               {repairOptions.map((opt, i) => (
      -                            <Text key={i}>

      -                                {i === 0 ? '> ' : '  '}

      +                            <Text key={i}
      color={selectedBulkRepairOptionIndex === i ? 'cyan' : undefined}>

      +                                {selectedBulkRepairOptionIndex === i ? '>
      ' : '  '}
                                       {opt}
                                   </Text>
                               ))}
      @@ -227,14 +233,13 @@
               // Main footer
               const actions = ['(↑↓) Nav'];
       
      -        const isFileSelected = selectedItemIndex < numFiles;

      +        const currentItem = navigableItems[selectedItemIndex];
               const hasFailedFiles = Array.from(fileReviewStates.values()).some(s => s.status === 'FAILED');
               
      -        if (isFileSelected) {

      -            const selectedFile = files[selectedItemIndex];

      -            const fileState = selectedFile ?
      fileReviewStates.get(selectedFile.id) : undefined;

      -            if (selectedFile && fileState?.status !== 'FAILED') {

      +        if (currentItem?.type === 'file') {

      +            const fileState = fileReviewStates.get(currentItem.id);

      +            if (fileState?.status !== 'FAILED') {
                       actions.push('(Spc) Toggle');
                   }
                   actions.push('(D)iff');
      @@ -243,12 +248,16 @@
                   if (selectedFile && fileState?.status === 'FAILED') {
                       actions.push('(T)ry Repair');
                   }
      -        } else { // script selected

      +        } else if (currentItem?.type === 'script') {
                   actions.push('(Ent) Expand Details');
      -        }

      -

      -        actions.push('(R)easoning');

      -        

      +        } else { // Prompt or Reasoning

      +            actions.push('(Ent) Expand');

      +        }

      +

      +        if (currentItem?.type !== 'reasoning') {

      +            actions.push('(R)easoning');

      +        }

      +
               // Add bulk repair if there are failed files
               if (hasFailedFiles) {
                   actions.push('(Shift+T) Bulk Repair');
      @@ -276,21 +285,28 @@
                       <Box flexDirection="column">
                           <Text>{hash} · {message}</Text>
                           <Text>
      -                        (<Text
      color="green">+{approvedLinesAdded}</Text>/<Text
      color="red">-{approvedLinesRemoved}</Text>) ·
      {approvedFilesCount}/{numFiles} Files

      +                        (<Text
      color="green">+{totalLinesAdded}</Text>/<Text
      color="red">-{totalLinesRemoved}</Text>) · {numFiles} Files ·
      {approvedFilesCount}/{numFiles} Approved
                               {patchStatus === 'PARTIAL_FAILURE' && scripts.length === 0 && <Text> · Scripts: SKIPPED</Text>}
                               {patchStatus === 'PARTIAL_FAILURE' && <Text color="red" bold> · MULTIPLE PATCHES FAILED</Text>}
                           </Text>
                       </Box>
       
                       <Box flexDirection="column" marginTop={1}>
      -                    <Text>

      -                        (P)rompt ▸ {(prompt || '').substring(0, 60)}...

      +                    <Text color={navigableItems[selectedItemIndex]?.type
      === 'prompt' ? 'cyan' : undefined}>

      +                        {navigableItems[selectedItemIndex]?.type ===
      'prompt' ? '> ' : '  '}

      +                        (P)rompt ▸ {(prompt || '').substring(0, 60)}...
                           </Text>
      -                    <Text>

      -                        (R)easoning ({(reasoning ||
      '').split('\n\n').length} steps) {bodyView === 'reasoning' ? '▾' : '▸'}{'
      '}

      +                    <Text color={navigableItems[selectedItemIndex]?.type
      === 'reasoning' ? 'cyan' : undefined}>

      +                        {navigableItems[selectedItemIndex]?.type ===
      'reasoning' ? '> ' : '  '}

      +                        (R)easoning ({(reasoning ||
      '').split('\n\n').length} steps) {bodyView === 'reasoning' ? '▾' : '▸'}{'
      '}
                               {((reasoning || '').split('\n')[0] ?? '').substring(0, 50)}...
                           </Text>
                       </Box>
                   </Box>
       
                   <Separator />
       
                   {/* Script Results (if any) */}
      -            {scripts.length > 0 && (

      +            {scripts.length > 0 && navigableItems.some(i => i.type ===
      'script') && (
                       <>
                           <Box flexDirection="column" marginY={1}>
                               {scripts.map((script: ScriptResult, index: number) => (
      -                            <ScriptItemRow

      -                                key={script.command}

      -                                script={script}

      -                                isSelected={selectedItemIndex ===
      numFiles + index}

      -                                isExpanded={bodyView === 'script_output'
      && selectedItemIndex === numFiles + index}

      -                            />

      +                            (() => {

      +                                const navItemIndex =
      navigableItems.findIndex(i => i.type === 'script' && i.id ===
      script.command);

      +                                const isSelected = selectedItemIndex ===
      navItemIndex;

      +                                return (

      +                                    <ScriptItemRow

      +                                        key={script.command}

      +                                        script={script}

      +                                        isSelected={isSelected}

      +                                        isExpanded={bodyView ===
      'script_output' && isSelected}

      +                                    />

      +                                );

      +                            })()
                               ))}
                           </Box>
                           <Separator />
      @@ -300,14 +316,16 @@
                   {/* Files Section */}
                   <Box flexDirection="column" marginY={1}>
                       <Text bold>FILES</Text>
      -                {files.map((file: FileItem, index: number) => {

      -                    const reviewState = fileReviewStates.get(file.id);

      -                    return (<FileItemRow

      -                        key={file.id}

      -                        file={file}

      -                        isSelected={selectedItemIndex === index}

      -                        reviewStatus={reviewState?.status || 'AWAITING'}

      -                        reviewError={reviewState?.error}

      -                    />);

      +                {files.map((file: FileItem) => {

      +                    const navItemIndex = navigableItems.findIndex(i =>
      i.type === 'file' && i.id === file.id);

      +                    const isFocused = selectedItemIndex === navItemIndex;

      +                    const reviewState = fileReviewStates.get(file.id);

      +                    return (

      +                        <FileItemRow

      +                            key={file.id}

      +                            file={file}

      +                            isFocused={isFocused}

      +                            reviewStatus={reviewState?.status ||
      'AWAITING'}

      +                            reviewError={reviewState?.error}

      +                        />

      +                    );
                       })}
                   </Box>
                   
    patchStrategy: standard-diff
snapshot:
  src/stores/review.store.ts: >-
    import { create } from 'zustand';

    import { useAppStore } from './app.store';

    import { useTransactionStore } from './transaction.store';

    import { useViewStore } from './view.store';

    import { ReviewService } from '../services/review.service';

    import { moveIndex } from './navigation.utils';

    import { INITIAL_APPLY_STEPS } from '../constants/review.constants';

    import type { FileReviewStatus } from '../types/domain.types';


    export interface ApplyStep {
        id: string;
        title: string;
        status: 'pending' | 'active' | 'done' | 'failed' | 'skipped';
        details?: string;
        substeps?: ApplyStep[];
        duration?: number;
    }

    export type ReviewBodyView = 'diff' | 'reasoning' | 'script_output' |
    'bulk_repair' | 'confirm_handoff' | 'none';

    export type PatchStatus = 'SUCCESS' | 'PARTIAL_FAILURE';

    export type ApplyUpdate =
        | { type: 'UPDATE_STEP'; payload: { id: string; status: ApplyStep['status']; duration?: number; details?: string } }
        | { type: 'ADD_SUBSTEP'; payload: { parentId: string; substep: Omit<ApplyStep, 'substeps'> } };

    interface ReviewState {
        patchStatus: PatchStatus;
        applySteps: ApplyStep[];
        selectedItemIndex: number;
        bodyView: ReviewBodyView;
        isDiffExpanded: boolean;
        reasoningScrollIndex: number;
        scriptErrorIndex: number;
        fileReviewStates: Map<string, { status: FileReviewStatus; error?: string }>;

        actions: {
            load: (transactionId: string, initialState?: { bodyView: ReviewBodyView }) => void;
            moveSelectionUp: () => void;
            moveSelectionDown: () => void;
            expandDiff: () => void;
            toggleBodyView: (view: Extract<
                ReviewBodyView,
                'diff' | 'reasoning' | 'script_output' | 'bulk_repair' | 'confirm_handoff'
            >) => void;
            setBodyView: (view: ReviewBodyView) => void;
            approve: () => void;
            startApplySimulation: (scenario: 'success' | 'failure') => void;
            tryRepairFile: () => void;
            showBulkRepair: () => void;
            executeBulkRepairOption: (option: number) => Promise<void>;
            confirmHandoff: () => void;
            scrollReasoningUp: () => void;
            scrollReasoningDown: () => void;
            navigateScriptErrorUp: () => void;
            navigateScriptErrorDown: () => void;
            updateApplyStep: (id: string, status: ApplyStep['status'], duration?: number, details?: string) => void;
            addApplySubstep: (parentId: string, substep: Omit<ApplyStep, 'substeps'>) => void;
            updateFileReviewStatus: (fileId: string, status: FileReviewStatus, error?: string) => void;
            toggleFileApproval: (fileId: string) => void;
            rejectAllFiles: () => void;
        };
    }


    export const useReviewStore = create<ReviewState>((set, get) => ({
        patchStatus: 'SUCCESS',
        applySteps: INITIAL_APPLY_STEPS,
        selectedItemIndex: 0,
        bodyView: 'none',
        isDiffExpanded: false,
        reasoningScrollIndex: 0,
        scriptErrorIndex: 0,
        fileReviewStates: new Map(),

        actions: {
            load: (transactionId, initialState) => {
                const transaction = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                if (!transaction) return;
                
                const { patchStatus, fileReviewStates } = ReviewService.prepareTransactionForReview(transaction);

                useViewStore.getState().actions.setSelectedTransactionId(transaction.id);
                set({
                    patchStatus,
                    fileReviewStates,
                    selectedItemIndex: 0,
                    bodyView: initialState?.bodyView ?? 'none',
                    isDiffExpanded: false,
                    reasoningScrollIndex: 0,
                    scriptErrorIndex: 0,
                    applySteps: JSON.parse(JSON.stringify(INITIAL_APPLY_STEPS)),
                });
            },
            moveSelectionUp: () => set(state => {
                const transactionId = useViewStore.getState().selectedTransactionId;
                const tx = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                if (!tx) return {};
                const listSize = (tx.files?.length || 0) + (tx.scripts?.length || 0);
                return { selectedItemIndex: moveIndex(state.selectedItemIndex, 'up', listSize) };
            }),
            moveSelectionDown: () => set(state => {
                const transactionId = useViewStore.getState().selectedTransactionId;
                const tx = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                if (!tx) return {};
                const listSize = (tx.files?.length || 0) + (tx.scripts?.length || 0);
                return { selectedItemIndex: moveIndex(state.selectedItemIndex, 'down', listSize) };
            }),
            toggleBodyView: (view) => set(state => {
                const transactionId = useViewStore.getState().selectedTransactionId;
                const tx = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                const files = tx?.files || [];
                if (view === 'diff' && state.selectedItemIndex >= files.length) return {};
                return {
                    bodyView: state.bodyView === view ? 'none' : view,
                    isDiffExpanded: false,
                };
            }),
            setBodyView: (view) => set({ bodyView: view }),
            expandDiff: () => set(state => ({ isDiffExpanded: !state.isDiffExpanded })),
            approve: () => {
                const { selectedTransactionId } = useViewStore.getState();
                if (selectedTransactionId) {
                    useTransactionStore.getState().actions.updateTransactionStatus(selectedTransactionId, 'APPLIED');
                    useAppStore.getState().actions.showDashboardScreen();
                }
            },
            startApplySimulation: async (scenario) => {
                const { showReviewProcessingScreen } = useAppStore.getState().actions;
                const { updateApplyStep, addApplySubstep } = get().actions;
                set({ applySteps: JSON.parse(JSON.stringify(INITIAL_APPLY_STEPS)) });
                showReviewProcessingScreen();
                const simulationGenerator = ReviewService.runApplySimulation(scenario);
                for await (const update of simulationGenerator) {
                    if (update.type === 'UPDATE_STEP') {
                        updateApplyStep(
                            update.payload.id,
                            update.payload.status,
                            update.payload.duration,
                            update.payload.details,
                        );
                    } else if (update.type === 'ADD_SUBSTEP') {
                        addApplySubstep(update.payload.parentId, update.payload.substep);
                    }
                }
                // Transition back to review screen is handled by the processing screen component or a separate flow
                // For this simulation, we'll assume it transitions back, but the action itself doesn't need to do it.
                // This avoids a direct dependency from the store to app-level navigation.
            },
            tryRepairFile: () => {
                const selectedTransactionId = useViewStore.getState().selectedTransactionId;
                const { selectedItemIndex, fileReviewStates } = get();
                if (!selectedTransactionId) return;
                const tx = useTransactionStore.getState().transactions.find(t => t.id === selectedTransactionId);
                const file = tx?.files?.[selectedItemIndex];
                if (!file) return;

                const { status, error } = fileReviewStates.get(file.id) || {};
                if (status !== 'FAILED') return;
                
                ReviewService.tryRepairFile(file, error);
                get().actions.updateFileReviewStatus(file.id, 'AWAITING');
            },
            showBulkRepair: () => get().actions.toggleBodyView('bulk_repair'),
            executeBulkRepairOption: async (option) => {
                const selectedTransactionId = useViewStore.getState().selectedTransactionId;
                const tx = useTransactionStore.getState().transactions.find(t => t.id === selectedTransactionId);
                if (!tx?.files) return;

                const failedFiles = tx.files.filter(f => get().fileReviewStates.get(f.id)?.status === 'FAILED');
                if (failedFiles.length === 0) {
                    set({ bodyView: 'none' });
                    return;
                }

                switch (option) {
                    case 1:
                        ReviewService.generateBulkRepairPrompt(failedFiles);
                        set({ bodyView: 'none' });
                        break;
                    case 2: {
                        set({ bodyView: 'none' });
                        failedFiles.forEach(f => get().actions.updateFileReviewStatus(f.id, 'RE_APPLYING'));
                        const results = await ReviewService.runBulkReapply(failedFiles);
                        results.forEach(result =>
                            get().actions.updateFileReviewStatus(
                                result.id, result.status, result.error,
                            ),
                        );
                        break;
                    }
                    case 3:
                        get().actions.setBodyView('confirm_handoff');
                        break;
                    case 4:
                        failedFiles.forEach(file => {
                            get().actions.updateFileReviewStatus(file.id, 'REJECTED');
                        });
                        set({ bodyView: 'none' });
                        break;
                    default:
                        set({ bodyView: 'none' });
                }
            },
            confirmHandoff: () => {
                const transactionId = useViewStore.getState().selectedTransactionId;
                const tx = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                if (!tx?.files) return;
                const { fileReviewStates } = get();
                ReviewService.generateHandoffPrompt(tx, fileReviewStates);
                ReviewService.performHandoff(tx.hash);
            },
            scrollReasoningUp: () => set(state => ({ reasoningScrollIndex: Math.max(0, state.reasoningScrollIndex - 1) })),
            scrollReasoningDown: () => set(state => {
                const transactionId = useViewStore.getState().selectedTransactionId;
                const tx = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                if (!tx?.reasoning) return {};
                const maxLines = tx.reasoning.split('\n').length;
                return { reasoningScrollIndex: Math.min(maxLines - 1, state.reasoningScrollIndex + 1) };
            }),
            navigateScriptErrorUp: () => set(state => ({ scriptErrorIndex: Math.max(0, state.scriptErrorIndex - 1) })),
            navigateScriptErrorDown: () => set(state => {
                const transactionId = useViewStore.getState().selectedTransactionId;
                const tx = useTransactionStore.getState().transactions.find(t => t.id === transactionId);
                if (!tx?.scripts || !tx?.files) return {};
                const selectedScript = tx.scripts[state.selectedItemIndex - tx.files.length];
                if (selectedScript?.output) {
                    const errorLines = selectedScript.output
                        .split('\n')
                        .filter(line => line.includes('Error') || line.includes('Warning'));
                    return { scriptErrorIndex: Math.min(errorLines.length - 1, state.scriptErrorIndex + 1) };
                }
                return {};
            }),
            updateApplyStep: (id, status, duration, details) => {
                set(state => ({
                    applySteps: state.applySteps.map(s => {
                        if (s.id === id) {
                            const newStep = { ...s, status };
                            if (duration !== undefined) newStep.duration = duration;
                            if (details !== undefined) newStep.details = details;
                            return newStep;
                        }
                        return s;
                    }),
                }));
            },
            addApplySubstep: (parentId, substep) => {
                set(state => ({
                    applySteps: state.applySteps.map(s => {
                        if (s.id === parentId) {
                            const newSubsteps = [...(s.substeps || []), substep as ApplyStep];
                            return { ...s, substeps: newSubsteps };
                        }
                        return s;
                    }),
                }));
            },
            updateFileReviewStatus: (fileId, status, error) => {
                set(state => {
                    const newStates = new Map(state.fileReviewStates);
                    newStates.set(fileId, { status, error });
                    return { fileReviewStates: newStates };
                });
            },
            toggleFileApproval: (fileId) => {
                set(state => {
                    const newStates = new Map(state.fileReviewStates);
                    const current = newStates.get(fileId);
                    if (current) {
                        const newStatus: FileReviewStatus = current.status === 'APPROVED' ? 'REJECTED' : 'APPROVED';
                        newStates.set(fileId, { status: newStatus, error: undefined });
                    }
                    return { fileReviewStates: newStates };
                });
            },
            rejectAllFiles: () => {
                set(state => {
                    const newStates = new Map(state.fileReviewStates);
                    for (const [fileId, reviewState] of newStates.entries()) {
                        if (reviewState.status === 'APPROVED') {
                            newStates.set(fileId, { status: 'REJECTED', error: undefined });
                        }
                    }
                    return { fileReviewStates: newStates };
                });
            },
        },
    }));
  src/hooks/useReviewScreen.tsx: >-
    import { useMemo } from 'react';

    import { useInput, type Key } from 'ink';

    import { useReviewStore } from '../stores/review.store';

    import { useAppStore } from '../stores/app.store';

    import { useCopyStore } from '../stores/copy.store';

    import { useTransactionStore, selectSelectedTransaction } from
    '../stores/transaction.store';

    import type { FileItem } from '../types/domain.types';


    export const useReviewScreen = () => {
        const store = useReviewStore();
        const {
            selectedItemIndex,
            bodyView,
            patchStatus,
        } = store;

        const transaction = useTransactionStore(selectSelectedTransaction);
        const { showDashboardScreen } = useAppStore(s => s.actions);

        // Memoize files to prevent re-renders, fixing the exhaustive-deps lint warning.
        const files: FileItem[] = useMemo(() => transaction?.files || [], [transaction]);
        const fileReviewStates = useReviewStore(s => s.fileReviewStates);

        const reviewStats = useMemo(() => {
            const approvedFiles = files.filter(f => fileReviewStates.get(f.id)?.status === 'APPROVED');
            return {
                numFiles: files.length,
                approvedFilesCount: approvedFiles.length,
                approvedLinesAdded: approvedFiles.reduce((sum, f) => sum + f.linesAdded, 0),
                approvedLinesRemoved: approvedFiles.reduce((sum, f) => sum + f.linesRemoved, 0),
            };
        }, [files, fileReviewStates]);

        const { numFiles, approvedFilesCount } = reviewStats;

        const scripts = transaction?.scripts || [];

        const {
            moveSelectionUp,
            moveSelectionDown,
            expandDiff,
            toggleBodyView,
            setBodyView,
            startApplySimulation,
            approve,
            tryRepairFile,
            showBulkRepair,
            executeBulkRepairOption,
            confirmHandoff,
            scrollReasoningUp,
            scrollReasoningDown,
            navigateScriptErrorUp,
            navigateScriptErrorDown,
            toggleFileApproval,
            rejectAllFiles,
        } = store.actions;

        const openCopyMode = () => {
            if (!transaction) return;
            const selectedFile = selectedItemIndex < files.length ? files[selectedItemIndex] : undefined;
            useCopyStore.getState().actions.openForReview(transaction, transaction.files || [], selectedFile);
        };

        // --- Input Handlers ---

        const handleGlobalInput = (input: string, key: Key): boolean => {
            if (input === '1') { // For demo purposes
                startApplySimulation('success'); return true;
            }
            if (input === '2') { // For demo purposes
                startApplySimulation('failure'); return true;
            }
            // The 'q' (quit/back) is now handled by the global hotkey hook.

            if (key.escape) {
                if (bodyView === 'bulk_repair' || bodyView === 'confirm_handoff') {
                    toggleBodyView(bodyView);
                } else if (bodyView !== 'none') {
                    setBodyView('none');
                }
                return true;
            }
            return false;
        };

        const handleHandoffConfirmInput = (_input: string, key: Key): void => {
            if (key.return) confirmHandoff();
        };

        const handleBulkRepairInput = (input: string) => {
            if (input >= '1' && input <= '4') {
                executeBulkRepairOption(parseInt(input));
            }
        };

        const handleReasoningInput = (input: string, key: Key): void => {
            if (key.upArrow) scrollReasoningUp();
            if (key.downArrow) scrollReasoningDown();
            if (input.toLowerCase() === 'r') toggleBodyView('reasoning');
        };

        const handleScriptOutputInput = (input: string, key: Key): void => {
            if (input.toLowerCase() === 'j') navigateScriptErrorDown();
            if (input.toLowerCase() === 'k') navigateScriptErrorUp();
            if (key.return) toggleBodyView('script_output');
            if (input.toLowerCase() === 'c') {
                const scriptIndex = selectedItemIndex - numFiles;
                const selectedScript = scripts[scriptIndex];
                if (selectedScript) {
                    // eslint-disable-next-line no-console
                    console.log(`[CLIPBOARD] Copied script output: ${selectedScript.command}`);
                }
            }
        };

        const handleDiffInput = (input: string) => {
            if (input.toLowerCase() === 'x') expandDiff();
            if (input.toLowerCase() === 'd') toggleBodyView('diff');
        };

        const handleMainNavigationInput = (input: string, key: Key): void => {
            // Handle Shift+R for reject all
            if (key.shift && input.toLowerCase() === 'r') {
                if (approvedFilesCount > 0 && transaction) {
                    rejectAllFiles();
                }
                return;
            }

            // Main View Navigation
            if (key.upArrow) moveSelectionUp();
            if (key.downArrow) moveSelectionDown();
            if (input.toLowerCase() === 'r') toggleBodyView('reasoning');

            if (input === ' ') {
                if (selectedItemIndex < numFiles) {
                    const file = files[selectedItemIndex];
                    const fileState = file ? fileReviewStates.get(file.id) : undefined;
                    if (file && fileState && fileState.status !== 'FAILED') {
                        toggleFileApproval(file.id);
                    }
                }
            }

            if (input.toLowerCase() === 'd') {
                if (selectedItemIndex < numFiles) {
                    toggleBodyView('diff');
                }
            }

            if (key.return) { // Enter key
                if (selectedItemIndex >= numFiles) { // It's a script
                    toggleBodyView('script_output');
                }
            }

            if (input.toLowerCase() === 'a') {
                if (approvedFilesCount > 0) {
                    approve();
                    showDashboardScreen();
                }
            }

            if (input.toLowerCase() === 'c') {
                openCopyMode();
            }

            if (input.toLowerCase() === 't') {
                if (key.shift) { // Bulk repair
                    const hasFailedFiles = Array.from(fileReviewStates.values()).some(s => s.status === 'FAILED');
                    if (hasFailedFiles) showBulkRepair();
                } else {
                    if (selectedItemIndex < numFiles) {
                        const file = files[selectedItemIndex];
                        const fileState = file ? fileReviewStates.get(file.id) : undefined;
                        if (file && fileState?.status === 'FAILED') tryRepairFile();
                    }
                }
            }
        };

        useInput((input: string, key: Key) => {
            if (handleGlobalInput(input, key)) {
                return;
            }

            switch (bodyView) {
                case 'confirm_handoff': return handleHandoffConfirmInput(input, key);
                case 'bulk_repair': return handleBulkRepairInput(input);
                case 'reasoning': return handleReasoningInput(input, key);
                case 'script_output': return handleScriptOutputInput(input, key);
                case 'diff': return handleDiffInput(input);
                default: return handleMainNavigationInput(input, key);
            }
        });

        return {
            ...store,
            fileReviewStates,
            selectedItemIndex,
            transaction,
            files,
            scripts,
            patchStatus,
            ...reviewStats,
        };
    };
  src/components/ReviewScreen.tsx: |-
    import { Box, Text } from 'ink';
    import Separator from './Separator';
    import DiffScreen from './DiffScreen';
    import ReasonScreen from './ReasonScreen';
    import type { ScriptResult, FileItem } from '../types/domain.types';
    import { useReviewScreen } from '../hooks/useReviewScreen';

    // --- Sub-components ---

    const FileItemRow = ({ file, isSelected, reviewStatus, reviewError }: {
        file: FileItem;
        isSelected: boolean;
        reviewStatus: string;
        reviewError?: string;
    }) => {
        let icon;
        let iconColor;
        switch (reviewStatus) {
            case 'APPROVED': icon = '[✓]'; iconColor = 'green'; break;
            case 'REJECTED': icon = '[✗]'; iconColor = 'red'; break;
            case 'FAILED': icon = '[!]'; iconColor = 'red'; break;
            case 'AWAITING': icon = '[●]'; iconColor = 'yellow'; break;
            case 'RE_APPLYING': icon = '[●]'; iconColor = 'cyan'; break;
        }

        const diffStats = `(+${file.linesAdded}/-${file.linesRemoved})`;
        const strategy = file.strategy === 'standard-diff' ? 'diff' : file.strategy;
        const prefix = isSelected ? '> ' : '  ';

        if (reviewStatus === 'FAILED') {
            return (
                <Box>
                    <Text bold={isSelected} color={isSelected ? 'cyan' : undefined}>
                        {prefix}<Text color={iconColor}>{icon} FAILED {file.path}</Text>
                        <Text color="red">    ({reviewError})</Text>
                    </Text>
                </Box>
            );
        }

        if (reviewStatus === 'AWAITING') {
            return (
                <Box>
                    <Text bold={isSelected} color={isSelected ? 'cyan' : undefined}>
                        {prefix}<Text color={iconColor}>{icon} AWAITING {file.path}</Text>
                        <Text color="yellow">    (Bulk re-apply prompt copied!)</Text>
                    </Text>
                </Box>
            );
        }

        if (reviewStatus === 'RE_APPLYING') {
            return (
                 <Box>
                    <Text bold={isSelected} color={isSelected ? 'cyan' : undefined}>
                        {prefix}<Text color={iconColor}>{icon} RE-APPLYING... {file.path}</Text>
                        <Text color="cyan"> (using &apos;replace&apos; strategy)</Text>
                    </Text>
                </Box>
            );
        }

        return (
            <Box>
                <Text bold={isSelected} color={isSelected ? 'cyan' : undefined}>
                    {prefix}<Text color={iconColor}>{icon}</Text> MOD {file.path} {diffStats} [{strategy}]
                </Text>
            </Box>
        );
    };

    const ScriptItemRow = ({
        script,
        isSelected,
        isExpanded,
    }: {
        script: ScriptResult;
        isSelected: boolean;
        isExpanded: boolean;
    }) => {
        const icon = script.success ? '✓' : '✗';
        const iconColor = script.success ? 'green' : 'red';
        const arrow = isExpanded ? '▾' : '▸';
        const prefix = isSelected ? '> ' : '  ';
        
        // Extract script type from command (e.g., "bun run test" -> "Post-Command", "bun run lint" -> "Linter")
        const scriptType = script.command.includes('test') ? 'Post-Command' : 
                          script.command.includes('lint') ? 'Linter' : 
                          'Script';

        return (
            <Box>
                <Text bold={isSelected} color={isSelected ? 'cyan' : undefined}>
                    {prefix}<Text color={iconColor}>{icon}</Text> {scriptType}: `{script.command}` ({script.duration}s) {arrow}{' '}
                    {script.summary}
                </Text>
            </Box>
        );
    };

    // --- Main Component ---

    const ReviewScreen = () => {
        const {
            transaction,
            files,
            scripts = [],
            patchStatus,
            selectedItemIndex,
            bodyView,
            isDiffExpanded,
            reasoningScrollIndex,
            scriptErrorIndex,
            fileReviewStates,
            numFiles,
            approvedFilesCount,
            approvedLinesAdded,
            approvedLinesRemoved,
        } = useReviewScreen();

        if (!transaction) {
            return <Text>Loading review...</Text>;
        }
        const { hash, message, prompt = '', reasoning = '' } = transaction;

        const renderBody = () => {
            if (bodyView === 'none') return null;

            if (bodyView === 'reasoning') {
                const reasoningLinesCount = (reasoning || '').split('\n').length;
                const visibleLinesCount = 10;
                return (
                    <Box flexDirection="column">
                        <ReasonScreen
                            reasoning={reasoning}
                            scrollIndex={reasoningScrollIndex}
                            visibleLinesCount={visibleLinesCount}
                        />
                        {reasoningLinesCount > visibleLinesCount && (
                            <Text color="gray">
                                Showing lines {reasoningScrollIndex + 1}-{Math.min(reasoningScrollIndex + visibleLinesCount, reasoningLinesCount)}{' '}
                                of {reasoningLinesCount}
                            </Text>
                        )}
                    </Box>
                );
            }
            
            if (bodyView === 'diff') {
                const selectedFile = files[selectedItemIndex];
                if (!selectedFile) return null;
                return (
                    <DiffScreen
                        filePath={selectedFile.path}
                        diffContent={selectedFile.diff}
                        isExpanded={isDiffExpanded}
                    />
                );
            }

            if (bodyView === 'script_output') {
                 const scriptIndex = selectedItemIndex - numFiles;
                 const selectedScript = scripts[scriptIndex];
                 if (!selectedScript) return null;
                 
                 const outputLines = selectedScript.output.split('\n');
                 const errorLines = outputLines.filter((line: string) =>
                    line.includes('Error') || line.includes('Warning'),
                 );
                 
                 return (
                    <Box flexDirection="column">
                        <Text>{selectedScript.command.includes('lint') ? 'LINTER' : 'SCRIPT'} OUTPUT: `{selectedScript.command}`</Text>
                        <Box marginTop={1} flexDirection="column">
                            {outputLines.map((line: string, index: number) => {
                                const isError = line.includes('Error');
                                const isWarning = line.includes('Warning');
                                const isHighlighted = errorLines[scriptErrorIndex] === line;
                                
                                return (
                                    <Text 
                                        key={index} 
                                        color={isError ? 'red' : isWarning ? 'yellow' : undefined}
                                        bold={isHighlighted}
                                        backgroundColor={isHighlighted ? 'blue' : undefined}
                                    >
                                        {line}
                                    </Text>
                                );
                            })}
                        </Box>
                        {errorLines.length > 0 && (
                            <Text color="gray">
                                Error {scriptErrorIndex + 1} of {errorLines.length} highlighted
                            </Text>
                        )}
                    </Box>
                 );
            }

            if (bodyView === 'confirm_handoff') {
                return (
                    <Box flexDirection="column" gap={1}>
                        <Text bold>HANDOFF TO EXTERNAL AGENT</Text>
                        <Box flexDirection="column">
                            <Text>This action will:</Text>
                            <Text>1. Copy a detailed prompt to your clipboard for an agentic AI.</Text>
                            <Text>2. Mark the current transaction as &apos;Handoff&apos; and close this review.</Text>
                            <Text>3. Assume that you and the external agent will complete the work.</Text>
                        </Box>
                        <Text>Relaycode will NOT wait for a new patch. This is a final action.</Text>
                        <Text bold color="yellow">Are you sure you want to proceed?</Text>
                    </Box>
                );
            }

            if (bodyView === 'bulk_repair') {
                const failedFiles = files.filter((f: FileItem) => fileReviewStates.get(f.id)?.status === 'FAILED');
                const repairOptions = [
                    '(1) Copy Bulk Re-apply Prompt (for single-shot AI)',
                    '(2) Bulk Change Strategy & Re-apply',
                    '(3) Handoff to External Agent',
                    '(4) Bulk Abandon All Failed Files',
                    '(Esc) Cancel',
                ];

                return (
                    <Box flexDirection="column" gap={1}>
                        <Text bold>BULK REPAIR ACTION</Text>

                        <Box flexDirection="column">
                            <Text>The following {failedFiles.length} files failed to apply:</Text>
                            {failedFiles.map((file: FileItem) => (
                                <Text key={file.id}>- {file.path}</Text>
                            ))}
                        </Box>

                        <Text>How would you like to proceed?</Text>

                        <Box flexDirection="column">
                            {repairOptions.map((opt, i) => (
                                <Text key={i}>
                                    {i === 0 ? '> ' : '  '}
                                    {opt}
                                </Text>
                            ))}
                        </Box>
                    </Box>
                );
            }

            return null;
        };

        const renderFooter = () => {
            // Contextual footer for body views
            if (bodyView === 'diff') {
                return <Text>(↑↓) Nav · (X)pand · (D/Esc) Back</Text>;
            }
            if (bodyView === 'reasoning') {
                return <Text>(↑↓) Scroll Text · (R)Collapse View · (C)opy Mode</Text>;
            }
            if (bodyView === 'script_output') {
                return (
                    <Text>(↑↓) Nav · (J↓/K↑) Next/Prev Error · (C)opy Output · (Ent/Esc) Back</Text>
                );
            }
            if (bodyView === 'bulk_repair') {
                return <Text>Choose an option [1-4, Esc]:</Text>;
            }
            if (bodyView === 'confirm_handoff') {
                return <Text>(Enter) Confirm Handoff      (Esc) Cancel</Text>;
            }

            // Main footer
            const actions = ['(↑↓) Nav'];

            const isFileSelected = selectedItemIndex < numFiles;
            const hasFailedFiles = Array.from(fileReviewStates.values()).some(s => s.status === 'FAILED');
            
            if (isFileSelected) {
                const selectedFile = files[selectedItemIndex];
                const fileState = selectedFile ? fileReviewStates.get(selectedFile.id) : undefined;
                if (selectedFile && fileState?.status !== 'FAILED') {
                    actions.push('(Spc) Toggle');
                }
                actions.push('(D)iff');
                
                // Add repair options for failed files
                if (selectedFile && fileState?.status === 'FAILED') {
                    actions.push('(T)ry Repair');
                }
            } else { // script selected
                actions.push('(Ent) Expand Details');
            }

            actions.push('(R)easoning');
            
            // Add bulk repair if there are failed files
            if (hasFailedFiles) {
                actions.push('(Shift+T) Bulk Repair');
            }
            
            actions.push('(C)opy');

            if (approvedFilesCount > 0) {
                actions.push('(A)pprove');
            }

            if (Array.from(fileReviewStates.values()).some(s => s.status === 'APPROVED' || s.status === 'FAILED')) {
                actions.push('(Shift+R) Reject All');
            }
            actions.push('(Q)uit');

            return <Text>{actions.join(' · ')}</Text>;
        };

        return (
            <Box flexDirection="column">
                {/* Header */}
                <Text color="cyan">▲ relaycode review</Text>
                <Separator />
                
                {/* Navigator Section */}
                <Box flexDirection="column" marginY={1}>
                    <Box flexDirection="column">
                        <Text>{hash} · {message}</Text>
                        <Text>
                            (<Text color="green">+{approvedLinesAdded}</Text>/<Text color="red">-{approvedLinesRemoved}</Text>) · {approvedFilesCount}/{numFiles} Files
                            {patchStatus === 'PARTIAL_FAILURE' && scripts.length === 0 && <Text> · Scripts: SKIPPED</Text>}
                            {patchStatus === 'PARTIAL_FAILURE' && <Text color="red" bold> · MULTIPLE PATCHES FAILED</Text>}
                        </Text>
                    </Box>

                    <Box flexDirection="column" marginTop={1}>
                        <Text>
                            (P)rompt ▸ {(prompt || '').substring(0, 60)}...
                        </Text>
                        <Text>
                            (R)easoning ({(reasoning || '').split('\n\n').length} steps) {bodyView === 'reasoning' ? '▾' : '▸'}{' '}
                            {((reasoning || '').split('\n')[0] ?? '').substring(0, 50)}...
                        </Text>
                    </Box>
                </Box>

                <Separator />

                {/* Script Results (if any) */}
                {scripts.length > 0 && (
                    <>
                        <Box flexDirection="column" marginY={1}>
                            {scripts.map((script: ScriptResult, index: number) => (
                                <ScriptItemRow
                                    key={script.command}
                                    script={script}
                                    isSelected={selectedItemIndex === numFiles + index}
                                    isExpanded={bodyView === 'script_output' && selectedItemIndex === numFiles + index}
                                />
                            ))}
                        </Box>
                        <Separator />
                    </>
                )}

                {/* Files Section */}
                <Box flexDirection="column" marginY={1}>
                    <Text bold>FILES</Text>
                    {files.map((file: FileItem, index: number) => {
                        const reviewState = fileReviewStates.get(file.id);
                        return (<FileItemRow
                            key={file.id}
                            file={file}
                            isSelected={selectedItemIndex === index}
                            reviewStatus={reviewState?.status || 'AWAITING'}
                            reviewError={reviewState?.error}
                        />);
                    })}
                </Box>
                
                <Separator />
                
                {/* Body Viewport */}
                {bodyView !== 'none' && (
                    <>
                        <Box marginY={1}>
                            {renderBody()}
                        </Box>
                        <Separator />
                    </>
                )}

                {/* Footer */}
                <Box>
                    {renderFooter()}
                </Box>
            </Box>
        );
    };

    export default ReviewScreen;
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 116
