uuid: c6e42b03-5d7d-419b-81d0-99071dd03e67
projectId: relaycode-tui
createdAt: '2025-09-27T07:41:48.721Z'
gitCommitMsg: >-
  refactor(ui): centralize terminal dimension handling with React Context

  Introduces a `DimensionsProvider` at the root of the application to serve as a
  single source of truth for terminal dimensions. This resolves UI corruption
  and layout instability issues that occurred during window resizing.

  Previously, multiple components independently subscribed to `stdout` resize
  events via the `useStdoutDimensions` hook. This led to race conditions where
  components would render with inconsistent width and height values, causing
  visual artifacts and broken layouts.

  This commit refactors all components and hooks that rely on terminal
  dimensions (`Separator`, `ActionFooter`, `useLayout`, `useViewport`, etc.) to
  consume the new `useDimensions` context hook. This ensures that the entire
  component tree re-renders with a consistent set of dimensions in a single,
  coordinated pass, resulting in a stable and robust UI.
promptSummary: >-
  The user wants to fix a UI glitch that happens when resizing the terminal
  window. The UI becomes corrupted because different components get different
  dimension values during re-render, causing layout inconsistencies.
reasoning:
  - >-
    I will now refactor the application to centralize terminal dimension
    handling, preventing the UI corruption you're seeing on window resize. This
    involves creating a single source of truth for dimensions using a React
    Context and updating all dependent components and hooks to consume it.
  - >-
    First, I'll create a new `DimensionsContext` to hold the terminal width and
    height.
  - >-
    Next, I'll wrap the entire application in `App.tsx` with the new
    `DimensionsProvider`. This makes the context available to all components.
  - >-
    Now I will refactor the core hooks to use the new `useDimensions` hook
    instead of calling `useStdoutDimensions` directly.
  - >-
    Finally, I'll update all the individual UI components that were causing
    visual glitches to consume the centralized context.
operations:
  - type: write
    path: src/contexts/DimensionsContext.tsx
    content: >-
      import { createContext, useContext, useMemo } from 'react';

      import { useStdoutDimensions } from '../utils';


      interface Dimensions {
          columns: number;
          rows: number;
      }


      const DimensionsContext = createContext<Dimensions>({ columns: 80, rows:
      24 });


      export const DimensionsProvider = ({ children }: { children:
      React.ReactNode }) => {
          const [columns, rows] = useStdoutDimensions();
          const value = useMemo(() => ({ columns, rows }), [columns, rows]);

          return (
              <DimensionsContext.Provider value={value}>
                  {children}
              </DimensionsContext.Provider>
          );
      };


      export const useDimensions = () => {
          const context = useContext(DimensionsContext);
          if (context === undefined) {
              throw new Error('useDimensions must be used within a DimensionsProvider');
          }
          return context;
      };
    patchStrategy: replace
  - type: write
    path: src/App.tsx
    content: |+
      --- src/App.tsx
      +++ src/App.tsx
      @@ -10,6 +10,7 @@
       import GlobalHelpScreen from './components/GlobalHelpScreen';
       import CopyScreen from './components/CopyScreen';
       import NotificationScreen from './components/NotificationScreen';
      +import { DimensionsProvider } from './contexts/DimensionsContext';
       import { useViewStore } from './stores/view.store';
       import { useGlobalHotkeys } from './hooks/useGlobalHotkeys';
       
      @@ -34,7 +35,7 @@
           };
       
           return (
      -        <>
      +        <DimensionsProvider>
                   <Box
                       width="100%"
                       height="100%"
      @@ -48,7 +49,7 @@
                   {activeOverlay === 'log' && <DebugLogScreen />}
                   {activeOverlay === 'debug' && <DebugMenu />}
                   {activeOverlay === 'notification' && <NotificationScreen />}
      -        </>
      +        </DimensionsProvider>
           );
       };
       
       export default App;

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useLayout.ts
    content: |+
      --- src/hooks/useLayout.ts
      +++ src/hooks/useLayout.ts
      @@ -1,5 +1,5 @@
       import { useMemo } from 'react';
      -import { useStdoutDimensions } from '../utils';
      +import { useDimensions } from '../contexts/DimensionsContext';
       
       export interface LayoutConfig {
           header?: number;
      @@ -21,7 +21,7 @@
        * @returns An object with total terminal height and the calculated remaining height for content.
        */
       export const useLayout = (config: LayoutConfig): LayoutInfo => {
      -    const [, totalHeight] = useStdoutDimensions();
      +    const { rows: totalHeight } = useDimensions();
       
           const reservedHeight = useMemo(() => {
               let reserved = 0;

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useViewport.ts
    content: "--- src/hooks/useViewport.ts\n+++ src/hooks/useViewport.ts\n@@ -1,5 +1,5 @@\n import { useState, useEffect } from 'react';\n-import { useStdoutDimensions } from '../utils';\n+import { useDimensions } from '../contexts/DimensionsContext';\n import { useLayout, type LayoutConfig } from './useLayout';\n \n interface UseViewportOptions {\n@@ -10,6 +10,7 @@\n \n export const useViewport = ({ selectedIndex, itemCount, layoutConfig }: UseViewportOptions) => {\n \tconst { remainingHeight: viewportHeight } = useLayout(layoutConfig);\n+\tconst { columns: width } = useDimensions();\n \tconst [viewOffset, setViewOffset] = useState(0);\n \n \tuseEffect(() => {\n@@ -26,7 +27,7 @@\n     return {\n         viewOffset,\n         viewportHeight,\n-        width: useStdoutDimensions()[0],\n+        width,\n     };\n };\n\n"
    patchStrategy: standard-diff
  - type: write
    path: src/components/ActionFooter.tsx
    content: |+
      --- src/components/ActionFooter.tsx
      +++ src/components/ActionFooter.tsx
      @@ -1,5 +1,5 @@
       import { Box, Text } from 'ink';
      -import { useStdoutDimensions } from '../utils';
      +import { useDimensions } from '../contexts/DimensionsContext';
       import { UI_CONFIG } from '../config/ui.config';
       import type { ActionItem } from '../types/actions.types';
       
      @@ -13,7 +13,7 @@
       );
       
       const ActionFooter = ({ actions }: ActionFooterProps) => {
      -    const [width] = useStdoutDimensions();
      +    const { columns: width } = useDimensions();
           const { horizontalPadding, actionSeparator } = UI_CONFIG.footer;
           const separatorWidth = actionSeparator.length;
       

    patchStrategy: standard-diff
  - type: write
    path: src/components/CopyScreen.tsx
    content: |+
      --- src/components/CopyScreen.tsx
      +++ src/components/CopyScreen.tsx
      @@ -1,5 +1,5 @@
       import { Box, Text } from 'ink';
       import Separator from './Separator';
      -import { useStdoutDimensions } from '../utils';
      +import { useDimensions } from '../contexts/DimensionsContext';
       import ActionFooter from './ActionFooter';
       import { useCopyScreen } from '../hooks/useCopyScreen';
       import ModalLayout from './layout/ModalLayout';
      @@ -14,7 +14,7 @@
               lastCopiedMessage,
               viewOffset,
           } = useCopyScreen();
      -    const [width] = useStdoutDimensions();
      +    const { columns: width } = useDimensions();
       
           return (
               <ModalLayout>

    patchStrategy: standard-diff
  - type: write
    path: src/components/GlobalHelpScreen.tsx
    content: |+
      --- src/components/GlobalHelpScreen.tsx
      +++ src/components/GlobalHelpScreen.tsx
      @@ -1,5 +1,5 @@
       import { Box, Text } from 'ink';
      -import { useStdoutDimensions } from '../utils';
      +import { useDimensions } from '../contexts/DimensionsContext';
       import ModalLayout from './layout/ModalLayout';
       
       const HELP_SECTIONS = [
      @@ -87,7 +87,7 @@
       );
       
       const GlobalHelpScreen = () => {
      -    const [width] = useStdoutDimensions();
      +    const { columns: width } = useDimensions();
       
           // 90% view width, minus 2 padding on each side.
           const availableWidth = Math.floor(width * 0.9) - 4;

    patchStrategy: standard-diff
  - type: write
    path: src/components/Separator.tsx
    content: "--- src/components/Separator.tsx\n+++ src/components/Separator.tsx\n@@ -1,8 +1,8 @@\n import {Text} from 'ink';\n-import { useStdoutDimensions } from '../utils';\n+import { useDimensions } from '../contexts/DimensionsContext';\n \n const Separator = ({ width: propWidth }: { width?: number }) => {\n-\tconst [columns] = useStdoutDimensions();\n+\tconst { columns } = useDimensions();\n \tconst width = propWidth ?? columns;\n \treturn <Text>{'─'.repeat(width)}</Text>;\n };\n\n"
    patchStrategy: standard-diff
snapshot:
  src/contexts/DimensionsContext.tsx: null
  src/App.tsx: >-
    import { Box } from 'ink';

    import { useAppStore } from './stores/app.store';

    import SplashScreen from './components/SplashScreen';

    import InitializationScreen from './components/InitializationScreen';

    import DashboardScreen from './components/DashboardScreen';

    import ReviewScreen from './components/ReviewScreen';

    import ReviewProcessingScreen from './components/ReviewProcessingScreen';

    import GitCommitScreen from './components/GitCommitScreen';

    import TransactionDetailScreen from './components/TransactionDetailScreen';

    import TransactionHistoryScreen from
    './components/TransactionHistoryScreen';

    import DebugMenu from './components/DebugMenu'; 

    import DebugLogScreen from './components/DebugLogScreen';

    import GlobalHelpScreen from './components/GlobalHelpScreen';

    import CopyScreen from './components/CopyScreen';

    import NotificationScreen from './components/NotificationScreen';

    import { useViewStore } from './stores/view.store';

    import { useGlobalHotkeys } from './hooks/useGlobalHotkeys';


    const App = () => {
        const currentScreen = useAppStore(state => state.currentScreen);
        const activeOverlay = useViewStore(s => s.activeOverlay);
        const isOverlayOpen = activeOverlay !== 'none';

        // Global hotkeys are active if no modal-like component is open
        const areGlobalHotkeysActive = activeOverlay !== 'copy' && activeOverlay !== 'log' && activeOverlay !== 'notification'; // These overlays have their own input handlers
        useGlobalHotkeys({ isActive: areGlobalHotkeysActive });

        const renderMainScreen = () => {
            if (currentScreen === 'splash') return <SplashScreen />;
            if (currentScreen === 'init') return <InitializationScreen />;
            if (currentScreen === 'dashboard') return <DashboardScreen />;
            if (currentScreen === 'review') return <ReviewScreen />;
            if (currentScreen === 'review-processing') return <ReviewProcessingScreen />;
            if (currentScreen === 'git-commit') return <GitCommitScreen />;
            if (currentScreen === 'transaction-detail') return <TransactionDetailScreen />;
            if (currentScreen === 'transaction-history') return <TransactionHistoryScreen />;
            return null;
        };

        return (
            <>
                <Box
                    width="100%"
                    height="100%"
                    flexDirection="column"
                    display={isOverlayOpen ? 'none' : 'flex'}
                >
                    {renderMainScreen()}
                </Box>
                {activeOverlay === 'help' && <GlobalHelpScreen />}
                {activeOverlay === 'copy' && <CopyScreen />}
                {activeOverlay === 'log' && <DebugLogScreen />}
                {activeOverlay === 'debug' && <DebugMenu />}
                {activeOverlay === 'notification' && <NotificationScreen />}
            </>
        );
    };


    export default App;
  src/hooks/useLayout.ts: |-
    import { useMemo } from 'react';
    import { useStdoutDimensions } from '../utils';

    export interface LayoutConfig {
        header?: number;
        footer?: number;
        separators?: number;
        marginsY?: number; // Total vertical margin
        paddingY?: number; // Total vertical padding
        fixedRows?: number; // For any other static rows
        dynamicRows?: {
            count: number;
            lineHeight?: number; // Default to 1
        };
    }

    export interface LayoutInfo {
        totalHeight: number;
        remainingHeight: number;
    }

    /**
     * Calculates available vertical space based on terminal height and a declarative layout config.
     * @param config A declarative object describing static and dynamic rows to reserve.
     * @returns An object with total terminal height and the calculated remaining height for content.
     */
    export const useLayout = (config: LayoutConfig): LayoutInfo => {
        const [, totalHeight] = useStdoutDimensions();

        const reservedHeight = useMemo(() => {
            let reserved = 0;
            reserved += config.header || 0;
            reserved += config.footer || 0;
            reserved += config.separators || 0;
            reserved += config.marginsY || 0;
            reserved += config.paddingY || 0;
            reserved += config.fixedRows || 0;

            if (config.dynamicRows) {
                reserved += config.dynamicRows.count * (config.dynamicRows.lineHeight || 1);
            }
            return reserved;
        }, [config]);

        const remainingHeight = Math.max(1, totalHeight - reservedHeight);

        return {
            totalHeight,
            remainingHeight,
        };
    };
  src/hooks/useViewport.ts: "import { useState, useEffect } from 'react';\nimport { useStdoutDimensions } from '../utils';\nimport { useLayout, type LayoutConfig } from './useLayout';\n\ninterface UseViewportOptions {\n\tselectedIndex: number;\n\titemCount: number;\n\tlayoutConfig: LayoutConfig;\n}\n\nexport const useViewport = ({ selectedIndex, itemCount, layoutConfig }: UseViewportOptions) => {\n\tconst { remainingHeight: viewportHeight } = useLayout(layoutConfig);\n\tconst [viewOffset, setViewOffset] = useState(0);\n\n\tuseEffect(() => {\n\t\tsetViewOffset(0);\n\t}, [itemCount]);\n\n\tuseEffect(() => {\n\t\tif (selectedIndex >= 0 && selectedIndex < viewOffset) {\n            setViewOffset(selectedIndex);\n        } else if (selectedIndex >= viewOffset + viewportHeight) {\n            setViewOffset(selectedIndex - viewportHeight + 1);\n        }\n    }, [selectedIndex, viewOffset, viewportHeight]);\n\n    return {\n        viewOffset,\n        viewportHeight,\n        width: useStdoutDimensions()[0],\n    };\n};"
  src/components/ActionFooter.tsx: |-
    import { Box, Text } from 'ink';
    import { useStdoutDimensions } from '../utils';
    import { UI_CONFIG } from '../config/ui.config';
    import type { ActionItem } from '../types/actions.types';

    interface ActionFooterProps {
        actions: readonly ActionItem[];
    }

    const Action = ({ item }: { item: ActionItem }) => (
        <Text>
            (<Text color="cyan" bold>{item.key}</Text>) {item.label}
        </Text>
    );

    const ActionFooter = ({ actions }: ActionFooterProps) => {
        const [width] = useStdoutDimensions();
        const { horizontalPadding, actionSeparator } = UI_CONFIG.footer;
        const separatorWidth = actionSeparator.length;

        // Calculate required width for a single line
        const formattedActions = actions.map(a => `(${a.key}) ${a.label}`);
        const singleLineWidth = formattedActions.join(actionSeparator).length;

        // 1. Render horizontally if it fits
        if (singleLineWidth <= width - horizontalPadding * 2) {
            return (
                <Box>
                    {actions.map((item, index) => (
                        <Text key={item.key}>
                            <Action item={item} />
                            {index < actions.length - 1 && <Text>{actionSeparator}</Text>}
                        </Text>
                    ))}
                </Box>
            );
        }

        // 2. If it doesn't fit, calculate multi-column layout
        const itemWidths = formattedActions.map(a => a.length);
        const maxItemWidth = Math.max(...itemWidths);
        
        // Determine how many columns can fit, ensuring at least one
        const availableWidth = width - horizontalPadding * 2;
        // Calculate columns based on the widest item, ensuring we don't try to make more columns than items
        const numColumns = Math.min(
            actions.length,
            Math.max(1, Math.floor(availableWidth / (maxItemWidth + separatorWidth))),
        );
        
        const itemsPerColumn = Math.ceil(actions.length / numColumns);
        const columns: ActionItem[][] = Array.from({ length: numColumns }, () => []);

        actions.forEach((action, index) => {
            const columnIndex = Math.floor(index / itemsPerColumn);
            if (columns[columnIndex]) {
                columns[columnIndex].push(action);
            }
        });

        return (
            <Box flexDirection="row" width="100%">
                {columns.map((column, colIndex) => (
                    <Box
                        key={colIndex}
                        flexDirection="column"
                        // Use a flex-basis approach for more even distribution if needed,
                        // but fixed width is better for alignment.
                        width={maxItemWidth + separatorWidth}
                    >
                        {column.map(item => (
                            <Action key={item.key} item={item} />
                        ))}
                    </Box>
                ))}
            </Box>
        );
    };

    export default ActionFooter;
  src/components/CopyScreen.tsx: |-
    import { Box, Text } from 'ink';
    import Separator from './Separator';
    import { useStdoutDimensions } from '../utils';
    import ActionFooter from './ActionFooter';
    import { useCopyScreen } from '../hooks/useCopyScreen';
    import ModalLayout from './layout/ModalLayout';
    import { COPY_SCREEN_FOOTER_ACTIONS } from '../constants/copy.constants';

    const CopyScreen = () => {
        const {
            title,
            itemsInView,
            selectedIndex,
            selectedIds,
            lastCopiedMessage,
            viewOffset,
        } = useCopyScreen();
        const [width] = useStdoutDimensions();

        return (
            <ModalLayout>
                <Box
                    flexDirection="column"
                    paddingX={2}
                    width="100%"
                >
                    <Text bold color="black" backgroundColor="yellow"> ▲ relaycode · COPY MODE </Text>
                    <Separator width={Math.floor(width * 0.8) - 4} />
                    <Box flexDirection="column" marginY={1}>
                        <Text>{title}</Text>
                        <Box flexDirection="column" marginTop={1}>
                            {itemsInView.map((item, index) => {
                                const isSelected = (index + viewOffset) === selectedIndex;
                                const isChecked = selectedIds.has(item.id);
                                return (
                                    <Text key={item.id} color={isSelected ? 'cyan' : undefined}>
                                        {isSelected ? '> ' : '  '}
                                        [{isChecked ? 'x' : ' '}] ({item.key}) {item.label}
                                    </Text>
                                );
                            })}
                        </Box>
                    </Box>
                    <Separator width={Math.floor(width * 0.8) - 4} />
                    {lastCopiedMessage && <Text color="green">✓ {lastCopiedMessage}</Text>}
                    <ActionFooter actions={COPY_SCREEN_FOOTER_ACTIONS}/>
                </Box>
            </ModalLayout>
        );
    };

    export default CopyScreen;
  src/components/GlobalHelpScreen.tsx: >-
    import { Box, Text } from 'ink';

    import { useStdoutDimensions } from '../utils';

    import ModalLayout from './layout/ModalLayout';


    const HELP_SECTIONS = [
        {
            title: 'GLOBAL',
            shortcuts: [
                { key: '?', label: 'Toggle this help screen' },
                { key: 'Q/Esc', label: 'Quit or Go Back' },
                { key: 'Ctrl+V', label: 'Process Clipboard' },
                { key: 'Ctrl+B', label: 'Toggle Debug Menu' },
                { key: 'Ctrl+L', label: 'Toggle Debug Log' },
            ],
        },
        {
            title: 'DASHBOARD',
            shortcuts: [
                { key: '↑↓', label: 'Navigate event stream' },
                { key: '→/Enter', label: 'Expand / View Details' },
                { key: '←', label: 'Collapse Item' },
                { key: 'P', label: 'Pause / Resume clipboard watcher' },
                { key: 'A', label: 'Approve All Pending' },
                { key: 'C', label: 'Commit All Applied' },
                { key: 'L', label: 'View History Log' },
            ],
        },
        {
            title: 'HISTORY',
            shortcuts: [
                { key: '↑↓', label: 'Navigate Items' },
                { key: '→/←', label: 'Expand / Collapse' },
                { key: 'Space', label: 'Select for Bulk Action' },
                { key: 'Enter', label: 'View Details' },
                { key: 'F', label: 'Filter History' },
                { key: 'B', label: 'Open Bulk Actions Menu' },
                { key: 'C', label: 'Copy Selected Items' },
            ],
        },
        {
            title: 'REVIEW SCREEN',
            shortcuts: [
                { key: '↑↓', label: 'Navigate Items' },
                { key: 'D/Enter', label: 'View File Diff' },
                { key: 'R', label: 'Show / Collapse Reasoning' },
                { key: 'Space', label: 'Toggle Approval State' },
                { key: 'A', label: 'Apply Approved Changes' },
                { key: 'T/Shift+T', label: 'Repair / Bulk Repair Failed Files' },
                { key: 'I/Shift+I', label: 'Instruct / Bulk Instruct Rejected' },
                { key: 'C', label: 'Open Copy Menu' },
            ],
        },
        {
            title: 'DETAIL SCREEN',
            shortcuts: [
                { key: '↑↓', label: 'Navigate Sections/Files' },
                { key: '→/←', label: 'Expand / Collapse' },
                { key: 'Enter', label: 'Drill-in / View Diff' },
                { key: 'U', label: 'Revert Transaction' },
                { key: 'C', label: 'Open Copy Menu' },
                { key: 'O', label: 'Open File/YAML in Editor' },
            ],
        },
    ];


    const KEY_PADDING = 12;


    const Shortcut = ({ shortcut }: { shortcut: { key: string; label: string }
    }) => (
        <Text>
            {'  '}
            <Text color="cyan" bold>{shortcut.key.padEnd(KEY_PADDING)}</Text>
            {shortcut.label}
        </Text>
    );


    const GlobalHelpScreen = () => {
        const [width] = useStdoutDimensions();

        // 90% view width, minus 2 padding on each side.
        const availableWidth = Math.floor(width * 0.9) - 4;

        // Calculate max width needed for one column of content
        const allShortcutLines = HELP_SECTIONS.flatMap(s => 
            s.shortcuts.map(sc => `  ${sc.key.padEnd(KEY_PADDING)} ${sc.label}`)
        );
        const allLines = [...allShortcutLines, ...HELP_SECTIONS.map(s => s.title)];
        const maxContentWidth = Math.max(...allLines.map(line => line.length));

        const GAP = 4;
        // Determine optimal number of columns
        const numColumns = Math.max(1, Math.min(
            HELP_SECTIONS.length, // Don't make more columns than sections
            Math.floor(availableWidth / (maxContentWidth + GAP))
        ));

        // Distribute sections into columns
        const columns: typeof HELP_SECTIONS[] = Array.from({ length: numColumns }, () => []);
        const sectionsPerColumn = Math.ceil(HELP_SECTIONS.length / numColumns);

        HELP_SECTIONS.forEach((section, index) => {
            const columnIndex = Math.floor(index / sectionsPerColumn);
            if (columns[columnIndex]) {
                columns[columnIndex].push(section);
            }
        });

        return (
            <ModalLayout width="90%">
                <Box
                    flexDirection="column"
                    paddingX={2}
                    paddingY={2}
                >
                    <Box justifyContent="center" marginBottom={1}>
                        <Text bold>
                            <Text color="yellow">▲ relaycode</Text>
                            <Text color="cyan"> · Keyboard Shortcuts</Text>
                        </Text>
                    </Box>

                    <Box flexDirection="row" gap={GAP}>
                        {columns.map((sectionList, i) => (
                            <Box key={i} flexDirection="column" gap={1} flexGrow={1} flexShrink={1} flexBasis={0}>
                                {sectionList.map(section => (
                                    <Box key={section.title} flexDirection="column">
                                        <Text bold color="cyan">{section.title}</Text>
                                        {section.shortcuts.map(shortcut => (
                                            <Shortcut key={shortcut.label} shortcut={shortcut} />
                                        ))}
                                    </Box>
                                ))}
                            </Box>
                        ))}
                    </Box>
                </Box>
                <Box justifyContent="center" marginTop={1}>
                    <Text bold>(Press <Text color="cyan" bold>?</Text> or <Text color="cyan" bold>Esc</Text> to close)</Text>
                </Box>
            </ModalLayout>
        );
    };


    export default GlobalHelpScreen;
  src/components/Separator.tsx: "import {Text} from 'ink';\nimport { useStdoutDimensions } from '../utils';\n\nconst Separator = ({ width: propWidth }: { width?: number }) => {\n\tconst [columns] = useStdoutDimensions();\n\tconst width = propWidth ?? columns;\n\treturn <Text>{'─'.repeat(width)}</Text>;\n};\n\nexport default Separator;"
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-09-27T07:43:25.815Z'
status: committed
id: 223
