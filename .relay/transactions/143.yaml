uuid: c32c525f-2b2b-42e1-8f5a-73d8a9d164d1
projectId: relaycode-tui
createdAt: '2025-09-25T10:20:40.828Z'
gitCommitMsg: >-
  feat(editor): Add context-aware 'Open in Editor' footers and update docs

  This commit finalizes the "Open in Editor" feature by enhancing the user
  experience and ensuring documentation is up to date.

  - The footers on the Transaction Detail and Transaction History screens
    are now context-aware. They display "(O) Open File" when a file is
    selected and "(O) Open YAML" otherwise.
  - Updated `TRANSACTION-DETAIL-SCREEN.README.MD` and
    `TRANSACTION-HISTORY-SCREEN.README.MD` to include the new keybinding
    and reflect the dynamic footer labels in all relevant mockups.
promptSummary: >-
  The user requested to finalize the "Open in Editor" feature by updating the
  documentation and making the footer action labels context-aware ("Open File"
  vs "Open YAML").
reasoning:
  - >-
    Excellent. The foundational services and hooks have been integrated. I will
    now execute the final part of the plan, which includes updating the UI
    component footers to be context-aware and finalizing the documentation to
    reflect these powerful new capabilities.
  - >-
    First, I will update the footer logic in the `TransactionDetailScreen`
    component to display a more descriptive label for the "Open" action.
  - >-
    Next, I'll apply the same context-aware logic to the footer in the
    `TransactionHistoryScreen` component.
  - >-
    Now, I will update the specification for the Transaction Detail screen,
    adding the new keybinding and updating the mockups to reflect the new,
    context-aware "Open" action.
  - >-
    Finally, I'll bring the Transaction History screen's specification up to
    date with the corresponding context-aware "Open" action in its mockups.
  - >-
    This completes the implementation and documentation of the "Open in Editor"
    feature. The user experience is now enhanced with context-sensitive actions
    and the specifications are fully aligned with the new functionality.
operations:
  - type: write
    path: src/components/TransactionDetailScreen.tsx
    content: >+
      --- src/components/TransactionDetailScreen.tsx

      +++ src/components/TransactionDetailScreen.tsx

      @@ -101,8 +101,9 @@
                   ]} />;
               }
               
      +        const isFileFocused = focusedItemPath.includes('/');
               const baseActions: ActionItem[] = [
                   { key: 'C', label: 'Copy' },
      -            { key: 'O', label: 'Open' },

      +            { key: 'O', label: isFileFocused ? 'Open File' : 'Open YAML'
      },
                   { key: 'U', label: 'Undo' },
                   { key: 'Q', label: 'Quit/Back' },
               ];
      @@ -110,7 +111,7 @@
       
               let contextualActions: ActionItem[] = [];
       
      -        if (focusedItemPath.includes('/')) { // Is a file

      +        if (isFileFocused) { // Is a file
                   if (bodyView === 'DIFF_VIEW') {
                       contextualActions = [
                           { key: '↑↓', label: 'Nav Files' },

    patchStrategy: standard-diff
  - type: write
    path: src/components/TransactionHistoryScreen.tsx
    content: >
      --- src/components/TransactionHistoryScreen.tsx

      +++ src/components/TransactionHistoryScreen.tsx

      @@ -194,13 +194,14 @@
           const renderFooter = () => {
               if (mode === 'FILTER') return <Text>(Enter) Apply Filter & Return      (Esc) Cancel</Text>; 
               if (mode === 'BULK_ACTIONS') return <Text>Choose an option [1-3] or (Esc) Cancel</Text>;
               
      +        const openActionLabel = selectedItemPath.includes('/file/') ?
      'Open File' : 'Open YAML';
               const footerActions: ActionItem[] = [
                   { key: '↑↓', label: 'Nav' },
                   { key: '→', label: 'Expand' },
                   { key: '←', label: 'Collapse' },
                   { key: 'Spc', label: 'Select' },
                   { key: 'Ent', label: 'Details' },
      -            { key: 'O', label: 'Open' },

      +            { key: 'O', label: openActionLabel },
                   { key: 'F', label: 'Filter' },
               ];
       
    patchStrategy: standard-diff
  - type: write
    path: docs/relaycode-tui/transaction-detail-screen.readme.md
    content: |
      <<<<<<< SEARCH
       (↑↓) Nav · (→) Expand · (C)opy Mode · (U)ndo · (Q)uit
      =======
       (↑↓) Nav · (→) Expand · (C)opy Mode · (O)pen YAML · (U)ndo · (Q)uit
      >>>>>>> REPLACE
      <<<<<<< SEARCH
       (↑↓) Nav/Scroll · (←) Collapse · (C)opy Mode · (U)ndo · (Q)uit
      =======
       (↑↓) Nav/Scroll · (←) Collapse · (C)opy Mode · (O)pen YAML · (U)ndo · (Q)uit
      >>>>>>> REPLACE
      <<<<<<< SEARCH
       (↑↓) Nav Files · (→) View Diff · (←) Back to Sections · (C)opy Mode · (Q)uit
      =======
       (↑↓) Nav Files · (→) View Diff · (←) Back to Sections · (C)opy Mode · (O)pen File · (U)ndo · (Q)uit
      >>>>>>> REPLACE
      <<<<<<< SEARCH
       (↑↓) Nav Files · (←) Back to Files · (C)opy Mode · (U)ndo · (Q)uit
      =======
       (↑↓) Nav Files · (←) Back to Files · (C)opy Mode · (O)pen File · (U)ndo · (Q)uit
      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: docs/relaycode-tui/transaction-detail-screen.readme.md
    content: >+
      --- docs/relaycode-tui/transaction-detail-screen.readme.md

      +++ docs/relaycode-tui/transaction-detail-screen.readme.md

      @@ -176,6 +176,7 @@
       | `→`          | Expand / Drill Down| Navigator (Sections or Files)              |
       | `←`          | Collapse / Go Back | Navigator (Expanded Sections or Files)     |
       | `(C)`        | Enter/Exit Copy Mode | Primary Views & Copy Mode                  |
      +| `(O)`        | Open in Editor     |
      Universal                                  |
       | `(U)`        | Initiate Revert    | Primary Views                              |
       | `(Q)` `Esc`  | Quit / Cancel      | Universal                                  |
       | `(Enter)`    | Confirm Action     | Copy Mode (to copy), Revert Modal (to revert) |

    patchStrategy: standard-diff
  - type: write
    path: docs/relaycode-tui/transaction-history-screen.readme.md
    content: |
      <<<<<<< SEARCH
       (↑↓) Nav · (→) Expand · (Spc) Select · (Ent) Details · (F)ilter · (C)opy · (B)ulk
      =======
       (↑↓) Nav · (→) Expand · (Spc) Select · (Ent) Details · (O)pen YAML · (F)ilter · (C)opy · (B)ulk
      >>>>>>> REPLACE
      <<<<<<< SEARCH
       (↑↓) Nav · (←) Collapse · (→) Expand · (Ent) Details · (F)ilter · (C)opy
      =======
       (↑↓) Nav · (←) Collapse · (→) Expand · (Ent) Details · (O)pen YAML · (F)ilter · (C)opy
      >>>>>>> REPLACE
      <<<<<<< SEARCH
       (↑↓) Nav · (←→) Collapse/Expand · (Ent) Details · (F)ilter · (C)opy
      =======
       (↑↓) Nav · (←→) Collapse/Expand · (Ent) Details · (O)pen YAML · (F)ilter · (C)opy
      >>>>>>> REPLACE
      <<<<<<< SEARCH
       (↑↓) Nav File/Tx · (←→) Collapse/Expand · (Ent) Full Diff · (X)pand Full Diff
      =======
       (↑↓) Nav File/Tx · (←→) Collapse/Expand · (Ent) Full Diff · (O)pen File · (X)pand Full Diff
      >>>>>>> REPLACE
      <<<<<<< SEARCH
       (↑↓) Nav · (→) Expand · (Ent) Details · (F)ilter · (C)opy · (B)ulk Actions
      =======
       (↑↓) Nav · (→) Expand · (Ent) Details · (O)pen YAML · (F)ilter · (C)opy · (B)ulk Actions
      >>>>>>> REPLACE
    patchStrategy: search-replace
snapshot:
  src/components/TransactionDetailScreen.tsx: >-
    import { Box, Text } from 'ink';

    import Separator from './Separator';

    import DiffScreen from './DiffScreen';

    import ReasonScreen from './ReasonScreen';

    import { useTransactionDetailScreen } from
    '../hooks/useTransactionDetailScreen';

    import type { FileChangeType } from '../types/domain.types';

    import ActionFooter from './ActionFooter';

    import type { ActionItem } from '../types/actions.types';


    const getFileChangeTypeIcon = (type: FileChangeType) => {
        switch (type) {
            case 'MOD': return '[MOD]';
            case 'ADD': return '[ADD]';
            case 'DEL': return '[DEL]';
            case 'REN': return '[REN]';
        }
    };


    const RevertModal = ({ transactionHash }: { transactionHash: string }) => {
        return (
            <Box 
                borderStyle="round"
                borderColor="yellow"
                flexDirection="column"
                paddingX={2}
                width="80%"
                alignSelf='center'
            >
                <Text bold color="yellow" wrap="wrap" >REVERT THIS TRANSACTION?</Text>
                <Box height={1} />
                <Text wrap="wrap">This will create a NEW transaction that reverses all changes made by {transactionHash}. The original transaction record will be preserved.</Text>
                <Box height={1} />
                <Text wrap="wrap">Are you sure?</Text>
            </Box>
        );
    };


    const TransactionDetailScreen = () => {
        const {
            transaction, files,
            focusedItemPath, expandedItemPaths, bodyView,
        } = useTransactionDetailScreen();

        if (!transaction) {
            return <Text>Loading transaction...</Text>;
        }

        const renderNavigator = () => {
            const isPromptFocused = focusedItemPath === 'PROMPT';
            const isReasoningFocused = focusedItemPath === 'REASONING';
            const isFilesFocused = focusedItemPath.startsWith('FILES');
            
            const isPromptExpanded = expandedItemPaths.has('PROMPT');
            const isReasoningExpanded = expandedItemPaths.has('REASONING');
            const isFilesExpanded = expandedItemPaths.has('FILES');
            
            return (
                <Box flexDirection="column">
                    <Text color={isPromptFocused ? 'cyan' : undefined}>
                        {isPromptFocused ? '> ' : '  '}
                        {isPromptExpanded ? '▾' : '▸'} (P)rompt
                    </Text>
                    <Text color={isReasoningFocused ? 'cyan' : undefined}>
                        {isReasoningFocused ? '> ' : '  '}
                        {isReasoningExpanded ? '▾' : '▸'} (R)easoning ({transaction.reasoning?.split('\n\n').length || 0} steps)
                    </Text>
                    <Text color={isFilesFocused ? 'cyan' : undefined}>
                        {isFilesFocused && !focusedItemPath.includes('/') ? '> ' : '  '}
                        {isFilesExpanded ? '▾' : '▸'} (F)iles ({files.length})
                    </Text>
                    {isFilesExpanded && (
                        <Box flexDirection="column" paddingLeft={2}>
                            {files.map((file) => {
                                 const fileId = `FILES/${file.id}`;
                                 const isFileSelected = focusedItemPath === fileId;
                                 const stats = file.type === 'DEL' ? '' : ` (+${file.linesAdded}/-${file.linesRemoved})`;
                                 return (
                                    <Text key={file.id} color={isFileSelected ? 'cyan' : undefined}>
                                        {isFileSelected ? '> ' : '  '}
                                        {`${getFileChangeTypeIcon(file.type)} ${file.path}${stats}`}
                                    </Text>
                                );
                            })}
                        </Box>
                    )}
                </Box>
            );
        };

        const renderBody = () => {
            if (bodyView === 'NONE') {
                return <Text color="gray">(Press → to expand a section and view its contents)</Text>;
            }
            if (bodyView === 'PROMPT') {
                return (
                    <Box flexDirection="column">
                        <Text>PROMPT</Text>
                        <Box marginTop={1}><Text>{transaction.prompt}</Text></Box>
                    </Box>
                );
            }
            if (bodyView === 'REASONING') {
                if (!transaction.reasoning) return <Text color="gray">No reasoning provided.</Text>;
                return <ReasonScreen reasoning={transaction.reasoning} />;
            }
            if (bodyView === 'FILES_LIST') {
                 return <Text color="gray">(Select a file and press → to view the diff)</Text>;
            }
            if (bodyView === 'DIFF_VIEW') {
                const fileId = focusedItemPath.split('/')[1];
                const file = files.find(f => f.id === fileId);
                if (!file) return null;
                return <DiffScreen filePath={file.path} diffContent={file.diff} isExpanded={true} />;
            }
            return null;
        };

        const renderFooter = () => {
            if (bodyView === 'REVERT_CONFIRM') {
                return <ActionFooter actions={[
                    { key: 'Enter', label: 'Confirm Revert' },
                    { key: 'Esc', label: 'Cancel' },
                ]} />;
            }
            
            const baseActions: ActionItem[] = [
                { key: 'C', label: 'Copy' },
                { key: 'O', label: 'Open' },
                { key: 'U', label: 'Undo' },
                { key: 'Q', label: 'Quit/Back' },
            ];
            let contextualActions: ActionItem[] = [];

            if (focusedItemPath.includes('/')) { // Is a file
                if (bodyView === 'DIFF_VIEW') {
                    contextualActions = [
                        { key: '↑↓', label: 'Nav Files' },
                        { key: '←', label: 'Back to List' },
                    ];
                } else {
                    contextualActions = [
                        { key: '↑↓', label: 'Nav Files' },
                        { key: '→', label: 'View Diff' },
                        { key: '←', label: 'Back to Sections' },
                    ];
                }
                return <ActionFooter actions={[...contextualActions, ...baseActions]} />;
            }
            
            if (expandedItemPaths.has(focusedItemPath)) {
                contextualActions = [
                    { key: '↑↓', label: 'Nav/Scroll' },
                    { key: '→', label: 'Drill In' },
                    { key: '←', label: 'Collapse' },
                ];
            } else {
                contextualActions = [
                    { key: '↑↓', label: 'Nav' },
                    { key: '→', label: 'Expand' },
                ];
            }
            return <ActionFooter actions={[...contextualActions, ...baseActions]} />;
        };

        const { message, timestamp, status } = transaction;
        const date = new Date(timestamp).toISOString().replace('T', ' ').substring(0, 19);
        const fileStats = `${files.length} Files · +${files.reduce((a, f) => a + f.linesAdded, 0)} lines, -${files.reduce((a, f) => a + f.linesRemoved, 0)} lines`;

        return (
            <Box flexDirection="column">
                {/* Header */}
                <Text>▲ relaycode transaction details</Text>
                <Separator />
                
                {/* Modal takeover for Revert */}
                {bodyView === 'REVERT_CONFIRM' && <RevertModal transactionHash={transaction.hash} />}
                
                {/* Main view */}
                <Box flexDirection="column" display={bodyView === 'REVERT_CONFIRM' ? 'none' : 'flex'}>
                    {/* Navigator Part A */}
                    <Box flexDirection="column" marginY={1}>
                        <Text>UUID: {transaction.id}</Text>
                        <Text>Git: {message}</Text>
                        <Text>Date: {date} · Status: {status}</Text>
                        <Text>Stats: {fileStats}</Text>
                    </Box>
                    
                    {/* Navigator Part B */}
                    {renderNavigator()}
                    
                    <Separator />
                    
                    {/* Body */}
                    <Box marginY={1}>
                        {renderBody()}
                    </Box>
                    
                    <Separator />
                </Box>
                
                {/* Footer */}
                <Box>
                    {renderFooter()}
                </Box>
            </Box>
        );
    };


    export default TransactionDetailScreen;
  src/components/TransactionHistoryScreen.tsx: >-
    import { useMemo } from 'react';

    import { Box, Text } from 'ink';

    import TextInput from 'ink-text-input';

    import Spinner from 'ink-spinner';

    import Separator from './Separator';

    import type { Transaction, FileItem } from '../types/domain.types';

    import { useTransactionHistoryScreen } from
    '../hooks/useTransactionHistoryScreen';

    import { UI_CONFIG } from '../config/ui.config';

    import ActionFooter from './ActionFooter';

    import type { ActionItem } from '../types/actions.types';


    // --- Sub-components ---


    const ContentRow = ({ title, content, isSelected, isExpanded, isLoading }: {
        title: string;
        content: string;
        isSelected: boolean;
        isExpanded: boolean;
        isLoading: boolean;
    }) => {
        const icon = isExpanded ? '▾' : '▸';
        return (
            <Box flexDirection="column" paddingLeft={6}>
                <Text color={isSelected ? 'cyan' : undefined}>
                    {isSelected ? '> ' : '  '}{icon} {title}
                </Text>
                {isLoading && <Box paddingLeft={8}><Spinner type="dots" /></Box>}
                {isExpanded && !isLoading && (
                    <Box paddingLeft={8} flexDirection="column">
                        {(content || '').split('\n').map((line, i) => <Text key={i}>{line || ' '}</Text>)}
                    </Box>
                )}
            </Box>
        );
    };


    const DiffPreview = ({ diff }: { diff: string }) => {
        const lines = diff.split('\n');
        const previewLines = lines.slice(0, 5);
        const hiddenLines = lines.length > 5 ? lines.length - 5 : 0;

        return (
            <Box flexDirection="column" paddingLeft={8}>
                {previewLines.map((line, i) => {
                    let color = 'white';
                    if (line.startsWith('+')) color = 'green';
                    if (line.startsWith('-')) color = 'red';
                    if (line.startsWith('@@')) color = 'cyan';
                    return <Text key={i} color={color}>{line}</Text>;
                })}
                {hiddenLines > 0 && <Text color="gray">... {hiddenLines} lines hidden ...</Text>}
            </Box>
        );
    };


    const FileRow = ({ file, isSelected, isExpanded, isLoading }: {
        file: FileItem;
        isSelected: boolean;
        isExpanded: boolean;
        isLoading: boolean;
    }) => {
        const icon = isExpanded ? '▾' : '▸';
        const typeMap = { MOD: '[MOD]', ADD: '[ADD]', DEL: '[DEL]', REN: '[REN]' };
        
        return (
            <Box flexDirection="column" paddingLeft={6}>
                <Text color={isSelected ? 'cyan' : undefined}>
                    {isSelected ? '> ' : '  '}
                    {icon} {typeMap[file.type]} {file.path}
                </Text>
                {isLoading && <Box paddingLeft={8}><Spinner type="dots" /></Box>}
                {isExpanded && !isLoading && <DiffPreview diff={file.diff} />}
            </Box>
        );
    };


    const TransactionRow = ({
        tx,
        isSelected,
        isExpanded,
        isSelectedForAction,
        hasSelection,
    }: {
        tx: Transaction;
        isSelected: boolean;
        isExpanded: boolean;
        isSelectedForAction: boolean;
        hasSelection: boolean;
    }) => {
        const icon = isExpanded ? '▾' : '▸';
        const statusMap = {
            COMMITTED: <Text color="green">✓ Committed</Text>,
            HANDOFF: <Text color="magenta">→ Handoff</Text>,
            REVERTED: <Text color="gray">↩ Reverted</Text>,
            APPLIED: <Text color="blue">✓ Applied</Text>,
            PENDING: <Text color="yellow">? Pending</Text>,
            FAILED: <Text color="red">✗ Failed</Text>,
        };
        const date = new Date(tx.timestamp).toISOString().split('T')[0];
        const selectionIndicator = isSelectedForAction ? '[x] ' : '[ ] ';
        
        const statusDisplay = statusMap[tx.status as keyof typeof statusMap] || tx.status;

        return (
            <Box flexDirection="column" marginBottom={isExpanded ? 1 : 0}>
                <Text color={isSelected ? 'cyan' : undefined}>
                    {isSelected ? '> ' : '  '}
                    {hasSelection && selectionIndicator}
                    {icon} {statusDisplay} · {tx.hash} · {date} ·{' '}
                    {tx.message}
                </Text>
                {isExpanded && (
                    <Box flexDirection="column" paddingLeft={8}>
                        {tx.stats && (
                            <Text color="gray">
                                Stats: {tx.stats.files} files, +{tx.stats.linesAdded}/-{tx.stats.linesRemoved}
                            </Text>
                        )}
                        <Text>Files:</Text>
                    </Box>
                )}
            </Box>
        );
    };


    const BulkActionsMode = ({ selectedForActionCount }: {
    selectedForActionCount: number }) => {
        return (
            <Box flexDirection="column" marginY={1}>
                <Text bold color="yellow">PERFORM BULK ACTION ON {selectedForActionCount} SELECTED ITEMS</Text>
                <Box marginY={1}>
                    <Text>This action is often irreversible. Are you sure?</Text>
                </Box>
                <Text>(1) Revert Selected Transactions</Text>
                <Text>(2) Mark as &apos;Git Committed&apos;</Text>
                <Text>(3) Delete Selected Transactions (from Relaycode history)</Text>
                <Text>(Esc) Cancel</Text>
            </Box>
        );
    };


    // --- Main Component ---


    const TransactionHistoryScreen = () => {
        const {
            mode,
            filterQuery,
            selectedForAction,
            selectedItemPath,
            expandedIds,
            loadingPaths,
            actions,
            transactions,
            itemsInView,
            filterStatus,
            showingStatus,
            statsStatus,
            hasSelection,
        } = useTransactionHistoryScreen({ reservedRows: UI_CONFIG.history.reservedRows });

        const transactionsById = useMemo(() => new Map(transactions.map(tx => [tx.id, tx])), [transactions]);

        const renderFooter = () => {
            if (mode === 'FILTER') return <Text>(Enter) Apply Filter & Return      (Esc) Cancel</Text>; 
            if (mode === 'BULK_ACTIONS') return <Text>Choose an option [1-3] or (Esc) Cancel</Text>;
            
            const footerActions: ActionItem[] = [
                { key: '↑↓', label: 'Nav' },
                { key: '→', label: 'Expand' },
                { key: '←', label: 'Collapse' },
                { key: 'Spc', label: 'Select' },
                { key: 'Ent', label: 'Details' },
                { key: 'O', label: 'Open' },
                { key: 'F', label: 'Filter' },
            ];

            if (selectedForAction.size > 0) {
                footerActions.push({ key: 'C', label: 'Copy' }, { key: 'B', label: 'Bulk' });
            }
            return <ActionFooter actions={footerActions} />;
        };

        return (
            <Box flexDirection="column">
                <Text color="cyan">▲ relaycode transaction history</Text>
                <Separator />

                <Box>
                    <Text>Filter: </Text>
                    {mode === 'FILTER' ? (
                        <TextInput value={filterQuery} onChange={actions.setFilterQuery} />
                    ) : (
                        <Text>{filterStatus}</Text>
                    )}
                    <Text> · {showingStatus}</Text>
                    {statsStatus && <Text> · {statsStatus}</Text>}
                </Box>

                <Box flexDirection="column" marginY={1}>
                    {mode === 'BULK_ACTIONS' && <BulkActionsMode selectedForActionCount={selectedForAction.size} />}

                    {mode === 'LIST' && itemsInView.map(path => {
                        const txId = path.split('/')[0]!;
                        const tx = transactionsById.get(txId);
                        if (!tx) return <Text key={path}>Error: Missing TX {txId}</Text>;

                        // Is a transaction row
                        if (path === tx.id) {
                            return (
                                <TransactionRow
                                    key={path}
                                    tx={tx}
                                    isSelected={selectedItemPath === path}
                                    isExpanded={expandedIds.has(path)}
                                    isSelectedForAction={selectedForAction.has(tx.id)}
                                    hasSelection={hasSelection}
                                />
                            );
                        }

                        // Is a child row
                        const itemType = path.split('/')[1]!;
                        const isSelected = selectedItemPath === path;
                        const isExpanded = expandedIds.has(path);
                        const isLoading = loadingPaths.has(path);

                        if (itemType === 'file') {
                            const fileId = path.split('/')[2]!;
                            const file = tx.files?.find(f => f.id === fileId);
                            if (!file) return null;
                            return (
                                <FileRow
                                    key={path} file={file} isSelected={isSelected}
                                    isExpanded={isExpanded} isLoading={isLoading}
                                />
                            );
                        }

                        const contentMap = {
                            message: { title: 'Commit Message', content: tx.message || '' },
                            prompt: { title: 'Prompt', content: tx.prompt || '' },
                            reasoning: { title: 'Reasoning', content: tx.reasoning || '' },
                        };

                        const item = contentMap[itemType as keyof typeof contentMap];
                        if (!item) return null;

                        return (
                            <ContentRow
                                key={path}
                                {...item}
                                isSelected={isSelected}
                                isExpanded={isExpanded}
                                isLoading={isLoading}
                            />
                        );
                    })}
                </Box>

                <Separator />
                {renderFooter()}
            </Box>
        );
    };


    export default TransactionHistoryScreen;
  docs/relaycode-tui/transaction-detail-screen.readme.md: >
    Of course. Here is the final, comprehensive
    `TRANSACTION-DETAIL-SCREEN.README.MD`. It is structured to be a "show, don't
    tell" specification, using full-screen mockups to disclose every major state
    and interaction. This document is designed to be the single source of truth
    for implementing this feature.


    ***


    # TRANSACTION-DETAIL-SCREEN.README.MD


    ## Relaycode TUI: The Transaction Detail Screen Specification


    This document specifies the final design and behavior of the stateful
    Transaction Detail screen. This screen serves as the single source of truth
    for a past transaction, providing a deep, forensic analysis view. It is
    engineered for complete context via progressive disclosure, interactive data
    extraction, and direct, safe actions.


    ### 1. Anatomy of the Screen


    The interface is divided into four consistent, logical components.


    ```
     ▲ relaycode transaction details                                    (Header)
     ──────────────────────────────────────────────────────────────────────────────
      UUID: e4a7c112-a8b3-4f2c-9d1e-8a7c1b9d8f03
      Git:  fix: add missing error handling
      Date: 2023-10-27 14:32:15 · Status: Committed           (Navigator - Part A)
      Stats: 3 Files · +25 lines, -8 lines

     > ▸ (P)rompt
       ▸ (R)easoning (3 steps)                                  (Navigator - Part B)
       ▸ (F)iles (3)
     ──────────────────────────────────────────────────────────────────────────────

      (The Body is a dynamic viewport that renders content based on     (Body)
       the user's focus and actions within the Navigator.)

     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav · (→) Expand · (C)opy Mode · (U)ndo · (Q)uit         (Footer)
    ```


    1.  **Header:** Static branding, confirming the user's location.

    2.  **Navigator:** The top half of the screen and the primary control
    surface. It contains static metadata (Part A) and a navigable list of
    expandable sections (Part B).

    3.  **Body:** A dynamic viewport that renders detailed content (like diffs
    or full text) based on the user's selection in the Navigator.

    4.  **Footer:** The contextual action bar, which updates to show only the
    currently available keyboard shortcuts.


    ---


    ### 2. The User Journey: A State-by-State Disclosure


    This section illustrates the screen's behavior through a typical user
    interaction flow.


    #### 2.1. Initial State: The Collapsed Overview


    This is the default view upon selecting a transaction. It provides a
    complete, scannable summary with all detailed sections collapsed.


    **Behavior:**

    *   The initial focus is on the navigable sections (`(P)rompt`,
    `(R)easoning`, `(F)iles`).

    *   The Body is empty, prompting the user to expand a section for more
    details.

    *   The `▸` symbol indicates a collapsed section.


    ```
     ▲ relaycode transaction details
     ──────────────────────────────────────────────────────────────────────────────
      UUID: e4a7c112-a8b3-4f2c-9d1e-8a7c1b9d8f03
      Git:  fix: add missing error handling
      Date: 2023-10-27 14:32:15 · Status: Committed
      Stats: 3 Files · +25 lines, -8 lines

     > ▸ (P)rompt
       ▸ (R)easoning (3 steps)
       ▸ (F)iles (3)

     ──────────────────────────────────────────────────────────────────────────────

      (Press → to expand a section and view its contents)


     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav · (→) Expand · (C)opy Mode · (U)ndo · (Q)uit
    ```


    #### 2.2. Expanding a Section: Viewing Reasoning


    The user wants to read the full reasoning behind the transaction.


    **Trigger:** The user navigates to `▸ (R)easoning` and presses `(→)`.


    **Behavior:**

    *   The `▸` icon for Reasoning flips to `▾`, indicating it is expanded.

    *   The Body renders the full, formatted text of the reasoning.

    *   The Footer updates to show that `(←)` will now collapse the section and
    that `(↑↓)` can be used to scroll if the content overflows.


    ```
     ▲ relaycode transaction details
     ──────────────────────────────────────────────────────────────────────────────
      UUID: e4a7c112-a8b3-4f2c-9d1e-8a7c1b9d8f03
      Git:  fix: add missing error handling
      Date: 2023-10-27 14:32:15 · Status: Committed
      Stats: 3 Files · +25 lines, -8 lines

       ▸ (P)rompt
     > ▾ (R)easoning (3 steps)
       ▸ (F)iles (3)

     ──────────────────────────────────────────────────────────────────────────────
      REASONING

      1. The primary goal was to make the rollback functionality in `restoreSnapshot`
         more robust. The previous implementation used a simple for-loop which would
         halt on the first error, leaving the project in a partially restored state.

      2. I opted for a `Promise.all` approach to run file restorations in parallel.
         This improves performance slightly but, more importantly, ensures all
         restoration attempts are completed, even if some fail.

      3. An `restoreErrors` array was introduced to collect any exceptions that occur
         during the process. If this array is not empty after the `Promise.all`
         completes, a comprehensive error is thrown, informing the user exactly which
         files failed to restore. This provides much better diagnostics.

     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav/Scroll · (←) Collapse · (C)opy Mode · (U)ndo · (Q)uit
    ```


    #### 2.3. Hierarchical Drill-Down: Inspecting File Diffs


    This demonstrates the powerful two-level navigation for inspecting code
    changes.


    **Step A: Expand the File List**


    **Trigger:** The user navigates to `▸ (F)iles (3)` and presses `(→)`.


    **Behavior:**

    *   The `(F)iles` section expands *within the Navigator*, revealing an
    interactive list of affected files.

    *   Focus shifts to this new inner list. `[MOD]`, `[ADD]`, etc., denote the
    change type.


    ```
     ▲ relaycode transaction details
     ──────────────────────────────────────────────────────────────────────────────
      UUID: e4a7c112-a8b3-4f2c-9d1e-8a7c1b9d8f03
      Git:  fix: add missing error handling
      Date: 2023-10-27 14:32:15 · Status: Committed
      Stats: 3 Files · +25 lines, -8 lines

       ▸ (P)rompt
       ▸ (R)easoning (3 steps)
       ▾ (F)iles (3)
         > [MOD] src/core/transaction.ts (+18/-5)
           [MOD] src/utils/logger.ts    (+7/-3)
           [DEL] src/utils/old-helper.ts

     ──────────────────────────────────────────────────────────────────────────────

      (Select a file and press → to view the diff)


     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav Files · (→) View Diff · (←) Back to Sections · (C)opy Mode · (Q)uit
    ```


    **Step B: Display the Diff**


    **Trigger:** With `src/core/transaction.ts` selected, the user presses `(→)`
    again.


    **Behavior:**

    *   The Body renders a clean, syntax-highlighted diff for the selected file.

    *   Navigating with `(↑↓)` in the file list will now instantly update the
    Body with the diff for the newly selected file.

    *   Pressing `(←)` will clear the Body and return focus to the file list
    itself (the state in Step A).


    ```
     ▲ relaycode transaction details
     ──────────────────────────────────────────────────────────────────────────────
      UUID: e4a7c112-a8b3-4f2c-9d1e-8a7c1b9d8f03
      Git:  fix: add missing error handling
      Date: 2023-10-27 14:32:15 · Status: Committed
      Stats: 3 Files · +25 lines, -8 lines

       ▸ (P)rompt
       ▸ (R)easoning (3 steps)
       ▾ (F)iles (3)
         > [MOD] src/core/transaction.ts (+18/-5)
           [MOD] src/utils/logger.ts    (+7/-3)
           [DEL] src/utils/old-helper.ts

     ──────────────────────────────────────────────────────────────────────────────
      DIFF: src/core/transaction.ts

       export const restoreSnapshot = async (snapshot: FileSnapshot, ...): ... => {
         ...
    -    for (const [filePath, content] of entries) {

    -        if (content === null) {

    -            await deleteFile(filePath, cwd);

    -        }

    -    }

    +    const restoreErrors: { path: string, error: unknown }[] = [];

    +

    +    await Promise.all(entries.map(async ([filePath, content]) => {

    +        try {

    +          if (content === null) { ... }

    +        } catch (error) {

    +          restoreErrors.push({ path: filePath, error });

    +        }

    +    }));

    +

    +    if (restoreErrors.length > 0) { ... }
       }

     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav Files · (←) Back to Files · (C)opy Mode · (U)ndo · (Q)uit
    ```


    ---


    ### 3. Advanced Modes & Actions


    #### 3.1. Advanced Copy Mode


    This mode transforms the screen into a powerful data extraction tool.


    **Trigger:** The user presses `(C)` from any non-modal view.


    **Behavior:**

    *   The entire screen is replaced by a multi-select checklist interface.

    *   The user can navigate `(↑↓)`, toggle items with `(Spc)`, and press
    `(Enter)` to copy a formatted aggregation of the selected data to the
    clipboard.

    *   A confirmation message provides immediate feedback. Pressing `(C)` or
    `(Esc)` exits the mode.


    ```
     ▲ relaycode details · copy mode
     ──────────────────────────────────────────────────────────────────────────────
     Select data to copy from transaction e4a7c112 (use Space to toggle):

     > [x] (M) Git Message
       [ ] (P) Prompt
       [x] (R) Reasoning
       [ ] (A) All Diffs (3 files)
       [ ] (F) Diff for: src/core/transaction.ts
       [ ] (X) Context Files (latest) (3 files)
       [ ] (U) UUID
       [ ] (Y) Full YAML representation

     ──────────────────────────────────────────────────────────────────────────────
      ✓ Copied 2 items to clipboard.


     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav · (Spc) Toggle · (Enter) Copy Selected · (C)opy/Exit
    ```


    #### 3.2. Revert Confirmation Modal


    This action initiates a safe, non-destructive revert of the transaction.


    **Trigger:** The user presses `(U)` from any primary view.


    **Behavior:**

    *   A modal overlay appears, halting all other interactions to prevent
    accidental reverts.

    *   The text clearly explains that this creates a *new* transaction,
    preserving history.

    *   The footer simplifies to the only two possible actions: Confirm or
    Cancel.


    ```
     ▲ relaycode transaction details
     ──────────────────────────────────────────────────────────────────────────────
      UUID: e4a7c112-a8b3-4f2c-9d1e-8a7c1b9d8f03
      Git:  ┌──────────────────────────────────────────────────────────┐
      Date: │                 REVERT THIS TRANSACTION?                 │
            │                                                          │
      Stats:│ This will create a NEW transaction that reverses all     │
            │ changes made by e4a7c112. The original transaction       │
     ───────│ record will be preserved.                                │
            │                                                          │
       ▸ (P)│                       Are you sure?                      │
       ▸ (R)└──────────────────────────────────────────────────────────┘
       ▾ (F)iles (3)
         > [MOD] src/core/transaction.ts (+18/-5)
           [MOD] src/utils/logger.ts    (+7/-3)
           [DEL] src/utils/old-helper.ts

     ──────────────────────────────────────────────────────────────────────────────
     (Enter) Confirm Revert      (Esc) Cancel
    ```


    ---


    ### 4. UI Legend & Keybindings


    | Symbol | Meaning                 | Context       |
    Description                                  |

    | :----- | :---------------------- | :------------ |
    :------------------------------------------- |

    | `>`    | Focused/Selected Item   | Universal     | The currently active
    line for navigation.    |

    | `▸`    | Collapsed Section       | Navigator     | Indicates a section can
    be expanded with `→`. |

    | `▾`    | Expanded Section        | Navigator     | Indicates a section can
    be collapsed with `←`.|

    | `[MOD]`| Modified File           | File List     | The file was
    modified.                       |

    | `[ADD]`| Added File              | File List     | The file was newly
    created.                  |

    | `[DEL]`| Deleted File            | File List     | The file was
    deleted.                        |

    | `[REN]`| Renamed File            | File List     | The file was
    renamed.                        |


    | Key(s)       | Action             |
    Context                                    |

    | :----------- | :----------------- |
    :----------------------------------------- |

    | `↑` `↓`      | Navigate           |
    Universal                                  |

    | `→`          | Expand / Drill Down| Navigator (Sections or
    Files)              |

    | `←`          | Collapse / Go Back | Navigator (Expanded Sections or
    Files)     |

    | `(C)`        | Enter/Exit Copy Mode | Primary Views & Copy
    Mode                  |

    | `(U)`        | Initiate Revert    | Primary
    Views                              |

    | `(Q)` `Esc`  | Quit / Cancel      |
    Universal                                  |

    | `(Enter)`    | Confirm Action     | Copy Mode (to copy), Revert Modal (to
    revert) |

    | `(Spc)`      | Toggle Selection   | Copy
    Mode                                  |
  docs/relaycode-tui/transaction-history-screen.readme.md: >
    # TRANSACTION-HISTORY-SCREEN.README.MD


    ## Relaycode TUI: The Stateful Transaction History Screen


    This document specifies the final design and behavior of the stateful
    Transaction History screen, the command center for a project's AI-driven
    development history. Triggered by `relay log`, this screen transforms a
    simple log into a powerful, interactive database explorer.


    ### 1. Core Philosophy


    The transaction history is the project's institutional memory. This screen
    is engineered to make that memory **discoverable, drillable, queryable, and
    actionable**.


    -   **Discoverable & Drillable:** The log is an interactive outline. Users
    get a high-level overview and then progressively disclose more detail
    *in-place* using familiar arrow key navigation, minimizing context
    switching.

    -   **Queryable:** A powerful, live-filtering system allows users to
    instantly find specific transactions based on content, status, file paths,
    or dates.

    -   **Actionable:** The screen provides sophisticated tools for bulk data
    extraction (Copy Mode) and history management (Bulk Actions), turning
    insight into action.


    ---


    ### 2. The Interaction Journey: A Walkthrough


    The power of the screen is best understood by following a user's workflow
    from browsing to deep analysis and action.


    #### **State 2.1: Default View - The 10,000-Foot Overview**


    Upon launching `relay log`, the user is presented with a clean, compact, and
    reverse-chronological list of all transactions. Each entry is a single line,
    prefixed with `▸` to indicate it can be expanded.


    ```
     ▲ relaycode transaction history
     ──────────────────────────────────────────────────────────────────────────────
      Filter: (none) · Showing 1-10 of 42 · Stats: 6 Cmt, 1 H/O, 2 Rev

     > ▸ ✓ Committed · e4a7c112 · 2023-10-27 · fix: add missing error handling
       ▸ ✓ Committed · 4b9d8f03 · 2023-10-27 · refactor: simplify clipboard logic
       ▸ → Handoff   · 8a3f21b8 · 2023-10-26 · feat: implement new dashboard UI
       ▸ ↩ Reverted  · b2c9e04d · 2023-10-26 · style: update button component
       ▸ ✗ Reverted  · 9c2e1a05 · 2023-10-25 · docs: update readme with TUI spec
       ...

     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav · (→) Expand · (Spc) Select · (Ent) Details · (F)ilter · (C)opy · (B)ulk
    ```


    #### **State 2.2: Level 1 Drill-Down - The Content Overview**


    Pressing `(→)` on the selected transaction expands it in-place, revealing
    its core components: Commit Message, Prompt, Reasoning, and Files. The icon
    changes to `▾` and the footer updates to include the `(←) Collapse` action.


    ```
     ▲ relaycode transaction history
     ──────────────────────────────────────────────────────────────────────────────
      Filter: (none) · Showing 1-10 of 42 · Stats: 6 Cmt, 1 H/O, 2 Rev

     > ▾ ✓ Committed · e4a7c112 · fix: add missing error handling
           ▸ Commit Message
           ▸ Prompt
           ▸ Reasoning
           ▸ Files (3)

       ▸ ✓ Committed · 4b9d8f03 · 2023-10-27 · refactor: simplify clipboard logic
       ▸ → Handoff   · 8a3f21b8 · 2023-10-26 · feat: implement new dashboard UI
       ...

     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav · (←) Collapse · (→) Expand · (Ent) Details · (F)ilter · (C)opy
    ```


    #### **State 2.3: Level 2 Drill-Down - In-place Content Preview**


    With the transaction expanded, the user can navigate `(↓)` to a content item
    like `Reasoning` and press `(→)` again. This performs a second-level
    expansion, showing the full text content directly within the list.


    ```
     ▲ relaycode transaction history
     ──────────────────────────────────────────────────────────────────────────────
      Filter: (none) · Showing 1-10 of 42 · Stats: 6 Cmt, 1 H/O, 2 Rev

     > ▾ ✓ Committed · e4a7c112 · fix: add missing error handling
           ▸ Commit Message
           ▸ Prompt
           ▾ Reasoning
               1. Identified a potential uncaught exception in the `restoreSnapshot`
                  function if a file operation fails midway through a loop...
               2. Wrapped the file restoration loop in a `Promise.all` for
                  robustness and comprehensive error collection.
           ▸ Files (3)

       ▸ ✓ Committed · 4b9d8f03 · 2023-10-27 · refactor: simplify clipboard logic
       ...

     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav · (←→) Collapse/Expand · (Ent) Details · (F)ilter · (C)opy
    ```


    #### **State 2.4: Level 3 Drill-Down - The In-place Diff Preview**


    By navigating to and expanding the `Files` item, the user can then select a
    specific file and press `(→)` again. This performs a third-level expansion,
    showing a truncated preview of that file's diff directly within the list.


    ```
     ▲ relaycode transaction history
     ──────────────────────────────────────────────────────────────────────────────
      Filter: (none) · Showing 1-10 of 42 · Stats: 6 Cmt, 1 H/O, 2 Rev

     > ▾ ✓ Committed · e4a7c112 · fix: add missing error handling
           ...
           ▾ Files (3)
             ▾ [MOD] src/core/transaction.ts
                   --- a/src/core/transaction.ts
                   +++ b/src/core/transaction.ts
                   @@ -45,7 +45,9 @@
                   -    for (const [filePath, content] of entries) {
                   +    const restoreErrors: { path: string, error: unknown }[] = [];
                   ... 4 lines hidden ...
             ▸ [MOD] src/utils/logger.ts
             ▸ [DEL] src/utils/old-helper.ts

       ▸ ✓ Committed · 4b9d8f03 · 2023-10-27 · refactor: simplify clipboard logic
       ...

     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav File/Tx · (←→) Collapse/Expand · (Ent) Full Diff · (X)pand Full Diff
    ```


    ---

    *(Page Break)*

    ---


    #### **State 2.5: Filtering Mode - Querying the History**


    From any browsing state, pressing `(F)` shifts focus to the filter bar. The
    transaction list updates in real-time as the user constructs their query.
    The footer shows context-specific actions.


    ```
     ▲ relaycode transaction history
     ──────────────────────────────────────────────────────────────────────────────
      Filter: logger.ts status:committed ▸ |

     > ✓ Committed · e4a7c112 · 2023-10-27 · fix: add missing error handling
       ✓ Committed · 4b9d8f03 · 2023-10-27 · refactor: simplify clipboard logic
       ...

     ──────────────────────────────────────────────────────────────────────────────
     (Enter) Apply Filter & Return      (Esc) Cancel
    ```

    After pressing `(Enter)`, the filter is applied, the status bar is updated,
    and control returns to the (now much shorter) transaction list.


    ```
     ▲ relaycode transaction history
     ──────────────────────────────────────────────────────────────────────────────
      Filter: logger.ts status:committed · Showing 2 of 42 · Stats: 6 Cmt, 1 H/O, 2 Rev

     > ▸ ✓ Committed · e4a7c112 · 2023-10-27 · fix: add missing error handling
       ▸ ✓ Committed · 1a2b3c4d · 2023-10-22 · feat: introduce structured logging
     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav · (→) Expand · (Ent) Details · (F)ilter · (C)opy · (B)ulk Actions
    ```


    #### **State 2.6: Advanced Copy Mode - Aggregating Data for Export**


    After selecting one or more transactions with `(Space)`, pressing `(C)`
    transforms the entire screen into a powerful, two-panel data aggregation
    tool. The user can select multiple transactions *and* multiple data fields
    to create a custom report.


    ```
     ▲ relaycode history · copy mode
     ──────────────────────────────────────────────────────────────────────────────
     [x] ✓ e4a7c112 · fix: add missing error handling
     [ ] ✓ 4b9d8f03 · refactor: simplify clipboard logic
     [x] → 8a3f21b8 · feat: implement new dashboard UI
     ...
     ──────────────────────────────────────────────────────────────────────────────
     Select data to copy from 2 transactions:

     [x] (M) Git Messages         [ ] (P) Prompts          [x] (R) Reasonings
     [ ] (D) Diffs                [ ] (X) Context Files    [ ] (U) UUIDs
     [ ] (Y) Full YAML
     
     ──────────────────────────────────────────────────────────────────────────────
     (↑↓) Nav Panels · (←→) Nav Items · (Spc) Toggle · (Enter) Copy · (C)opy/Exit
    ```

    Pressing `(Enter)` aggregates the selected data (`Git Messages` and
    `Reasonings` from two transactions) and places it on the clipboard,
    providing instant feedback.


    ```
     ──────────────────────────────────────────────────────────────────────────────
     ✓ Copied Messages & Reasonings to clipboard.
     ──────────────────────────────────────────────────────────────────────────────
    ```

    **Example Clipboard Output:**

    ```

    --- TRANSACTION e4a7c112 ---


    [Git Message]

    fix: add missing error handling

    - Added try/catch to restoreSnapshot to prevent crashes on partial reverts.


    [Reasoning]

    1. Identified a potential uncaught exception in the restoreSnapshot
    function.

    2. Wrapped the file restoration loop in a Promise.all for robustness.


    --- TRANSACTION 8a3f21b8 ---


    [Git Message]

    feat: implement new dashboard UI

    - Creates a new stateful dashboard screen for the 'watch' command.


    [Reasoning]

    1. The goal was to provide a more application-like feel for the watch
    command.

    2. Designed a high-density layout to show system status and recent history.

    ```


    #### **State 2.7: Bulk Actions Mode - Managing History**


    Multi-selecting items with `(Space)` and then pressing `(B)` brings up a
    modal for performing operations on the entire selection. This is for
    powerful, state-changing actions.


    ```
     ▲ relaycode history · bulk actions
     ──────────────────────────────────────────────────────────────────────────────
     [x] ✓ e4a7c112 · fix: add missing error handling
     [ ] ✓ 4b9d8f03 · refactor: simplify clipboard logic
     [x] → 8a3f21b8 · feat: implement new dashboard UI
     ...
     ──────────────────────────────────────────────────────────────────────────────
      PERFORM BULK ACTION ON 2 SELECTED ITEMS

      This action is often irreversible. Are you sure?

      (1) Revert Selected Transactions
      (2) Mark as 'Git Committed'
      (3) Delete Selected Transactions (from Relaycode history)
      (Esc) Cancel

     ──────────────────────────────────────────────────────────────────────────────
     Choose an option [1-3, Esc]:
    ```

    This comprehensive design ensures the Transaction History screen is an
    indispensable tool for managing the entire lifecycle of AI-assisted changes,
    providing unparalleled efficiency and control.
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 143
