uuid: 139e80e1-dd20-4375-802c-7b713280144f
projectId: relaycode-tui
createdAt: '2025-09-25T22:59:46.386Z'
gitCommitMsg: >-
  fix: Resolve TypeScript and ESLint errors

  This commit addresses all outstanding TypeScript compilation errors and ESLint
  rule violations reported after implementing vertical scrolling and pagination.

  - build: Fix TS errors in `useTransactionDetailScreen.tsx` by correcting an
  unused variable and fixing a scope issue in the `pageDown` handler. - lint:
  Fix `no-undef` error for `NodeJS.Timeout` by using `ReturnType<typeof
  setInterval>`. - style: Reformat long lines in multiple components to adhere
  to `max-len` rule. - style: Fix minor linting issues like `comma-dangle` and
  `no-multiple-empty-lines`.
promptSummary: >-
  I ran into TypeScript and ESLint errors after the previous changes. The errors
  include unused variables, undefined variables, and lines exceeding the maximum
  length. I need you to fix all of them.
reasoning:
  - >-
    I have analyzed the TypeScript and ESLint errors. They stem from a
    combination of unused variables, incorrect variable scope in a callback,
    missing Node.js type definitions for the linter, and several lines of code
    exceeding the configured maximum length.
  - I will now apply fixes for all these issues.
  - >-
    First, I'll correct the TypeScript compilation errors and related ESLint
    issues in `useTransactionDetailScreen.tsx`. This involves removing an unused
    `width` variable and fixing the logic inside the `pageDown` key handler.
  - >-
    Next, I'll resolve the `no-undef` error for `NodeJS.Timeout` in
    `logger.service.ts` by using a more portable TypeScript utility type, and I
    will also remove an extra blank line flagged by the linter.
  - I will fix the `comma-dangle` warning in `ActionFooter.tsx`.
  - >-
    Now, I will address the `max-len` warnings by reformatting the long lines in
    the affected components to improve readability and adhere to the linting
    rules.
  - >-
    These changes should resolve all the reported TypeScript and ESLint issues,
    resulting in a clean build and linting process.
operations:
  - type: write
    path: src/hooks/useTransactionDetailScreen.tsx
    content: >+
      --- src/hooks/useTransactionDetailScreen.tsx

      +++ src/hooks/useTransactionDetailScreen.tsx

      @@ -17,8 +17,8 @@
               toggleRevertConfirm,
               confirmRevert,
           } = store.actions;
      -    const [contentScrollIndex, setContentScrollIndex] = useState(0);

      -    const [width, height] = useStdoutDimensions();

      +    const [contentScrollIndex, setContentScrollIndex] = useState(0);

      +    const [, height] = useStdoutDimensions();
       
           // Reset scroll when body view changes
           useEffect(() => {
      @@ -69,13 +69,11 @@
                   }
                   if (key.pageUp) {
                       setContentScrollIndex(i => Math.max(0, i - availableBodyHeight));
                       return;
                   }
                   if (key.pageDown) {
      -                const newIndex = i + availableBodyHeight;

      -                setContentScrollIndex(i => Math.min(Math.max(0,
      contentLines - availableBodyHeight), newIndex));

      +                setContentScrollIndex(i => Math.min(Math.max(0,
      contentLines - availableBodyHeight), i + availableBodyHeight));
                       return;
                   }
               }
       
      -
               // --- Main Input ---
               if (input.toLowerCase() === 'c') {
                   openCopyMode();

    patchStrategy: standard-diff
  - type: write
    path: src/services/logger.service.ts
    content: |+
      --- src/services/logger.service.ts
      +++ src/services/logger.service.ts
      @@ -1,6 +1,6 @@
       import { useLogStore } from '../stores/log.store';
       
      -let simulatorInterval: NodeJS.Timeout | null = null;
      +let simulatorInterval: ReturnType<typeof setInterval> | null = null;
       
       const mockClipboardContents = [
           'feat(dashboard): implement new UI components',
      @@ -42,7 +42,6 @@
       const error = (message: string) => useLogStore.getState().actions.addLog('ERROR', message);
       
       
       export const LoggerService = {
           debug,
           info,

    patchStrategy: standard-diff
  - type: write
    path: src/components/ActionFooter.tsx
    content: >+
      --- src/components/ActionFooter.tsx

      +++ src/components/ActionFooter.tsx

      @@ -45,7 +45,7 @@
           // Calculate columns based on the widest item, ensuring we don't try to make more columns than items
           const numColumns = Math.min(
               actions.length,
      -        Math.max(1, Math.floor(availableWidth / (maxItemWidth +
      separatorWidth)))

      +        Math.max(1, Math.floor(availableWidth / (maxItemWidth +
      separatorWidth))),
           );
           
           const itemsPerColumn = Math.ceil(actions.length / numColumns);

    patchStrategy: standard-diff
  - type: write
    path: src/components/DashboardScreen.tsx
    content: >+
      --- src/components/DashboardScreen.tsx

      +++ src/components/DashboardScreen.tsx

      @@ -61,9 +61,12 @@
               : transaction.message;
           
           const content = (
      -        <Text>

      -            {time} {expandIcon} {icon} {statusText} <Text
      color="gray">{transaction.hash}</Text> · {messageNode}

      -        </Text>

      +        <Text>

      +            {time} {expandIcon} {icon} {statusText}{' '}

      +            <Text color="gray">{transaction.hash}</Text>

      +            {' '}· {messageNode}

      +        </Text>
           );
       
           return isSelected ? <Text bold color="cyan">{'> '}{content}</Text> : <Text>{'  '}{content}</Text>;

    patchStrategy: standard-diff
  - type: write
    path: src/components/DebugLogScreen.tsx
    content: >+
      --- src/components/DebugLogScreen.tsx

      +++ src/components/DebugLogScreen.tsx

      @@ -66,7 +66,8 @@
                   )}
                   <Box flexGrow={1} /> 
                   <Text>
      -                Showing {Math.min(viewOffset + 1,
      filteredLogCount)}-{Math.min(viewOffset + logsInView.length,
      filteredLogCount)} of {filteredLogCount}

      +                Showing {Math.min(viewOffset + 1, filteredLogCount)}-

      +                {Math.min(viewOffset + logsInView.length,
      filteredLogCount)} of {filteredLogCount}
                   </Text> 
               </Box>
           );

    patchStrategy: standard-diff
  - type: write
    path: src/components/DebugMenu.tsx
    content: >+
      --- src/components/DebugMenu.tsx

      +++ src/components/DebugMenu.tsx

      @@ -45,7 +45,8 @@
                       ]}/>
                       <Box flexGrow={1} />
                       <Text>
      -                    {Math.min(viewOffset + 1,
      totalItems)}-{Math.min(viewOffset + menuItems.length, totalItems)} of
      {totalItems}

      +                    {Math.min(viewOffset + 1, totalItems)}-

      +                    {Math.min(viewOffset + menuItems.length, totalItems)}
      of {totalItems}
                       </Text>
                   </Box>
               </Box>

    patchStrategy: standard-diff
  - type: write
    path: src/components/ReviewScreen.tsx
    content: >+
      --- src/components/ReviewScreen.tsx

      +++ src/components/ReviewScreen.tsx

      @@ -419,9 +419,13 @@
                       <Box flexDirection="column">
                           <Text>{hash} · {message}</Text>
                           <Text>
      -                        (<Text
      color="green">+{totalLinesAdded}</Text>/<Text
      color="red">-{totalLinesRemoved}</Text>) · {numFiles} Files ·
      ({approvedFilesCount}/{numFiles} Appr)

      -                        · Showing {viewOffset + 1}-{Math.min(viewOffset +
      navigableItemsInView.length, navigableItems.length)} of
      {navigableItems.length}

      +                        (<Text
      color="green">+{totalLinesAdded}</Text>/<Text
      color="red">-{totalLinesRemoved}</Text>

      +                        ) · {numFiles} Files ·
      ({approvedFilesCount}/{numFiles} Appr)

      +                        · Showing {viewOffset + 1}-

      +                        {Math.min(viewOffset +
      navigableItemsInView.length, navigableItems.length)} of
      {navigableItems.length}
                               {patchStatus === 'PARTIAL_FAILURE' && scripts.length === 0 && <Text> · Scripts: SKIPPED</Text>}
                               {patchStatus === 'PARTIAL_FAILURE' && <Text color="red" bold> · MULTIPLE PATCHES FAILED</Text>}
                           </Text>

    patchStrategy: standard-diff
  - type: write
    path: src/components/TransactionDetailScreen.tsx
    content: >+
      --- src/components/TransactionDetailScreen.tsx

      +++ src/components/TransactionDetailScreen.tsx

      @@ -106,12 +106,14 @@
                               {files.map((file) => {
                                    const fileId = `FILES/${file.id}`;
                                    const isFileSelected = focusedItemPath === fileId;
      -                             const stats = file.type === 'DEL' ? '' : `
      (+${file.linesAdded}/-${file.linesRemoved})`;

      +                             const stats = file.type === 'DEL'

      +                                ? ''

      +                                : `
      (+${file.linesAdded}/-${file.linesRemoved})`;
                                    return (
                                       <Text key={file.id} color={isFileSelected ? 'cyan' : undefined}>
                                           {isFileSelected ? '> ' : '  '}
      -                                    {`${getFileChangeTypeIcon(file.type)}
      ${file.path}${stats}`}

      +                                    {getFileChangeTypeIcon(file.type)}
      {file.path}{stats}
                                       </Text>
                                   );
                               })}

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useReviewScreen.tsx
    content: >+
      --- src/hooks/useReviewScreen.tsx

      +++ src/hooks/useReviewScreen.tsx

      @@ -34,11 +34,14 @@
           }, [bodyView]);
       
           // Header(2) + Meta(3) + Prompt/Reasoning(2) + Separator(1) + Scripts(N) + Separator(1) + FilesHeader(1) + Separator(1) + BodyMargin(1) + Footer(1)
      -    const RESERVED_ROWS_MAIN = 13 + (transaction?.scripts?.length || 0);

      +    const scriptCount = transaction?.scripts?.length || 0;

      +    const RESERVED_ROWS_MAIN = 13 + scriptCount;
           const { viewOffset, viewportHeight } = useViewport({ selectedIndex: selectedItemIndex, reservedRows: RESERVED_ROWS_MAIN });
       
           // For body content, it's simpler
      -    const availableBodyHeight = Math.max(1, height - (RESERVED_ROWS_MAIN
      + (transaction?.files?.length || 0)));

      +    const fileCount = transaction?.files?.length || 0;

      +    const availableBodyHeight = Math.max(1, height - (RESERVED_ROWS_MAIN
      + fileCount));
       
           const navigableItems = useMemo((): NavigableItem[] => {
               if (!transaction) return [];

    patchStrategy: standard-diff
snapshot:
  src/hooks/useTransactionDetailScreen.tsx: >-
    import { useInput, type Key } from 'ink';

    import { useDetailStore } from '../stores/detail.store';

    import { useViewStore } from '../stores/view.store';

    import { useTransactionStore, selectSelectedTransaction } from
    '../stores/transaction.store';

    import { useMemo, useState, useEffect } from 'react';

    import { useCopyStore } from '../stores/copy.store';

    import { EditorService } from '../services/editor.service';

    import { useStdoutDimensions } from '../utils';


    export const useTransactionDetailScreen = () => {
        const store = useDetailStore();
        const transaction = useTransactionStore(selectSelectedTransaction);
        const files = useMemo(() => transaction?.files || [], [transaction]);

        const {
            navigateUp,
            navigateDown,
            expandOrDrillDown,
            collapseOrBubbleUp,
            toggleRevertConfirm,
            confirmRevert,
        } = store.actions;
        const [contentScrollIndex, setContentScrollIndex] = useState(0);
        const [width, height] = useStdoutDimensions();

        // Reset scroll when body view changes
        useEffect(() => {
            setContentScrollIndex(0);
        }, [store.bodyView]);

        // Header(2) + Meta(4) + Navigator(3+) + Separator(1) + BodyMargin(1) + Separator(1) + Footer(1)
        const availableBodyHeight = Math.max(1, height - 13 - (transaction?.files?.length || 0));

        const openCopyMode = () => {
            if (!transaction) return;
            const { focusedItemPath } = store;
            const fileId = focusedItemPath.split('/')[1];
            const selectedFile = fileId ? files.find(f => f.id === fileId) : undefined;
            useCopyStore.getState().actions.openForDetail(transaction, selectedFile);
        };

        useInput((input: string, key: Key) => {
            if (store.bodyView === 'REVERT_CONFIRM') {
                if (key.escape) toggleRevertConfirm();
                if (key.return) confirmRevert();
                return;
            }
            
            // --- Content Scrolling ---
            if (store.bodyView === 'PROMPT' || store.bodyView === 'REASONING' || store.bodyView === 'DIFF_VIEW') {
                 let contentLines = 0;
                if (store.bodyView === 'PROMPT') {
                    contentLines = (transaction?.prompt || '').split('\n').length;
                } else if (store.bodyView === 'REASONING') {
                    contentLines = (transaction?.reasoning || '').split('\n').length;
                } else if (store.bodyView === 'DIFF_VIEW') {
                    const fileId = store.focusedItemPath.split('/')[1];
                    const file = files.find(f => f.id === fileId);
                    contentLines = (file?.diff || '').split('\n').length;
                }
                
                if (key.upArrow) {
                    setContentScrollIndex(i => Math.max(0, i - 1));
                    return;
                }
                if (key.downArrow) {
                    setContentScrollIndex(i => Math.min(Math.max(0, contentLines - availableBodyHeight), i + 1));
                    return;
                }
                if (key.pageUp) {
                    setContentScrollIndex(i => Math.max(0, i - availableBodyHeight));
                    return;
                }
                if (key.pageDown) {
                    const newIndex = i + availableBodyHeight;
                    setContentScrollIndex(i => Math.min(Math.max(0, contentLines - availableBodyHeight), newIndex));
                    return;
                }
            }


            // --- Main Input ---
            if (input.toLowerCase() === 'c') {
                openCopyMode();
                return;
            }
            if (input.toLowerCase() === 'u') {
                toggleRevertConfirm();
                return;
            }
            if (input.toLowerCase() === 'o') {
                if (!transaction) return;
                const { focusedItemPath } = store;
                if (focusedItemPath.includes('/')) { // Is a file
                    const fileId = focusedItemPath.split('/')[1];
                    const file = files.find(f => f.id === fileId);
                    if (file) EditorService.openFileInEditor(file.path);
                } else { // Is a section, open the transaction YAML
                    const yamlPath = EditorService.getTransactionYamlPath(transaction.hash);
                    EditorService.openFileInEditor(yamlPath);
                }
            }

            // Navigator movement only if not scrolling content
            if (store.bodyView !== 'PROMPT' && store.bodyView !== 'REASONING' && store.bodyView !== 'DIFF_VIEW') {
                if (key.upArrow) navigateUp();
                if (key.downArrow) navigateDown();
            }
            if (key.rightArrow) expandOrDrillDown();
            if (key.leftArrow) collapseOrBubbleUp();
            if (key.return) expandOrDrillDown();
            if (key.escape) collapseOrBubbleUp();
        }, { isActive: useViewStore.getState().activeOverlay === 'none' }); // Prevent input when copy overlay is open

        return {
            transaction,
            files,
            focusedItemPath: store.focusedItemPath,
            expandedItemPaths: store.expandedItemPaths,
            bodyView: store.bodyView,
            contentScrollIndex,
            availableBodyHeight,
        };
    };
  src/components/ActionFooter.tsx: |-
    import { Box, Text } from 'ink';
    import { useStdoutDimensions } from '../utils';
    import { UI_CONFIG } from '../config/ui.config';
    import type { ActionItem } from '../types/actions.types';

    interface ActionFooterProps {
        actions: ActionItem[];
    }

    const Action = ({ item }: { item: ActionItem }) => (
        <Text>
            (<Text color="cyan" bold>{item.key}</Text>) {item.label}
        </Text>
    );

    const ActionFooter = ({ actions }: ActionFooterProps) => {
        const [width] = useStdoutDimensions();
        const { horizontalPadding, actionSeparator } = UI_CONFIG.footer;
        const separatorWidth = actionSeparator.length;

        // Calculate required width for a single line
        const formattedActions = actions.map(a => `(${a.key}) ${a.label}`);
        const singleLineWidth = formattedActions.join(actionSeparator).length;

        // 1. Render horizontally if it fits
        if (singleLineWidth <= width - horizontalPadding * 2) {
            return (
                <Box>
                    {actions.map((item, index) => (
                        <Text key={item.key}>
                            <Action item={item} />
                            {index < actions.length - 1 && <Text>{actionSeparator}</Text>}
                        </Text>
                    ))}
                </Box>
            );
        }

        // 2. If it doesn't fit, calculate multi-column layout
        const itemWidths = formattedActions.map(a => a.length);
        const maxItemWidth = Math.max(...itemWidths);
        
        // Determine how many columns can fit, ensuring at least one
        const availableWidth = width - horizontalPadding * 2;
        // Calculate columns based on the widest item, ensuring we don't try to make more columns than items
        const numColumns = Math.min(
            actions.length,
            Math.max(1, Math.floor(availableWidth / (maxItemWidth + separatorWidth)))
        );
        
        const itemsPerColumn = Math.ceil(actions.length / numColumns);
        const columns: ActionItem[][] = Array.from({ length: numColumns }, () => []);

        actions.forEach((action, index) => {
            const columnIndex = Math.floor(index / itemsPerColumn);
            if (columns[columnIndex]) {
                columns[columnIndex].push(action);
            }
        });

        return (
            <Box flexDirection="row" width="100%">
                {columns.map((column, colIndex) => (
                    <Box
                        key={colIndex}
                        flexDirection="column"
                        // Use a flex-basis approach for more even distribution if needed,
                        // but fixed width is better for alignment.
                        width={maxItemWidth + separatorWidth}
                    >
                        {column.map(item => (
                            <Action key={item.key} item={item} />
                        ))}
                    </Box>
                ))}
            </Box>
        );
    };

    export default ActionFooter;
  src/components/DashboardScreen.tsx: "import React from 'react';\nimport { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport Separator from './Separator';\nimport type { Transaction, TransactionStatus, FileChangeType } from '../types/domain.types';\nimport { useDashboardScreen } from '../hooks/useDashboardScreen';\nimport { UI_CONFIG } from '../config/ui.config';\nimport ActionFooter from './ActionFooter';\nimport type { ActionItem } from '../types/actions.types';\n\n// --- Sub-components & Helpers ---\n\nconst getStatusIcon = (status: TransactionStatus) => {\n    switch (status) {\n        case 'PENDING': return <Text color=\"yellow\">?</Text>;\n        case 'APPLIED': return <Text color=\"green\">✓</Text>;\n        case 'COMMITTED': return <Text color=\"blue\">→</Text>;\n        case 'HANDOFF': return <Text color=\"magenta\">→</Text>;\n        case 'FAILED': return <Text color=\"red\">✗</Text>;\n        case 'REVERTED': return <Text color=\"gray\">↩</Text>;\n        case 'IN-PROGRESS': return <Spinner type=\"dots\" />;\n        default: return <Text> </Text>;\n    }\n};\n\nconst getFileChangeTypeIcon = (type: FileChangeType) => {\n    switch (type) {\n        case 'MOD': return '[MOD]';\n        case 'ADD': return '[ADD]';\n        case 'DEL': return '[DEL]';\n        case 'REN': return '[REN]';\n    }\n};\n\nconst formatTimeAgo = (timestamp: number) => {\n    const seconds = Math.floor((Date.now() - timestamp) / 1000);\n    if (seconds < 60) return `${seconds}s`;\n    const minutes = Math.floor(seconds / 60);\n    return `${minutes}m`;\n};\n\nconst ExpandedEventInfo = ({ transaction }: { transaction: Transaction }) => {\n    const stats = transaction.stats;\n    const files = transaction.files || [];\n\n    return (\n        <Box flexDirection=\"column\" paddingLeft={4} marginBottom={1} borderStyle=\"round\" borderLeft={true} borderTop={false} borderRight={false} borderBottom={false} borderColor=\"gray\">\n            {stats && (\n                <Text color=\"gray\">\n                    Stats: {stats.files} files, +{stats.linesAdded}/-{stats.linesRemoved}\n                </Text>\n            )}\n             <Box flexDirection=\"column\" paddingLeft={1}>\n                {files.map(file => (\n                     <Text key={file.id}>\n                        <Text color=\"gray\">{getFileChangeTypeIcon(file.type)}</Text> {file.path}\n                    </Text>\n                ))}\n             </Box>\n        </Box>\n    );\n};\n\nconst EventStreamItem = ({ transaction, isSelected, isExpanded }: { transaction: Transaction, isSelected: boolean, isExpanded: boolean }) => {\n    const icon = getStatusIcon(transaction.status);\n    const time = formatTimeAgo(transaction.timestamp).padEnd(5, ' ');\n    const statusText = transaction.status.padEnd(11, ' ');\n    const expandIcon = isExpanded ? '▾' : '▸';\n    \n    const messageNode = transaction.status === 'IN-PROGRESS'\n        ? <Text color=\"cyan\">{transaction.message}</Text>\n        : transaction.message;\n    \n    const content = (\n        <Text>\n            {time} {expandIcon} {icon} {statusText} <Text color=\"gray\">{transaction.hash}</Text> · {messageNode}\n        </Text>\n    );\n\n    return isSelected ? <Text bold color=\"cyan\">{'> '}{content}</Text> : <Text>{'  '}{content}</Text>;\n};\n\nconst ConfirmationContent = ({\n    transactionsToConfirm,\n}: {\n    transactionsToConfirm: Transaction[];\n}) => {\n    const actionText = 'APPROVE';\n    \n    return (\n        <Box flexDirection=\"column\" marginY={1} paddingLeft={2}>\n            <Text bold color=\"yellow\">{actionText} ALL PENDING TRANSACTIONS?</Text>\n            <Text>\n                The following {transactionsToConfirm.length} transaction(s) will be approved:\n            </Text>\n            <Box flexDirection=\"column\" paddingLeft={1} marginTop={1}>\n                {transactionsToConfirm.map(tx => (\n                    <Text key={tx.id}>- {tx.hash}: {tx.message}</Text>\n                ))}\n            </Box>\n        </Box>\n    );\n};\n\n// --- Main Component ---\n\nconst DashboardScreen = () => {\n    const {\n        status,\n        transactions,\n        selectedTransactionIndex,\n        pendingApprovals,\n        pendingCommits,\n        isModal,\n        isProcessing,\n        viewOffset,\n        viewportHeight,\n        transactionsToConfirm,\n        expandedTransactionId,\n    } = useDashboardScreen({ reservedRows: UI_CONFIG.dashboard.reservedRows });\n\n    const renderStatusBar = () => {\n        let statusText: string;\n        let statusIcon: React.ReactNode;\n        switch (status) {\n            case 'LISTENING': statusText = 'LISTENING'; statusIcon = <Text color=\"green\">●</Text>; break;\n            case 'PAUSED': statusText = 'PAUSED'; statusIcon = <Text color=\"yellow\">||</Text>; break;\n            case 'APPROVING': statusText = 'APPROVING...'; statusIcon = <Text color=\"cyan\"><Spinner type=\"dots\"/></Text>; break;\n            default: statusText = 'LISTENING'; statusIcon = <Text color=\"green\">●</Text>;\n        }\n\n        let approvalStr: React.ReactNode = String(pendingApprovals).padStart(2, '0');\n        const commitStr: React.ReactNode = String(pendingCommits).padStart(2, '0');\n\n        if (status === 'APPROVING') approvalStr = <Text color=\"cyan\">(<Spinner type=\"dots\"/>)</Text>;\n        if (status === 'CONFIRM_APPROVE') {\n            approvalStr = <Text bold color=\"yellow\">┌ {approvalStr} ┐</Text>;\n        }\n        \n        return (\n            <Text>\n                STATUS: {statusIcon} {statusText} · APPROVALS: {approvalStr} · COMMITS: {commitStr}\n            </Text>\n        );\n    };\n\n    const renderFooter = () => {\n        if (isModal) return (\n            <ActionFooter actions={[\n                { key: 'Enter', label: 'Confirm' },\n                { key: 'Esc', label: 'Cancel' },\n            ]}/>\n        );\n        if (isProcessing) return <Text>Processing... This may take a moment.</Text>;\n\n        const footerActions: ActionItem[] = [\n            { key: '↑↓', label: 'Nav' },\n            { key: '→/Ent', label: 'View' },\n            { key: '←', label: 'Collapse' },\n            { key: 'L', label: 'Log' },\n            { key: 'A', label: 'Approve All' },\n            { key: 'C', label: 'Commit' },\n            { key: 'P', label: status === 'PAUSED' ? 'Resume' : 'Pause' },\n            { key: 'Q', label: 'Quit' },\n        ];\n\t\treturn <ActionFooter actions={footerActions} />;\n    };\n    \n    return (\n        <Box flexDirection=\"column\" height=\"100%\">\n            <Text color=\"cyan\">▲ relaycode dashboard</Text>\n            <Separator />\n            <Box marginY={1}>\n                {renderStatusBar()}\n            </Box>\n            \n            {isModal && (\n                <>\n                    <ConfirmationContent transactionsToConfirm={transactionsToConfirm} />\n                    <Separator />\n                </>\n            )}\n            \n            <Text bold underline> EVENT STREAM (Last 15 minutes)</Text>\n            <Box flexDirection=\"column\" marginTop={1}>\n                {transactions.length === 0 && (\n                     <Box paddingLeft={2}><Text color=\"gray\">Listening for changes... no events yet.</Text></Box>\n                )}\n                {transactions.slice(viewOffset, viewOffset + viewportHeight).map((tx, index) => {\n                    const actualIndex = viewOffset + index;\n                    const isExpanded = expandedTransactionId === tx.id;\n                    return (\n                        <React.Fragment key={tx.id}>\n                            <EventStreamItem\n                                transaction={tx}\n                                isSelected={!isModal && actualIndex === selectedTransactionIndex}\n                                isExpanded={isExpanded}\n                            />\n                            {isExpanded && <ExpandedEventInfo transaction={tx} />}\n                        </React.Fragment>\n                    );\n                })}\n            </Box>\n\n            <Box marginTop={1}><Separator /></Box>\n            {renderFooter()}\n        </Box>\n    );\n};\n\nexport default DashboardScreen;"
  src/components/DebugMenu.tsx: |-
    import { Box, Text } from 'ink';
    import Separator from './Separator';
    import { useDebugMenu } from '../hooks/useDebugMenu';
    import { useStdoutDimensions } from '../utils';
    import ActionFooter from './ActionFooter';

    const getKeyForIndex = (index: number): string => {
        if (index < 9) {
            return (index + 1).toString();
        }
        return String.fromCharCode('a'.charCodeAt(0) + (index - 9));
    };

    const DebugMenu = () => {
        const { selectedIndex, menuItems, viewOffset, totalItems } = useDebugMenu();
        const [width] = useStdoutDimensions();

        return (
            <Box
                flexDirection="column"
                width="100%"
                paddingX={2}
                paddingY={1}
            >
                <Text bold color="black" backgroundColor="yellow"> ▲ relaycode · DEBUG MENU </Text>
                <Separator width={width - 4} />
                <Box flexDirection="column" marginY={1}>
                    {menuItems.map((item, index) => {
                        const absoluteIndex = index + viewOffset;
                        return (
                            <Text key={item.title} color={selectedIndex === absoluteIndex ? 'cyan' : undefined}>
                                {selectedIndex === absoluteIndex ? '> ' : '  '}
                                ({getKeyForIndex(absoluteIndex)}) {item.title}
                            </Text>
                        );
                    })}
                </Box>
                <Separator width={width - 4} />
                <Box>
                    <ActionFooter actions={[
                        { key: '↑↓/PgUp/PgDn', label: 'Nav' },
                        { key: '1-9,a-z', label: 'Jump' },
                        { key: 'Enter', label: 'Select' },
                        { key: 'Esc/Ctrl+B', label: 'Close' },
                    ]}/>
                    <Box flexGrow={1} />
                    <Text>
                        {Math.min(viewOffset + 1, totalItems)}-{Math.min(viewOffset + menuItems.length, totalItems)} of {totalItems}
                    </Text>
                </Box>
            </Box>
        );
    };

    export default DebugMenu;
  src/services/logger.service.ts: >-
    import { useLogStore } from '../stores/log.store';


    let simulatorInterval: NodeJS.Timeout | null = null;


    const mockClipboardContents = [
        'feat(dashboard): implement new UI components',
        'const clipboardy = require(\'clipboardy\');',
        'diff --git a/src/App.tsx b/src/App.tsx\nindex 12345..67890 100644\n--- a/src/App.tsx\n+++ b/src/App.tsx\n@@ -1,5 +1,6 @@\n import React from \'react\';',
        'All changes have been applied successfully. You can now commit them.',
        '{\n  "id": "123",\n  "status": "PENDING"\n}',
        'Can you refactor this to use a switch statement?',
    ];

    let currentClipboardIndex = 0;


    const startSimulator = () => {
        if (simulatorInterval) return;

        // Initial burst of logs to populate the view
        LoggerService.info('Log simulator started.');
        LoggerService.debug('Initializing clipboard watcher...');
        setTimeout(() => LoggerService.debug('Clipboard watcher active.'), 250);

        simulatorInterval = setInterval(() => {
            const random = Math.random();
            if (random < 0.6) {
                LoggerService.debug('Clipboard watcher polling...');
            } else if (random < 0.8) {
                LoggerService.debug('No clipboard change detected.');
            } else {
                const newContent = mockClipboardContents[currentClipboardIndex]!;
                currentClipboardIndex = (currentClipboardIndex + 1) % mockClipboardContents.length;
                const excerpt = newContent.replace(/\n/g, ' ').substring(0, 50).trim();
                LoggerService.info(`Clipboard content changed. Excerpt: "${excerpt}..."`);
            }
        }, 2000);
    };


    const stopSimulator = () => {
        if (simulatorInterval) {
            clearInterval(simulatorInterval);
            simulatorInterval = null;
            LoggerService.info('Log simulator stopped.');
        }
    };


    const debug = (message: string) =>
    useLogStore.getState().actions.addLog('DEBUG', message);

    const info = (message: string) =>
    useLogStore.getState().actions.addLog('INFO', message);

    const warn = (message: string) =>
    useLogStore.getState().actions.addLog('WARN', message);

    const error = (message: string) =>
    useLogStore.getState().actions.addLog('ERROR', message);



    export const LoggerService = {
        debug,
        info,
        warn,
        error,
        startSimulator,
        stopSimulator,
    };
  src/components/DebugLogScreen.tsx: >-
    import { Box, Text } from 'ink';

    import TextInput from 'ink-text-input';

    import Separator from './Separator';

    import ActionFooter from './ActionFooter';

    import { useDebugLogScreen } from '../hooks/useDebugLogScreen';

    import type { LogEntry } from '../types/log.types';

    import { useStdoutDimensions } from '../utils';


    const LogLevelColors = {
        DEBUG: 'gray',
        INFO: 'white',
        WARN: 'yellow',
        ERROR: 'red',
    };


    const LogLevelTag = {
        DEBUG: { color: 'white', backgroundColor: 'gray' },
        INFO: { color: 'black', backgroundColor: 'cyan' },
        WARN: { color: 'black', backgroundColor: 'yellow' },
        ERROR: { color: 'white', backgroundColor: 'red' },
    };


    const LogEntryRow = ({ entry, isSelected }: { entry: LogEntry; isSelected:
    boolean }) => {
        const time = new Date(entry.timestamp).toISOString().split('T')[1]?.replace('Z', '');
        const color = LogLevelColors[entry.level];
        const tagColors = LogLevelTag[entry.level];

        return (
            <Text color={color}>
                {isSelected ? '> ' : '  '}
                <Text color="gray">{time}</Text>
                {' '}
                <Text bold color={tagColors.color} backgroundColor={tagColors.backgroundColor}>
                    {' '}{entry.level.padEnd(5, ' ')}{' '}
                </Text>
                {' '}
                {entry.message}
            </Text>
        );
    };


    const DebugLogScreen = () => {
        const {
            logsInView,
            logCount,
            filteredLogCount,
            selectedIndex,
            mode,
            filterQuery,
            setFilterQuery,
            viewOffset,
        } = useDebugLogScreen();
        const [width] = useStdoutDimensions();

        const renderFilter = () => (
            <Box>
                <Text>Filter: </Text>
                {mode === 'FILTER' ? (
                    <TextInput
                        value={filterQuery}
                        onChange={setFilterQuery}
                        placeholder="Type to filter log messages..."
                    />
                ) : (
                    <Text color="gray">{filterQuery || '(none)'}</Text>
                )}
                <Box flexGrow={1} /> 
                <Text>
                    Showing {Math.min(viewOffset + 1, filteredLogCount)}-{Math.min(viewOffset + logsInView.length, filteredLogCount)} of {filteredLogCount}
                </Text> 
            </Box>
        );

        const footerActions =
            mode === 'FILTER'
                ? [{ key: 'Enter/Esc', label: 'Apply & Close Filter' }]
                : [
                      { key: '↑↓/PgUp/PgDn', label: 'Scroll' },
                      { key: 'F', label: 'Filter' },
                      { key: 'C', label: 'Clear' },
                      { key: 'Esc/Ctrl+L', label: 'Close' },
                  ];

        return (
            <Box
                flexDirection="column"
                width="100%"
                height="100%"
                paddingX={2}
                paddingY={1}
            >
                <Text bold color="black" backgroundColor="yellow"> ▲ relaycode · DEBUG LOG </Text>
                <Separator width={width - 4} />
                <Box marginY={1}>{renderFilter()}</Box>
                <Box flexDirection="column" flexGrow={1}>
                    {logsInView.map((entry, index) => (
                        <LogEntryRow
                            key={`${entry.timestamp}-${index}`}
                            entry={entry}
                            isSelected={selectedIndex === index + viewOffset}
                        />
                    ))}
                    {logCount > 0 && filteredLogCount === 0 && (
                        <Text color="gray">No logs match your filter.</Text>
                    )}
                    {logCount === 0 && (
                        <Text color="gray">No log entries yet. Waiting for system activity...</Text>
                    )}
                </Box>
                <Separator width={width - 4} />
                <ActionFooter actions={footerActions} />
            </Box>
        );
    };


    export default DebugLogScreen;
  src/components/ReviewScreen.tsx: >-
    import { Box, Text } from 'ink';

    import Separator from './Separator';

    import DiffScreen from './DiffScreen';

    import ReasonScreen from './ReasonScreen';

    import type { ScriptResult, FileItem, FileChangeType } from
    '../types/domain.types';

    import { useReviewScreen } from '../hooks/useReviewScreen';

    import ActionFooter from './ActionFooter';

    import type { ActionItem } from '../types/actions.types';


    // --- Sub-components ---


    const FileItemRow = ({ file, reviewStatus, reviewError, reviewDetails,
    isFocused }: {
        file: FileItem;
        reviewStatus: string;
        reviewError?: string;
        reviewDetails?: string;
        isFocused: boolean;
    }) => {
        let icon;
        let iconColor;
        switch (reviewStatus) {
            case 'APPROVED': icon = '[✓]'; iconColor = 'green'; break;
            case 'REJECTED': icon = '[✗]'; iconColor = 'red'; break;
            case 'FAILED': icon = '[!]'; iconColor = 'red'; break;
            case 'AWAITING': icon = '[●]'; iconColor = 'yellow'; break;
            case 'RE_APPLYING': icon = '[●]'; iconColor = 'cyan'; break;
        }

        const typeColor = (type: FileChangeType) => {
            switch (type) {
                case 'ADD': return 'green';
                case 'DEL': return 'red';
                case 'REN': return 'yellow';
                default: return 'white';
            }
        };

        const diffStats = <Text>(+<Text color="green">{file.linesAdded}</Text>/-<Text color="red">{file.linesRemoved}</Text>)</Text>;
        const strategy = file.strategy === 'standard-diff' ? 'diff' : file.strategy;
        const prefix = isFocused ? '> ' : '  ';
        const colorProps = isFocused ? { bold: true, color: 'cyan' } : {};

        if (reviewStatus === 'FAILED') {
            return (
                <Box>
                    <Text {...colorProps}>
                        {prefix}<Text color={iconColor}>{icon} FAILED {file.path}</Text>
                        <Text color="red">    ({reviewError})</Text>
                    </Text>
                </Box>
            );
        }

        if (reviewStatus === 'AWAITING') {
            return (
                <Box>
                    <Text {...colorProps}>
                        {prefix}<Text color={iconColor}>{icon} AWAITING {file.path}</Text>
                        <Text color="yellow">    ({reviewDetails})</Text>
                    </Text>
                </Box>
            );
        }

        if (reviewStatus === 'RE_APPLYING') {
            return (
                 <Box>
                    <Text {...colorProps}>
                        {prefix}<Text color={iconColor}>{icon} RE-APPLYING... {file.path}</Text>
                        <Text color="cyan"> (using &apos;replace&apos; strategy)</Text>
                    </Text>
                </Box>
            );
        }

        return (
            <Box>
                <Text {...colorProps}>
                    {prefix}<Text color={iconColor}>{icon}</Text> {file.type}{' '}
                    <Text color={typeColor(file.type)}>{file.path}</Text>{' '}
                    {diffStats} [{strategy}]
                </Text>
            </Box>
        );
    };


    const ScriptItemRow = ({
        script,
        isSelected,
        isExpanded,
    }: {
        script: ScriptResult;
        isSelected: boolean;
        isExpanded: boolean;
    }) => {
        const icon = script.success ? '✓' : '✗';
        const iconColor = script.success ? 'green' : 'red';
        const arrow = isExpanded ? '▾' : '▸';
        const prefix = isSelected ? '> ' : '  ';
        
        // Extract script type from command (e.g., "bun run test" -> "Post-Command", "bun run lint" -> "Linter")
        const scriptType = script.command.includes('test') ? 'Post-Command' : 
                          script.command.includes('lint') ? 'Linter' : 
                          'Script';

        return (
            <Box>
                <Text bold={isSelected} color={isSelected ? 'cyan' : undefined}>
                    {prefix}<Text color={iconColor}>{icon}</Text> {scriptType}: `{script.command}` ({script.duration}s) {arrow}{' '}
                    {script.summary}
                </Text>
            </Box>
        );
    };


    // --- Main Component ---


    const ReviewScreen = () => {
        const {
            transaction,
            files,
            scripts = [],
            patchStatus,
            selectedItemIndex,
            bodyView,
            isDiffExpanded,
            reasoningScrollIndex,
            scriptErrorIndex,
            fileReviewStates,
            numFiles,
            approvedFilesCount,
            totalLinesAdded,
            totalLinesRemoved,
            selectedBulkRepairOptionIndex,
            selectedBulkInstructOptionIndex,
            navigableItems,
            navigableItemsInView,
            viewOffset,
            contentScrollIndex,
            availableBodyHeight,
            hasRejectedFiles,
        } = useReviewScreen();

        if (!transaction) {
            return <Text>Loading review...</Text>;
        }
        const { hash, message, prompt = '', reasoning = '' } = transaction;

        const renderBody = () => {
            if (bodyView === 'none') return null;

            if (bodyView === 'reasoning') {
                const reasoningText = reasoning || '';
                const reasoningLinesCount = reasoningText.split('\n').length;
                const visibleLinesCount = 10;
                return (
                    <Box flexDirection="column">
                        <ReasonScreen
                            reasoning={reasoningText}
                            scrollIndex={contentScrollIndex}
                            visibleLinesCount={availableBodyHeight}
                        />
                        {reasoningLinesCount > visibleLinesCount && (
                            <Text color="gray">
                                Showing lines {reasoningScrollIndex + 1}-{Math.min(reasoningScrollIndex + visibleLinesCount, reasoningLinesCount)}{' '}
                                of {reasoningLinesCount}
                            </Text>
                        )}
                    </Box>
                );
            }
            
            if (bodyView === 'diff') {
                const currentItem = navigableItems[selectedItemIndex];
                const selectedFile = currentItem?.type === 'file' ? files.find(f => f.id === currentItem.id) : undefined;
                if (!selectedFile) return null;
                return (
                    <DiffScreen
                        filePath={selectedFile.path}
                        diffContent={selectedFile.diff}
                        isExpanded={isDiffExpanded}
                        scrollIndex={contentScrollIndex}
                        maxHeight={availableBodyHeight}
                    />
                );
            }

            if (bodyView === 'script_output') {
                 const currentItem = navigableItems[selectedItemIndex];
                 const scriptItems = navigableItems.filter((i): i is { type: 'script'; id: string } => i.type === 'script');
                 const scriptIndex = currentItem?.type === 'script'
                    ? scriptItems.findIndex(i => i.id === currentItem.id)
                    : -1;
                 const selectedScript = scripts[scriptIndex] || null;
                 if (!selectedScript) return null;
                 
                 const outputLines = selectedScript.output.split('\n');
                 const errorLines = outputLines.filter((line: string) =>
                    line.includes('Error') || line.includes('Warning'),
                 );
                 
                 return (
                    <Box flexDirection="column">
                        <Text>
                            {selectedScript.command.includes('lint') ? 'LINTER' : 'SCRIPT'} OUTPUT: `{selectedScript.command}`
                        </Text>
                        <Box marginTop={1} flexDirection="column">
                            {outputLines.map((line: string, index: number) => {
                                const isError = line.includes('Error');
                                const isWarning = line.includes('Warning');
                                const isHighlighted = errorLines[scriptErrorIndex] === line;
                                
                                return (
                                    <Text 
                                        key={index} 
                                        color={isError ? 'red' : isWarning ? 'yellow' : undefined}
                                        bold={isHighlighted}
                                        backgroundColor={isHighlighted ? 'blue' : undefined}
                                    >
                                        {line}
                                    </Text>
                                );
                            })}
                        </Box>
                        {errorLines.length > 0 && (
                            <Text color="gray">
                                Error {scriptErrorIndex + 1} of {errorLines.length} highlighted
                            </Text>
                        )}
                    </Box>
                 );
            }

            if (bodyView === 'confirm_handoff') {
                return (
                    <Box flexDirection="column" gap={1}>
                        <Text bold>HANDOFF TO EXTERNAL AGENT</Text>
                        <Box flexDirection="column">
                            <Text>This action will:</Text>
                            <Text>1. Copy a detailed prompt to your clipboard for an agentic AI.</Text>
                            <Text>2. Mark the current transaction as &apos;Handoff&apos; and close this review.</Text>
                            <Text>3. Assume that you and the external agent will complete the work.</Text>
                        </Box>
                        <Text>Relaycode will NOT wait for a new patch. This is a final action.</Text>
                        <Text bold color="yellow">Are you sure you want to proceed?</Text>
                    </Box>
                );
            }

            if (bodyView === 'bulk_repair') {
                const failedFiles = files.filter((f: FileItem) => fileReviewStates.get(f.id)?.status === 'FAILED');
                const repairOptions = [
                    '(1) Copy Bulk Re-apply Prompt (for single-shot AI)',
                    '(2) Bulk Change Strategy & Re-apply',
                    '(3) Handoff to External Agent',
                    '(4) Bulk Abandon All Failed Files',
                    '(Esc) Cancel',
                ];

                return (
                    <Box flexDirection="column" gap={1}>
                        <Text bold>BULK REPAIR ACTION</Text>

                        <Box flexDirection="column">
                            <Text>The following {failedFiles.length} files failed to apply:</Text>
                            {failedFiles.map((file: FileItem) => (
                                <Text key={file.id}>- {file.path}</Text>
                            ))}
                        </Box>

                        <Text>How would you like to proceed?</Text>

                        <Box flexDirection="column">
                            {repairOptions.map((opt, i) => (
                                <Text key={i} color={selectedBulkRepairOptionIndex === i ? 'cyan' : undefined}>
                                    {selectedBulkRepairOptionIndex === i ? '> ' : '  '}
                                    {opt}
                                </Text>
                            ))}
                        </Box>
                    </Box>
                );
            }

            if (bodyView === 'bulk_instruct') {
                const rejectedFiles = files.filter((f: FileItem) => fileReviewStates.get(f.id)?.status === 'REJECTED');
                const instructOptions = [
                    '(1) Copy Bulk Re-instruct Prompt (for single-shot AI)',
                    '(2) Handoff to External Agent',
                    '(3) Bulk Un-reject All Files (revert to original)',
                    '(4) Cancel',
                ];

                return (
                    <Box flexDirection="column" gap={1}>
                        <Text bold>BULK INSTRUCTION ACTION</Text>

                        <Box flexDirection="column">
                            <Text>The following {rejectedFiles.length} files were rejected:</Text>
                            {rejectedFiles.map((file: FileItem) => (
                                <Text key={file.id}>- {file.path}</Text>
                            ))}
                        </Box>
                        <Box flexDirection="column" marginTop={1}>
                            {instructOptions.map((opt, i) => (
                                <Text key={i} color={selectedBulkInstructOptionIndex === i ? 'cyan' : undefined}>
                                    {selectedBulkInstructOptionIndex === i ? '> ' : '  '}
                                    {opt}
                                </Text>
                            ))}
                        </Box>
                    </Box>
                );
            }

            return null;
        };

        const renderFooter = () => {
            // Contextual footer for body views
            if (bodyView === 'diff') {
                return <ActionFooter actions={[
                    { key: '↑↓', label: 'Nav' },
                    { key: 'X', label: 'Expand' },
                    { key: 'D/Esc', label: 'Back' },
                ]}/>;
            }
            if (bodyView === 'reasoning') {
                return <ActionFooter actions={[
                    { key: '↑↓', label: 'Scroll Text' },
                    { key: 'R', label: 'Collapse View' },
                    { key: 'C', label: 'Copy Mode' },
                ]}/>;
            }
            if (bodyView === 'script_output') {
                return <ActionFooter actions={[
                    { key: '↑↓', label: 'Nav' },
                    { key: 'J↓/K↑', label: 'Next/Prev Error' },
                    { key: 'C', label: 'Copy Output' },
                    { key: 'Ent/Esc', label: 'Back' },
                ]}/>;
            }
            if (bodyView === 'bulk_repair') {
                return <Text>Use (↑↓) Nav · (Enter) Select · (1-4) Jump · (Esc) Cancel</Text>;
            }
            if (bodyView === 'bulk_instruct') {
                return <Text>Use (↑↓) Nav · (Enter) Select · (1-4) Jump · (Esc) Cancel</Text>;
            }
            if (bodyView === 'confirm_handoff') {
                return <ActionFooter actions={[
                    { key: 'Enter', label: 'Confirm Handoff' },
                    { key: 'Esc', label: 'Cancel' },
                ]}/>;
            }

            // Main footer
            const actions: ActionItem[] = [{ key: '↑↓', label: 'Nav' }];

            const currentItem = navigableItems[selectedItemIndex];
            
            if (currentItem?.type === 'file') {
                const selectedFile = files.find(f => f.id === currentItem.id);
                const fileState = fileReviewStates.get(currentItem.id);
                if (fileState?.status !== 'FAILED') {
                    actions.push({ key: 'Spc', label: 'Toggle' });
                }
                actions.push({ key: 'D', label: 'Diff' });
                
                // Add repair options for failed files
                if (selectedFile && fileState?.status === 'FAILED') {
                    actions.push({ key: 'T', label: 'Try Repair' });
                }
                if (selectedFile && fileState?.status === 'REJECTED') {
                    actions.push({ key: 'I', label: 'Instruct' });
                }
            } else if (currentItem?.type === 'script') {
                actions.push({ key: 'Ent', label: 'Expand Details' });
            } else { // Prompt or Reasoning
                actions.push({ key: 'Ent', label: 'Expand' });
            }

            if (currentItem?.type !== 'reasoning') {
                actions.push({ key: 'R', label: 'Reasoning' });
            }

            // Add bulk repair if there are failed files
            const hasFailedFiles = Array.from(fileReviewStates.values()).some(s => s.status === 'FAILED');
            if (hasFailedFiles) {
                actions.push({ key: 'Shift+T', label: 'Bulk Repair' });
            }
            // Add bulk instruct if there are rejected files
            if (hasRejectedFiles) {
                actions.push({ key: 'Shift+I', label: 'Bulk Instruct' });
            }
            
            actions.push({ key: 'C', label: 'Copy' });

            if (approvedFilesCount > 0) {
                actions.push({ key: 'A', label: 'Approve' });
            }

            if (Array.from(fileReviewStates.values()).some(s => s.status === 'APPROVED' || s.status === 'FAILED')) {
                actions.push({ key: 'Shift+R', label: 'Reject All' });
            }
            actions.push({ key: 'Q', label: 'Quit' });

            return <ActionFooter actions={actions} />;
        };

        return (
            <Box flexDirection="column">
                {/* Header */}
                <Text color="cyan">▲ relaycode review</Text>
                <Separator />
                
                {/* Navigator Section */}
                <Box flexDirection="column" marginY={1}>
                    <Box flexDirection="column">
                        <Text>{hash} · {message}</Text>
                        <Text>
                            (<Text color="green">+{totalLinesAdded}</Text>/<Text color="red">-{totalLinesRemoved}</Text>) · {numFiles} Files · ({approvedFilesCount}/{numFiles} Appr)
                            · Showing {viewOffset + 1}-{Math.min(viewOffset + navigableItemsInView.length, navigableItems.length)} of {navigableItems.length}
                            {patchStatus === 'PARTIAL_FAILURE' && scripts.length === 0 && <Text> · Scripts: SKIPPED</Text>}
                            {patchStatus === 'PARTIAL_FAILURE' && <Text color="red" bold> · MULTIPLE PATCHES FAILED</Text>}
                        </Text>
                    </Box>

                    <Box flexDirection="column" marginTop={1}>
                        <Text color={navigableItems[selectedItemIndex]?.type === 'prompt' ? 'cyan' : undefined}>
                            {navigableItems[selectedItemIndex]?.type === 'prompt' ? '> ' : '  '}
                            (P)rompt ▸ {(prompt || '').substring(0, 60)}...
                        </Text>
                        <Text color={navigableItems[selectedItemIndex]?.type === 'reasoning' ? 'cyan' : undefined}>
                            {navigableItems[selectedItemIndex]?.type === 'reasoning' ? '> ' : '  '}
                            (R)easoning ({(reasoning || '').split('\n\n').length} steps) {bodyView === 'reasoning' ? '▾' : '▸'}{' '}
                            {((reasoning || '').split('\n')[0] ?? '').substring(0, 50)}...
                        </Text>
                    </Box>
                </Box>

                <Separator />

                {/* Script Results (if any) */}
                {scripts.length > 0 && navigableItemsInView.some(i => i.type === 'script') && (
                    <>
                        <Box flexDirection="column" marginY={1}>
                            {scripts.map((script: ScriptResult) => {
                                const itemInViewIndex = navigableItemsInView.findIndex(i => i.type === 'script' && i.id === script.command);
                                if (itemInViewIndex === -1) return null; // Only render if visible
                                
                                const isSelected = selectedItemIndex === viewOffset + itemInViewIndex;
                                return (
                                    <ScriptItemRow key={script.command} script={script} isSelected={isSelected} isExpanded={bodyView === 'script_output' && isSelected} />
                                );
                            })}
                        </Box>
                        <Separator />
                    </>
                )}
                
                {/* Files Section */}
                <Box flexDirection="column" marginY={1}>
                    <Text bold>FILES</Text>
                    {files.map((file: FileItem) => {
                        const itemInViewIndex = navigableItemsInView.findIndex(i => i.type === 'file' && i.id === file.id);
                        if (itemInViewIndex === -1) return null; // Only render if visible

                        const isFocused = selectedItemIndex === viewOffset + itemInViewIndex;
                        const reviewState = fileReviewStates.get(file.id);
                        
                        return (
                            <FileItemRow
                                key={file.id} file={file} isFocused={isFocused}
                                reviewStatus={reviewState?.status || 'AWAITING'}
                                reviewError={reviewState?.error}
                                reviewDetails={reviewState?.details}
                            />
                        );
                    })}
                </Box>
                
                <Separator />
                
                {/* Body Viewport */}
                {bodyView !== 'none' && (
                    <>
                        <Box marginY={1}>
                            {renderBody()}
                        </Box>
                        <Separator />
                    </>
                )}

                {/* Footer */}
                <Box>
                    {renderFooter()}
                </Box>
            </Box>
        );
    };


    export default ReviewScreen;
  src/components/TransactionDetailScreen.tsx: >-
    import { Box, Text } from 'ink';

    import Separator from './Separator';

    import DiffScreen from './DiffScreen';

    import ReasonScreen from './ReasonScreen';

    import { useTransactionDetailScreen } from
    '../hooks/useTransactionDetailScreen';

    import type { FileChangeType } from '../types/domain.types';

    import ActionFooter from './ActionFooter';

    import type { ActionItem } from '../types/actions.types';


    const getFileChangeTypeIcon = (type: FileChangeType) => {
        switch (type) {
            case 'MOD': return '[MOD]';
            case 'ADD': return '[ADD]';
            case 'DEL': return '[DEL]';
            case 'REN': return '[REN]';
        }
    };


    const RevertModal = ({ transactionHash }: { transactionHash: string }) => {
        return (
            <Box 
                borderStyle="round"
                borderColor="yellow"
                flexDirection="column"
                paddingX={2}
                width="80%"
                alignSelf='center'
            >
                <Text bold color="yellow" wrap="wrap" >REVERT THIS TRANSACTION?</Text>
                <Box height={1} />
                <Text wrap="wrap">This will create a NEW transaction that reverses all changes made by {transactionHash}. The original transaction record will be preserved.</Text>
                <Box height={1} />
                <Text wrap="wrap">Are you sure?</Text>
            </Box>
        );
    };


    const TransactionDetailScreen = () => {
        const {
            transaction, files,
            focusedItemPath, expandedItemPaths, bodyView, contentScrollIndex, availableBodyHeight,
        } = useTransactionDetailScreen();

        if (!transaction) {
            return <Text>Loading transaction...</Text>;
        }

        const renderNavigator = () => {
            const isPromptFocused = focusedItemPath === 'PROMPT';
            const isReasoningFocused = focusedItemPath === 'REASONING';
            const isFilesFocused = focusedItemPath.startsWith('FILES');
            
            const isPromptExpanded = expandedItemPaths.has('PROMPT');
            const isReasoningExpanded = expandedItemPaths.has('REASONING');
            const isFilesExpanded = expandedItemPaths.has('FILES');
            
            return (
                <Box flexDirection="column">
                    <Text color={isPromptFocused ? 'cyan' : undefined}>
                        {isPromptFocused ? '> ' : '  '}
                        {isPromptExpanded ? '▾' : '▸'} (P)rompt
                    </Text>
                    <Text color={isReasoningFocused ? 'cyan' : undefined}>
                        {isReasoningFocused ? '> ' : '  '}
                        {isReasoningExpanded ? '▾' : '▸'} (R)easoning ({transaction.reasoning?.split('\n\n').length || 0} steps)
                    </Text>
                    <Text color={isFilesFocused ? 'cyan' : undefined}>
                        {isFilesFocused && !focusedItemPath.includes('/') ? '> ' : '  '}
                        {isFilesExpanded ? '▾' : '▸'} (F)iles ({files.length})
                    </Text>
                    {isFilesExpanded && (
                        <Box flexDirection="column" paddingLeft={2}>
                            {files.map((file) => {
                                 const fileId = `FILES/${file.id}`;
                                 const isFileSelected = focusedItemPath === fileId;
                                 const stats = file.type === 'DEL' ? '' : ` (+${file.linesAdded}/-${file.linesRemoved})`;
                                 return (
                                    <Text key={file.id} color={isFileSelected ? 'cyan' : undefined}>
                                        {isFileSelected ? '> ' : '  '}
                                        {`${getFileChangeTypeIcon(file.type)} ${file.path}${stats}`}
                                    </Text>
                                );
                            })}
                        </Box>
                    )}
                </Box>
            );
        };

        const renderBody = () => {
            if (bodyView === 'NONE') {
                return <Text color="gray">(Press → to expand a section and view its contents)</Text>;
            }
            if (bodyView === 'PROMPT') {
                return (
                    <Box flexDirection="column">
                        <Text>PROMPT</Text>
                        <Box marginTop={1} flexDirection="column">
                            {(transaction.prompt || '').split('\n')
                                .slice(contentScrollIndex, contentScrollIndex + availableBodyHeight)
                                .map((line, i) => <Text key={i}>{line}</Text>)
                            }
                        </Box>
                    </Box>
                );
            }
            if (bodyView === 'REASONING') {
                if (!transaction.reasoning) return <Text color="gray">No reasoning provided.</Text>;
                return <ReasonScreen reasoning={transaction.reasoning} scrollIndex={contentScrollIndex} visibleLinesCount={availableBodyHeight} />;
            }
            if (bodyView === 'FILES_LIST') {
                 return <Text color="gray">(Select a file and press → to view the diff)</Text>;
            }
            if (bodyView === 'DIFF_VIEW') {
                const fileId = focusedItemPath.split('/')[1];
                const file = files.find(f => f.id === fileId);
                if (!file) return null;
                return <DiffScreen filePath={file.path} diffContent={file.diff} isExpanded={true} scrollIndex={contentScrollIndex} maxHeight={availableBodyHeight} />;
            }
            return null;
        };

        const renderFooter = () => {
            if (bodyView === 'REVERT_CONFIRM') {
                return <ActionFooter actions={[
                    { key: 'Enter', label: 'Confirm Revert' },
                    { key: 'Esc', label: 'Cancel' },
                ]} />;
            }
            
            const isFileFocused = focusedItemPath.includes('/');
            const baseActions: ActionItem[] = [
                { key: 'C', label: 'Copy' },
                { key: 'O', label: isFileFocused ? 'Open File' : 'Open YAML' },
                { key: 'U', label: 'Undo' },
                { key: 'Q', label: 'Quit/Back' },
            ];
            let contextualActions: ActionItem[] = [];

            if (isFileFocused) { // Is a file
                if (bodyView === 'DIFF_VIEW') {
                    contextualActions = [
                        { key: '↑↓', label: 'Nav Files' },
                        { key: '←', label: 'Back to List' },
                    ];
                } else {
                    contextualActions = [
                        { key: '↑↓', label: 'Nav Files' },
                        { key: '→', label: 'View Diff' },
                        { key: '←', label: 'Back to Sections' },
                    ];
                }
                return <ActionFooter actions={[...contextualActions, ...baseActions]} />;
            }
            
            if (expandedItemPaths.has(focusedItemPath)) {
                contextualActions = [
                    { key: '↑↓', label: 'Nav/Scroll' },
                    { key: '→', label: 'Drill In' },
                    { key: '←', label: 'Collapse' },
                ];
            } else {
                contextualActions = [
                    { key: '↑↓', label: 'Nav' },
                    { key: '→', label: 'Expand' },
                ];
            }
            return <ActionFooter actions={[...contextualActions, ...baseActions]} />;
        };

        const { message, timestamp, status } = transaction;
        const date = new Date(timestamp).toISOString().replace('T', ' ').substring(0, 19);
        const fileStats = `${files.length} Files · +${files.reduce((a, f) => a + f.linesAdded, 0)} lines, -${files.reduce((a, f) => a + f.linesRemoved, 0)} lines`;

        return (
            <Box flexDirection="column">
                {/* Header */}
                <Text>▲ relaycode transaction details</Text>
                <Separator />
                
                {/* Modal takeover for Revert */}
                {bodyView === 'REVERT_CONFIRM' && <RevertModal transactionHash={transaction.hash} />}
                
                {/* Main view */}
                <Box flexDirection="column" display={bodyView === 'REVERT_CONFIRM' ? 'none' : 'flex'}>
                    {/* Navigator Part A */}
                    <Box flexDirection="column" marginY={1}>
                        <Text>UUID: {transaction.id}</Text>
                        <Text>Git: {message}</Text>
                        <Text>Date: {date} · Status: {status}</Text>
                        <Text>Stats: {fileStats}</Text>
                    </Box>
                    
                    {/* Navigator Part B */}
                    {renderNavigator()}
                    
                    <Separator />
                    
                    {/* Body */}
                    <Box marginY={1}>
                        {renderBody()}
                    </Box>
                    
                    <Separator />
                </Box>
                
                {/* Footer */}
                <Box>
                    {renderFooter()}
                </Box>
            </Box>
        );
    };


    export default TransactionDetailScreen;
  src/hooks/useReviewScreen.tsx: >-
    import { useMemo, useState, useEffect } from 'react';

    import { useInput, type Key } from 'ink';

    import { useReviewStore } from '../stores/review.store';

    import { useAppStore } from '../stores/app.store';

    import { useCopyStore } from '../stores/copy.store';

    import { useTransactionStore, selectSelectedTransaction } from
    '../stores/transaction.store';

    import type { FileItem } from '../types/domain.types';

    import { useViewport } from './useViewport';

    import { useStdoutDimensions } from '../utils';


    type NavigableItem =
        | { type: 'prompt' }
        | { type: 'reasoning' }
        | { type: 'script'; id: string }
        | { type: 'file'; id: string };

    export const useReviewScreen = () => {
        const store = useReviewStore();
        const {
            selectedItemIndex,
            bodyView,
            patchStatus,
            selectedBulkRepairOptionIndex,
            selectedBulkInstructOptionIndex,
        } = store;

        const transaction = useTransactionStore(selectSelectedTransaction);
        const { showDashboardScreen } = useAppStore(s => s.actions);
        const [contentScrollIndex, setContentScrollIndex] = useState(0);
        const [height] = useStdoutDimensions();

        // Reset scroll when body view changes
        useEffect(() => {
            setContentScrollIndex(0);
        }, [bodyView]);

        // Header(2) + Meta(3) + Prompt/Reasoning(2) + Separator(1) + Scripts(N) + Separator(1) + FilesHeader(1) + Separator(1) + BodyMargin(1) + Footer(1)
        const RESERVED_ROWS_MAIN = 13 + (transaction?.scripts?.length || 0);
        const { viewOffset, viewportHeight } = useViewport({ selectedIndex: selectedItemIndex, reservedRows: RESERVED_ROWS_MAIN });

        // For body content, it's simpler
        const availableBodyHeight = Math.max(1, height - (RESERVED_ROWS_MAIN + (transaction?.files?.length || 0)));

        const navigableItems = useMemo((): NavigableItem[] => {
            if (!transaction) return [];
            const scriptItems: NavigableItem[] = (transaction.scripts || []).map(s => ({ type: 'script', id: s.command }));
            const fileItems: NavigableItem[] = (transaction.files || []).map(f => ({ type: 'file', id: f.id }));
            return [{ type: 'prompt' }, { type: 'reasoning' }, ...scriptItems, ...fileItems];
        }, [transaction]);

        const navigableItemsInView = navigableItems.slice(viewOffset, viewOffset + viewportHeight);

        // Memoize files to prevent re-renders, fixing the exhaustive-deps lint warning.
        const files: FileItem[] = useMemo(() => transaction?.files || [], [transaction]);
        const fileReviewStates = useReviewStore(s => s.fileReviewStates);

        const reviewStats = useMemo(() => {
            const approvedFiles = files.filter(f => fileReviewStates.get(f.id)?.status === 'APPROVED');
            return {
                totalFiles: files.length,
                totalLinesAdded: files.reduce((sum, f) => sum + f.linesAdded, 0),
                totalLinesRemoved: files.reduce((sum, f) => sum + f.linesRemoved, 0),
                numFiles: files.length,
                approvedFilesCount: approvedFiles.length,
            };
        }, [files, fileReviewStates]);

        const hasRejectedFiles = useMemo(() => {
            if (!fileReviewStates) return false;
            return Array.from(fileReviewStates.values()).some(s => s.status === 'REJECTED');
        }, [fileReviewStates]);

        const { approvedFilesCount } = reviewStats;

        const isFileSelected = navigableItems[selectedItemIndex]?.type === 'file';

        const scripts = transaction?.scripts || [];

        const {
            moveSelectionUp,
            moveSelectionDown,
            expandDiff,
            toggleBodyView,
            setBodyView,
            startApplySimulation,
            approve,
            tryRepairFile,
            tryInstruct,
            showBulkRepair,
            showBulkInstruct,
            executeBulkRepairOption,
            executeBulkInstructOption,
            confirmHandoff,
            scrollReasoningUp,
            scrollReasoningDown,
            navigateScriptErrorUp,
            navigateScriptErrorDown,
            toggleFileApproval,
            rejectAllFiles,
            navigateBulkRepairUp,
            navigateBulkRepairDown,
            navigateBulkInstructUp,
            navigateBulkInstructDown,
        } = store.actions;

        const openCopyMode = () => {
            if (!transaction) return;
            const currentItem = navigableItems[selectedItemIndex];
            const selectedFile = currentItem?.type === 'file' ? files.find(f => f.id === currentItem.id) : undefined;
            useCopyStore.getState().actions.openForReview(transaction, transaction.files || [], selectedFile);
        };

        // --- Input Handlers ---

        const handleGlobalInput = (input: string, key: Key): boolean => {
            if (input === '1') { // For demo purposes
                startApplySimulation('success'); return true;
            }
            if (input === '2') { // For demo purposes
                startApplySimulation('failure'); return true;
            }
            // The 'q' (quit/back) is now handled by the global hotkey hook.

            if (key.escape) {
                if (bodyView === 'bulk_repair' || bodyView === 'confirm_handoff' || bodyView === 'bulk_instruct') {
                    toggleBodyView(bodyView);
                } else if (bodyView !== 'none') {
                    setBodyView('none');
                }
                return true;
            }
            return false;
        };

        const handleHandoffConfirmInput = (_input: string, key: Key): void => {
            if (key.return) confirmHandoff();
        };

        const handleBulkRepairInput = (input: string, key: Key): void => {
            if (key.upArrow) navigateBulkRepairUp();
            if (key.downArrow) navigateBulkRepairDown();
            if (key.return) {
                executeBulkRepairOption(selectedBulkRepairOptionIndex + 1); // Options are 1-based
                return;
            }

            if (input >= '1' && input <= '4') {
                executeBulkRepairOption(parseInt(input));
            }
        };
        
        const handleBulkInstructInput = (input: string, key: Key): void => {
            if (key.upArrow) navigateBulkInstructUp();
            if (key.downArrow) navigateBulkInstructDown();
            if (key.return) {
                executeBulkInstructOption(selectedBulkInstructOptionIndex + 1); // Options are 1-based
                return;
            }

            if (input >= '1' && input <= '3') {
                executeBulkInstructOption(parseInt(input));
            }
        };

        const handleContentScrollInput = (key: Key): boolean => {
            const contentViews = ['reasoning', 'script_output', 'diff'];
            if (!contentViews.includes(bodyView)) return false;

            if (key.upArrow) {
                setContentScrollIndex(i => Math.max(0, i - 1));
                return true;
            }
            if (key.downArrow) {
                // This is a simplification; a real implementation would need content length.
                setContentScrollIndex(i => i + 1);
                return true;
            }
            if (key.pageUp) {
                setContentScrollIndex(i => Math.max(0, i - availableBodyHeight));
                return true;
            }
            if (key.pageDown) {
                setContentScrollIndex(i => i + availableBodyHeight);
                return true;
            }
            return false;
        };

        const handleReasoningInput = (input: string, key: Key): void => {
            if (key.upArrow) scrollReasoningUp();
            if (key.downArrow) scrollReasoningDown();
            if (input.toLowerCase() === 'r') toggleBodyView('reasoning');
        };

        const handleScriptOutputInput = (input: string, key: Key): void => {
            if (input.toLowerCase() === 'j') navigateScriptErrorDown();
            if (input.toLowerCase() === 'k') navigateScriptErrorUp();
            if (key.return) toggleBodyView('script_output');
            if (input.toLowerCase() === 'c') { // TODO: this copy logic is not great.
                const currentItem = navigableItems[selectedItemIndex];
                const selectedScript = currentItem?.type === 'script' ? scripts.find(s => s.command === currentItem.id) : undefined;
                if (selectedScript) {
                    // eslint-disable-next-line no-console
                    console.log(`[CLIPBOARD] Copied script output: ${selectedScript.command}`);
                }
            }
        };

        const handleDiffInput = (input: string) => {
            if (input.toLowerCase() === 'x') expandDiff();
            if (input.toLowerCase() === 'd') toggleBodyView('diff');
        };

        const handleMainNavigationInput = (input: string, key: Key): void => {
            // Handle Shift+R for reject all
            if (key.shift && input.toLowerCase() === 'r') {
                if (approvedFilesCount > 0 && transaction) {
                    rejectAllFiles();
                }
                return;
            }

            // Main View Navigation
            if (key.upArrow) moveSelectionUp(navigableItems.length);
            if (key.downArrow) moveSelectionDown(navigableItems.length);

            const currentItem = navigableItems[selectedItemIndex];

            if (input === ' ') {
                if (currentItem?.type === 'file') {
                    const fileState = fileReviewStates.get(currentItem.id);
                    if (fileState && fileState.status !== 'FAILED') {
                        toggleFileApproval(currentItem.id);
                    }
                }
            }

            if (input.toLowerCase() === 'd' && currentItem?.type === 'file') {
                toggleBodyView('diff');
            }

            if (input.toLowerCase() === 'r') {
                toggleBodyView('reasoning');
            }

            if (key.return) { // Enter key
                if (currentItem?.type === 'file') {
                    toggleBodyView('diff');
                } else if (currentItem?.type === 'reasoning') {
                    toggleBodyView('reasoning');
                } else if (currentItem?.type === 'script') {
                    toggleBodyView('script_output');
                }
            }

            if (input.toLowerCase() === 'a') {
                if (approvedFilesCount > 0) {
                    approve();
                    showDashboardScreen();
                }
            }

            if (input.toLowerCase() === 'c') {
                openCopyMode();
            }

            if (input.toLowerCase() === 't') {
                if (key.shift) {
                    const hasFailedFiles = Array.from(fileReviewStates.values()).some(s => s.status === 'FAILED');
                    if (hasFailedFiles) showBulkRepair();
                } else if (currentItem?.type === 'file') {
                    const fileState = fileReviewStates.get(currentItem.id);
                    if (fileState?.status === 'FAILED') tryRepairFile(currentItem.id);
                }
            }

            if (input.toLowerCase() === 'i') {
                if (key.shift) {
                    if (hasRejectedFiles) showBulkInstruct();
                } else if (currentItem?.type === 'file') {
                    const fileState = fileReviewStates.get(currentItem.id);
                    if (fileState?.status === 'REJECTED') {
                        tryInstruct(currentItem.id);
                    }
                }
            }
        };

        useInput((input: string, key: Key) => {
            if (handleGlobalInput(input, key)) {
                return;
            }

            // If we are in a scrollable body view, prioritize that input.
            if (handleContentScrollInput(key)) {
                return;
            }

            switch (bodyView) {
                case 'confirm_handoff': return handleHandoffConfirmInput(input, key);
                case 'bulk_repair': return handleBulkRepairInput(input, key);
                case 'bulk_instruct': return handleBulkInstructInput(input, key);
                case 'reasoning': return handleReasoningInput(input, key);
                case 'script_output': return handleScriptOutputInput(input, key);
                case 'diff': return handleDiffInput(input);
                default: return handleMainNavigationInput(input, key);
            }
        });

        return {
            ...store,
            fileReviewStates,
            selectedItemIndex,
            transaction,
            files,
            scripts,
            patchStatus,
            navigableItems,
            isFileSelected,
            navigableItemsInView,
            viewOffset,
            contentScrollIndex,
            availableBodyHeight,
            selectedBulkRepairOptionIndex,
            selectedBulkInstructOptionIndex,
            ...reviewStats,
            hasRejectedFiles,
        };
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 156
