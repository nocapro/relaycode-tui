uuid: f19357ab-18e3-479e-b7d1-d961e93c1626
projectId: relaycode-tui
createdAt: '2025-09-21T21:49:45.043Z'
gitCommitMsg: >-
  feat(ui): add font weight and style for improved visual hierarchy

  Enhances the TUI's visual hierarchy by strategically applying font weights and
  styles, addressing the user's request for more varied text presentation.

  - Uses italic and gray for secondary information (subtext, bylines) to
  de-emphasize it. - Employs bold and underline for section headers to make them
  more prominent. - Dims less critical data in lists (e.g., transaction hashes)
  to improve scannability and focus on primary content.
promptSummary: The user requested different font sizes and weights.
reasoning:
  - >-
    Of course. While terminals don't support changing font *size* in the way a
    web browser does (it's usually a global setting for the whole terminal
    window), we can absolutely use font **weight** (bold), **style** (italic,
    underline), and color variations to create a stronger sense of visual
    hierarchy and emphasis. This will achieve the effect you're looking for.
  - 'Here is my plan:'
  - >-
    1.  **De-emphasize secondary text**: Use `italic` and `gray` for descriptive
    subtext, bylines, and helper text. This makes the primary information stand
    out more.
  - >-
    2.  **Emphasize key information**: Use `bold` and `underline` for section
    headers to make them look more distinct.
  - >-
    3.  **Refine data display**: In lists like the event stream, dim less
    critical data (like the full hash) to draw the eye to the most important
    parts (like the commit message).
  - I will now apply these principles to the relevant screens.
  - '### Step 1: Add Style to the Splash Screen'
  - >-
    I'll add an `italic` style to the tagline and byline to give them a softer,
    more refined look. The byline will also be colored gray to de-emphasize it
    slightly.
  - '### Step 2: Improve Hierarchy in the Initialization Screen'
  - >-
    Here, I'll style the subtext for each task and the descriptive text on the
    final screen to be `italic` and `gray`. This makes the main task titles and
    status updates the primary focus for the user.
  - '### Step 3: Refine the Dashboard Screen'
  - 'On the main dashboard, I''ll make three key changes:'
  - 1.  Make the `EVENT STREAM` title a `bold`, `underlined` header.
  - >-
    2.  Dim the transaction hash in each event item to make the commit message
    more prominent.
  - >-
    3.  Dim the descriptive text in the footer to make the colored keybindings
    pop even more.
  - >-
    These adjustments use weight, style, and color to create a more polished and
    hierarchical interface, addressing your request for more varied text
    presentation.
operations:
  - type: write
    path: src/components/SplashScreen.tsx
    content: >+
      --- src/components/SplashScreen.tsx

      +++ src/components/SplashScreen.tsx

      @@ -31,8 +31,8 @@
                   <Separator />
                   <Text color="cyan">{logo}</Text>
                   <Box flexDirection="column" alignItems="center">
      -                <Text>A zero-friction, AI-native patch engine.</Text>

      -                <Text>Built by Arman and contributors ·
      {chalk.underline('https://relay.noca.pro')}</Text>

      +                <Text italic>A zero-friction, AI-native patch
      engine.</Text>

      +                <Text italic color="gray">Built by Arman and contributors
      · {chalk.underline('https://relay.noca.pro')}</Text>
                   </Box>
                   
                   <Box flexDirection="row" justifyContent="space-around" width="100%" marginTop={1}>

    patchStrategy: standard-diff
  - type: write
    path: src/components/InitializationScreen.tsx
    content: "--- src/components/InitializationScreen.tsx\n+++ src/components/InitializationScreen.tsx\n@@ -19,9 +19,9 @@\n \t\t\t\t{symbol} {title}\n \t\t\t</Text>\n \t\t\t{task.subtext && task.status !== 'done' && (\n-\t\t\t\t<Text>\n+\t\t\t\t<Text italic color=\"gray\">\n \t\t\t\t\t{'     └─ '}{task.subtext}\n \t\t\t\t</Text>\n \t\t\t)}\n \t\t</Box>\n@@ -156,15 +156,15 @@\n                 <Box flexDirection=\"column\" marginTop={1} paddingLeft={2} gap={1}>\n                     <Box flexDirection=\"column\">\n                         <Text>{chalk.green('✓')} Config:   relay.config.json created.</Text>\n-                        <Text>          {chalk.gray('›')} Edit this file to tune linters, git integration, etc.</Text>\n+                        <Text color=\"gray\" italic>          › Edit this file to tune linters, git integration, etc.</Text>\n                     </Box>\n                     <Box flexDirection=\"column\">\n                         <Text>{chalk.green('✓')} State:    {stateText}</Text>\n-                        {stateSubText && <Text>          {chalk.gray('›')} {stateSubText}</Text>}\n+                        {stateSubText && <Text color=\"gray\" italic>          › {stateSubText}</Text>}\n                     </Box>\n                     <Box flexDirection=\"column\">\n                         <Text>{chalk.green('✓')} Prompt:   System prompt generated at .relay/prompts/system-prompt.md.</Text>\n-                        <Text>          {chalk.gray('›')} Copied to clipboard. Paste into your AI's custom instructions.</Text>\n+                        <Text color=\"gray\" italic>          › Copied to clipboard. Paste into your AI's custom instructions.</Text>\n                     </Box>\n                 </Box>\n             </Box>\n\n"
    patchStrategy: standard-diff
  - type: write
    path: src/components/DashboardScreen.tsx
    content: >+
      --- src/components/DashboardScreen.tsx

      +++ src/components/DashboardScreen.tsx

      @@ -34,7 +34,7 @@
           
           const content = (
               <Text>
      -            {time} {icon} {statusText} {transaction.hash} · {message}

      +            {time} {icon} {statusText} <Text
      color="gray">{transaction.hash}</Text> · {message}
               </Text>
           );
       
      @@ -131,9 +131,9 @@
               );
               if (isProcessing) return <Text>Processing... This may take a moment.</Text>;
       
      -        const pauseAction = status === 'PAUSED' ?
      `(${chalk.cyan.bold('R')})esume` : `(${chalk.cyan.bold('P')})ause`;

      -        return <Text>

      +        const pauseAction = status === 'PAUSED' ?
      `(${chalk.cyan.bold('R')})esume` : `(${chalk.cyan.bold('P')})ause`;;

      +        return <Text color="gray">
                   ({chalk.cyan.bold('↑↓')}) Nav · ({chalk.cyan.bold('Enter')}) Review · ({chalk.cyan.bold('A')})pprove All · ({chalk.cyan.bold('C')})ommit All · {pauseAction} · ({chalk.cyan.bold('Q')})uit
      -        </Text>;

      +        </Text>
           }
           
           const transactionsToConfirm = useMemo(() => {
      @@ -158,7 +158,7 @@
                           </>
                       )}
                       
      -                <Text> EVENT STREAM (Last 15 minutes)</Text>

      +                <Text bold underline> EVENT STREAM (Last 15
      minutes)</Text>
                       <Box flexDirection="column" marginTop={1}>
                           {transactions.map((tx, index) => (
                               <EventStreamItem 

    patchStrategy: standard-diff
snapshot:
  src/components/SplashScreen.tsx: |-
    import React, { useState, useEffect } from 'react';
    import { Box, Text, useInput } from 'ink';
    import { useAppStore } from '../stores/app.store';
    import chalk from 'chalk';
    import Separator from './Separator';

    const SplashScreen = () => {
        const showInitScreen = useAppStore(state => state.actions.showInitScreen);
        const [countdown, setCountdown] = useState(5);

        const handleSkip = () => {
            showInitScreen();
        };

        useInput(() => {
            handleSkip();
        });

        useEffect(() => {
            if (countdown === 0) {
                showInitScreen();
                return;
            }

            const timer = setTimeout(() => {
                setCountdown(c => c - 1);
            }, 1000);

            return () => clearTimeout(timer);
        }, [countdown, showInitScreen]);

        const logo = `
             ░█▀▄░█▀▀░█░░░█▀█░█░█░█▀▀░█▀█░█▀▄░█▀▀
             ░█▀▄░█▀▀░█░░░█▀█░░█░░█░░░█░█░█░█░█▀▀
             ░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀▀▀░▀░▀░░▀░░▀▀▀░▀▀▀
    `;

        return (
            <Box flexDirection="column">
                <Text color="cyan">▲ relaycode</Text>
                <Separator />
                <Text color="cyan">{logo}</Text>
                <Box flexDirection="column" alignItems="center">
                    <Text>A zero-friction, AI-native patch engine.</Text>
                    <Text>Built by Arman and contributors · {chalk.underline('https://relay.noca.pro')}</Text>
                </Box>
                
                <Box flexDirection="row" justifyContent="space-around" width="100%" marginTop={1}>
                    <Box flexDirection="column" width="45%">
                        <Text>Version 1.1.5</Text>
                        <Text>─────────────────────────</Text>
                        <Text>relaycode</Text>
                        <Text>relaycode-core</Text>
                        <Text>apply-multi-diff</Text>
                        <Text>konro</Text>
                    </Box>
                     <Box flexDirection="column" width="45%">
                        <Text>Build Timestamps</Text>
                        <Text>─────────────────────────</Text>
                        <Text>2025-09-20 13:58:05</Text>
                        <Text>2025-09-20 10:59:05</Text>
                        <Text>(versioned)</Text>
                        <Text>(versioned)</Text>
                    </Box>
                </Box>
                
                <Box marginTop={1}><Separator /></Box>
                <Text>If you love this workflow, check out {chalk.underline('https://www.noca.pro')} for the full</Text>
                <Text>web app with repo-wide visual context, history, and rollback.</Text>
                <Text>{chalk.cyan.bold('(V)')}isit noca.pro</Text>
                <Separator />
                <Text>Follow {chalk.cyan.bold('(X)')} · Join {chalk.cyan.bold('(D)')}iscord · Star on {chalk.cyan.bold('(G)')}itHub</Text>
                <Separator />
                <Text>Loading... {countdown} ({chalk.gray('Press any key to skip')})</Text>
            </Box>
        );
    };

    export default SplashScreen;
  src/components/InitializationScreen.tsx: "import React, { useEffect } from 'react';\nimport { Box, Text, useApp, useInput } from 'ink';\nimport { useInitStore, type Task, initialAnalyzeTasks, initialConfigureTasks } from '../stores/init.store';\nimport chalk from 'chalk';\nimport Separator from './Separator';\nimport { useAppStore } from '../stores/app.store';\nimport { sleep } from '../utils';\n\nconst TaskItem = ({ task, doneSymbol = '✓' }: { task: Task; doneSymbol?: string }) => {\n\tlet symbol;\n\tswitch (task.status) {\n\t\tcase 'pending': symbol = '( )'; break;\n\t\tcase 'active': symbol = chalk.cyan('(●)'); break;\n\t\tcase 'done': symbol = chalk.green(doneSymbol); break;\n\t}\n\n\tconst title = task.status === 'done' && doneSymbol?.startsWith('[✓]') ? `Created ${task.title.split(' ')[1]}` : task.title;\n\n\treturn (\n\t\t<Box flexDirection=\"column\">\n\t\t\t<Text>\n\t\t\t\t{symbol} {title}\n\t\t\t</Text>\n\t\t\t{task.subtext && task.status !== 'done' && (\n\t\t\t\t<Text>\n\t\t\t\t\t{'     └─ '}{task.subtext}\n\t\t\t\t</Text>\n\t\t\t)}\n\t\t</Box>\n\t);\n};\n\nconst InitializationScreen = () => {\n    const phase = useInitStore(s => s.phase);\n    const analyzeTasks = useInitStore(s => s.analyzeTasks);\n    const configureTasks = useInitStore(s => s.configureTasks);\n    const interactiveChoice = useInitStore(s => s.interactiveChoice);\n    const projectId = useInitStore(s => s.projectId);\n    const actions = useInitStore(s => s.actions);\n    const showDashboardScreen = useAppStore(s => s.actions.showDashboardScreen);\n    const { exit } = useApp();\n\n    useInput((input, key) => {\n        if (phase === 'INTERACTIVE') {\n            if (key.return) {\n                actions.setInteractiveChoice('ignore');\n            } else if (input.toLowerCase() === 's') {\n                actions.setInteractiveChoice('share');\n            }\n        }\n        if (phase === 'FINALIZE') {\n            if (input.toLowerCase() === 'q') {\n                exit();\n            } else if (input.toLowerCase() === 'w') {\n                showDashboardScreen();\n            }\n        }\n    });\n\n    useEffect(() => {\n        actions.resetInit();\n        const runSimulation = async () => {\n            actions.setPhase('ANALYZE');\n            for (const task of initialAnalyzeTasks) {\n                actions.updateAnalyzeTask(task.id, 'active');\n                await sleep(800);\n                actions.updateAnalyzeTask(task.id, 'done');\n            }\n            actions.setAnalysisResults(`'relaycode' (from package.json)`, true);\n            await sleep(500);\n\n            actions.setPhase('CONFIGURE');\n            const configTasksUntilInteractive = initialConfigureTasks.slice(0, 2);\n            for (const task of configTasksUntilInteractive) {\n                actions.updateConfigureTask(task.id, 'active');\n                await sleep(800);\n                actions.updateConfigureTask(task.id, 'done');\n            }\n            await sleep(500);\n\n            actions.setPhase('INTERACTIVE');\n        };\n\n        runSimulation();\n    }, []);\n\n    useEffect(() => {\n        if (phase === 'INTERACTIVE' && interactiveChoice !== null) {\n            const resumeSimulation = async () => {\n                actions.setPhase('CONFIGURE');\n                const lastTask = initialConfigureTasks[2];\n                if (lastTask) {\n                    actions.updateConfigureTask(lastTask.id, 'active');\n                    await sleep(800);\n                    actions.updateConfigureTask(lastTask.id, 'done');\n                    await sleep(500);\n\n                    actions.setPhase('FINALIZE');\n                }\n            };\n            resumeSimulation();\n        }\n    }, [interactiveChoice, phase, actions]);\n\n    const renderAnalyze = () => (\n        <Box flexDirection=\"column\">\n            <Text bold color=\"cyan\">PHASE 1: ANALYZE</Text>\n            <Box flexDirection=\"column\" marginTop={1} gap={1}>\n                {analyzeTasks.map(t => <TaskItem key={t.id} task={t} />)}\n            </Box>\n        </Box>\n    );\n\n    const renderContext = () => (\n        <Box flexDirection=\"column\" marginBottom={1}>\n            <Text bold color=\"cyan\">CONTEXT</Text>\n            <Text>  {chalk.green('✓')} Project ID: {projectId}</Text>\n            <Text>  {chalk.green('✓')} Gitignore:  Found at ./</Text>\n        </Box>\n    );\n\n    const renderConfigure = () => (\n        <Box flexDirection=\"column\">\n            {renderContext()}\n            <Text bold color=\"cyan\">PHASE 2: CONFIGURE</Text>\n            <Box flexDirection=\"column\" marginTop={1} gap={1}>\n                {configureTasks.map(t => <TaskItem key={t.id} task={t} doneSymbol=\"[✓]\" />)}\n            </Box>\n        </Box>\n    );\n\n    const renderInteractive = () => (\n        <Box flexDirection=\"column\">\n            {renderContext()}\n            <Text bold color=\"cyan\">PHASE 2: CONFIGURE</Text>\n            <Box flexDirection=\"column\" marginTop={1}>\n                {configureTasks.slice(0, 2).map(t => <TaskItem key={t.id} task={t} doneSymbol=\"[✓]\" />)}\n                <Box flexDirection=\"column\" marginTop={1}>\n                    <Text>{chalk.cyan('>')} The .relay/ directory is usually ignored by git.</Text>\n                    <Text>  Do you want to share its state with your team by committing it?</Text>\n                </Box>\n            </Box>\n        </Box>\n    );\n\n    const renderFinalize = () => {\n        const stateText = interactiveChoice === 'share'\n            ? \".relay/ directory initialized. It will be committed to git.\"\n            : \".relay/ directory initialized and added to .gitignore.\";\n        const stateSubText = interactiveChoice === 'share'\n            ? undefined\n            : \"Local transaction history will be stored here.\";\n        \n        return (\n            <Box flexDirection=\"column\">\n                <Text bold color=\"green\"> SYSTEM READY</Text>\n                <Box flexDirection=\"column\" marginTop={1} paddingLeft={2} gap={1}>\n                    <Box flexDirection=\"column\">\n                        <Text>{chalk.green('✓')} Config:   relay.config.json created.</Text>\n                        <Text>          {chalk.gray('›')} Edit this file to tune linters, git integration, etc.</Text>\n                    </Box>\n                    <Box flexDirection=\"column\">\n                        <Text>{chalk.green('✓')} State:    {stateText}</Text>\n                        {stateSubText && <Text>          {chalk.gray('›')} {stateSubText}</Text>}\n                    </Box>\n                    <Box flexDirection=\"column\">\n                        <Text>{chalk.green('✓')} Prompt:   System prompt generated at .relay/prompts/system-prompt.md.</Text>\n                        <Text>          {chalk.gray('›')} Copied to clipboard. Paste into your AI's custom instructions.</Text>\n                    </Box>\n                </Box>\n            </Box>\n        );\n    };\n\n    const renderPhase = () => {\n        switch (phase) {\n            case 'ANALYZE': return renderAnalyze();\n            case 'CONFIGURE': return renderConfigure();\n            case 'INTERACTIVE': return renderInteractive();\n            case 'FINALIZE': return renderFinalize();\n        }\n    };\n    \n    let footerText;\n    switch (phase) {\n        case 'ANALYZE': footerText = 'This utility will configure relaycode for your project.'; break;\n        case 'CONFIGURE': footerText = 'Applying configuration based on project analysis...'; break;\n        case 'INTERACTIVE': footerText = <Text>({chalk.cyan.bold('Enter')}) No, ignore it (default)      ({chalk.cyan.bold('S')}) Yes, share it</Text>; break;\n        case 'FINALIZE': footerText = <Text>({chalk.cyan.bold('W')})atch for Patches · ({chalk.cyan.bold('L')})View Logs · ({chalk.cyan.bold('Q')})uit</Text>; break;\n    }\n\n    return (\n        <Box flexDirection=\"column\">\n            <Text color=\"cyan\">{phase === 'FINALIZE' ? '▲ relaycode bootstrap complete' : '▲ relaycode bootstrap'}</Text>\n            <Separator />\n            <Box marginY={1}>{renderPhase()}</Box>\n            <Separator />\n            {typeof footerText === 'string' ? <Text>{footerText}</Text> : footerText}\n        </Box>\n    );\n};\n\nexport default InitializationScreen;"
  src/components/DashboardScreen.tsx: >-
    import React, { useMemo } from 'react';

    import { Box, Text, useApp, useInput } from 'ink';

    import chalk from 'chalk';

    import Spinner from 'ink-spinner';

    import { useDashboardStore, type Transaction, type DashboardStatus, type
    TransactionStatus } from '../stores/dashboard.store';

    import Separator from './Separator';

    import GlobalHelpScreen from './GlobalHelpScreen';


    // --- Sub-components & Helpers ---


    const getStatusIcon = (status: TransactionStatus) => {
        switch (status) {
            case 'PENDING': return chalk.yellow('?');
            case 'APPLIED': return chalk.green('✓');
            case 'COMMITTED': return chalk.blue('→');
            case 'FAILED': return chalk.red('✗');
            case 'REVERTED': return chalk.gray('↩');
            case 'IN-PROGRESS': return <Spinner type="dots" />;
            default: return ' ';
        }
    };


    const formatTimeAgo = (timestamp: number) => {
        const seconds = Math.floor((Date.now() - timestamp) / 1000);
        if (seconds < 60) return `-${seconds}s`;
        const minutes = Math.floor(seconds / 60);
        return `-${minutes}m`;
    };


    const EventStreamItem = ({ transaction, isSelected }: { transaction:
    Transaction, isSelected: boolean }) => {
        const icon = getStatusIcon(transaction.status);
        const time = formatTimeAgo(transaction.timestamp).padEnd(5, ' ');
        const statusText = transaction.status.padEnd(11, ' ');
        
        let message = transaction.message;
        if (transaction.status === 'IN-PROGRESS') {
            message = chalk.cyan(message);
        }
        
        const content = (
            <Text>
                {time} {icon} {statusText} {transaction.hash} · {message}
            </Text>
        );

        return isSelected ? <Text bold color="cyan">{'> '}{content}</Text> : <Text>{'  '}{content}</Text>;
    };


    const ConfirmationContent = ({ status, transactionsToConfirm }: { status:
    DashboardStatus, transactionsToConfirm: Transaction[] }) => {
        const isApprove = status === 'CONFIRM_APPROVE';
        const actionText = isApprove ? 'APPROVE' : 'COMMIT';
        
        return (
            <Box flexDirection="column" marginY={1} paddingLeft={2}>
                <Text bold color="yellow">{actionText} ALL PENDING TRANSACTIONS?</Text>
                <Text>The following {transactionsToConfirm.length} transaction(s) will be {isApprove ? 'approved' : 'committed'}:</Text>
                <Box flexDirection="column" paddingLeft={1} marginTop={1}>
                    {transactionsToConfirm.map(tx => (
                        <Text key={tx.id}>- {tx.hash}: {tx.message}</Text>
                    ))}
                </Box>
            </Box>
        );
    };


    // --- Main Component ---


    const DashboardScreen = () => {
        const { status, transactions, selectedTransactionIndex, showHelp } = useDashboardStore();
        const { togglePause, moveSelectionUp, moveSelectionDown, startApproveAll, startCommitAll, confirmAction, cancelAction, toggleHelp } = useDashboardStore(s => s.actions);
        const { exit } = useApp();

        const pendingApprovals = useMemo(() => transactions.filter(t => t.status === 'PENDING').length, [transactions]);
        const pendingCommits = useMemo(() => transactions.filter(t => t.status === 'APPLIED').length, [transactions]);

        const isModal = status === 'CONFIRM_APPROVE' || status === 'CONFIRM_COMMIT';
        const isProcessing = status === 'APPROVING' || status === 'COMMITTING';
        
        useInput((input, key) => {
            if (input === '?') {
                toggleHelp();
                return;
            }

            if (showHelp) {
                if (key.escape || input === '?') toggleHelp();
                return;
            }

            if (isModal) {
                if (key.return) confirmAction();
                if (key.escape) cancelAction();
                return;
            }

            if (isProcessing) return; // No input while processing
            
            if (input.toLowerCase() === 'q') exit();

            if (key.upArrow) moveSelectionUp();
            if (key.downArrow) moveSelectionDown();
            
            if (input.toLowerCase() === 'p') togglePause();
            if (input.toLowerCase() === 'a' && pendingApprovals > 0) startApproveAll();
            if (input.toLowerCase() === 'c' && pendingCommits > 0) startCommitAll();
        });

        const renderStatusBar = () => {
            let statusText, statusIcon;
            switch (status) {
                case 'LISTENING': statusText = 'LISTENING'; statusIcon = chalk.green('●'); break;
                case 'PAUSED': statusText = 'PAUSED'; statusIcon = chalk.yellow('||'); break;
                case 'APPROVING': statusText = 'APPROVING...'; statusIcon = chalk.cyan(<Spinner type="dots"/>); break;
                case 'COMMITTING': statusText = 'COMMITTING...'; statusIcon = chalk.cyan(<Spinner type="dots"/>); break;
                default: statusText = 'LISTENING'; statusIcon = chalk.green('●');
            }

            let approvalStr = String(pendingApprovals).padStart(2, '0');
            let commitStr = String(pendingCommits).padStart(2, '0');

            if (status === 'APPROVING') approvalStr = `(${chalk.cyan(<Spinner type="dots"/>)})`;
            if (status === 'COMMITTING') commitStr = `(${chalk.cyan(<Spinner type="dots"/>)})`;
            if (status === 'CONFIRM_APPROVE') approvalStr = chalk.bold.yellow(`┌ ${approvalStr} ┐`);
            if (status === 'CONFIRM_COMMIT') commitStr = chalk.bold.yellow(`┌ ${commitStr} ┐`);
            
            return (
                <Text>
                    STATUS: {statusIcon} {statusText} · APPROVALS: {approvalStr} · COMMITS: {commitStr}
                </Text>
            )
        }

        const renderFooter = () => {
            if (isModal) return (
                <Text>
                    ({chalk.cyan.bold('Enter')}) Confirm      ({chalk.cyan.bold('Esc')}) Cancel
                </Text>
            );
            if (isProcessing) return <Text>Processing... This may take a moment.</Text>;

            const pauseAction = status === 'PAUSED' ? `(${chalk.cyan.bold('R')})esume` : `(${chalk.cyan.bold('P')})ause`;
            return <Text>
                ({chalk.cyan.bold('↑↓')}) Nav · ({chalk.cyan.bold('Enter')}) Review · ({chalk.cyan.bold('A')})pprove All · ({chalk.cyan.bold('C')})ommit All · {pauseAction} · ({chalk.cyan.bold('Q')})uit
            </Text>;
        }
        
        const transactionsToConfirm = useMemo(() => {
            if (status === 'CONFIRM_APPROVE') return transactions.filter(t => t.status === 'PENDING');
            if (status === 'CONFIRM_COMMIT') return transactions.filter(t => t.status === 'APPLIED');
            return [];
        }, [status, transactions]);

        return (
            <Box flexDirection="column" height="100%">
                {showHelp && <GlobalHelpScreen />}

                <Box flexDirection="column" display={showHelp ? 'none' : 'flex'}>
                    <Text color="cyan">▲ relaycode dashboard</Text>
                    <Separator />
                    <Box marginY={1}>
                        {renderStatusBar()}
                    </Box>
                    
                    {isModal && (
                        <>
                            <ConfirmationContent status={status} transactionsToConfirm={transactionsToConfirm} />
                            <Separator />
                        </>
                    )}
                    
                    <Text> EVENT STREAM (Last 15 minutes)</Text>
                    <Box flexDirection="column" marginTop={1}>
                        {transactions.map((tx, index) => (
                            <EventStreamItem 
                                key={tx.id} 
                                transaction={tx} 
                                isSelected={!isModal && index === selectedTransactionIndex}
                            />
                        ))}
                    </Box>

                    <Box marginTop={1}><Separator /></Box>
                    {renderFooter()}
                </Box>
            </Box>
        );
    };


    export default DashboardScreen;
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 7
